// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.10
// source: pb/data.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionType int32

const (
	ActionType_Login     ActionType = 0 // 登入
	ActionType_Logout    ActionType = 1 // 登出
	ActionType_Heartbeat ActionType = 2 // 心跳
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "Login",
		1: "Logout",
		2: "Heartbeat",
	}
	ActionType_value = map[string]int32{
		"Login":     0,
		"Logout":    1,
		"Heartbeat": 2,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{0}
}

type ResponseType int32

const (
	ResponseType_Success ResponseType = 0
	ResponseType_Failure ResponseType = 1
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "Success",
		1: "Failure",
	}
	ResponseType_value = map[string]int32{
		"Success": 0,
		"Failure": 1,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[1].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[1]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{1}
}

type SecurityTradingStatus int32

const (
	SecurityTradingStatus_SecurityTradingStatus_Trading_Halt SecurityTradingStatus = 0
	SecurityTradingStatus_SecurityTradingStatus_Resume       SecurityTradingStatus = 1
)

// Enum value maps for SecurityTradingStatus.
var (
	SecurityTradingStatus_name = map[int32]string{
		0: "SecurityTradingStatus_Trading_Halt",
		1: "SecurityTradingStatus_Resume",
	}
	SecurityTradingStatus_value = map[string]int32{
		"SecurityTradingStatus_Trading_Halt": 0,
		"SecurityTradingStatus_Resume":       1,
	}
)

func (x SecurityTradingStatus) Enum() *SecurityTradingStatus {
	p := new(SecurityTradingStatus)
	*p = x
	return p
}

func (x SecurityTradingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityTradingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[2].Descriptor()
}

func (SecurityTradingStatus) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[2]
}

func (x SecurityTradingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityTradingStatus.Descriptor instead.
func (SecurityTradingStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{2}
}

type SuspensionIndicator int32

const (
	SuspensionIndicator_SuspensionIndicator_Trading_Halt_OF_Suspend SuspensionIndicator = 0
	SuspensionIndicator_SuspensionIndicator_Resume                  SuspensionIndicator = 1
)

// Enum value maps for SuspensionIndicator.
var (
	SuspensionIndicator_name = map[int32]string{
		0: "SuspensionIndicator_Trading_Halt_OF_Suspend",
		1: "SuspensionIndicator_Resume",
	}
	SuspensionIndicator_value = map[string]int32{
		"SuspensionIndicator_Trading_Halt_OF_Suspend": 0,
		"SuspensionIndicator_Resume":                  1,
	}
)

func (x SuspensionIndicator) Enum() *SuspensionIndicator {
	p := new(SuspensionIndicator)
	*p = x
	return p
}

func (x SuspensionIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuspensionIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[3].Descriptor()
}

func (SuspensionIndicator) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[3]
}

func (x SuspensionIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuspensionIndicator.Descriptor instead.
func (SuspensionIndicator) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{3}
}

type Authenticity int32

const (
	Authenticity_Authenticity_LIVE_PRODUCTION Authenticity = 0
	Authenticity_Authenticity_TEST            Authenticity = 1
)

// Enum value maps for Authenticity.
var (
	Authenticity_name = map[int32]string{
		0: "Authenticity_LIVE_PRODUCTION",
		1: "Authenticity_TEST",
	}
	Authenticity_value = map[string]int32{
		"Authenticity_LIVE_PRODUCTION": 0,
		"Authenticity_TEST":            1,
	}
)

func (x Authenticity) Enum() *Authenticity {
	p := new(Authenticity)
	*p = x
	return p
}

func (x Authenticity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authenticity) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[4].Descriptor()
}

func (Authenticity) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[4]
}

func (x Authenticity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authenticity.Descriptor instead.
func (Authenticity) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{4}
}

type BreachedLevel int32

const (
	BreachedLevel_BreachedLevel_LEVEL1 BreachedLevel = 0
	BreachedLevel_BreachedLevel_LEVEL2 BreachedLevel = 1
	BreachedLevel_BreachedLevel_LEVEL3 BreachedLevel = 2
)

// Enum value maps for BreachedLevel.
var (
	BreachedLevel_name = map[int32]string{
		0: "BreachedLevel_LEVEL1",
		1: "BreachedLevel_LEVEL2",
		2: "BreachedLevel_LEVEL3",
	}
	BreachedLevel_value = map[string]int32{
		"BreachedLevel_LEVEL1": 0,
		"BreachedLevel_LEVEL2": 1,
		"BreachedLevel_LEVEL3": 2,
	}
)

func (x BreachedLevel) Enum() *BreachedLevel {
	p := new(BreachedLevel)
	*p = x
	return p
}

func (x BreachedLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BreachedLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[5].Descriptor()
}

func (BreachedLevel) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[5]
}

func (x BreachedLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BreachedLevel.Descriptor instead.
func (BreachedLevel) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{5}
}

type CurrentTradingState int32

const (
	CurrentTradingState_CurrentTradingState_HALT_IN_EFFECT              CurrentTradingState = 0
	CurrentTradingState_CurrentTradingState_PAUSED_ACROSS_ALL           CurrentTradingState = 1
	CurrentTradingState_CurrentTradingState_QUOTE_ONLY_PERIOD_IN_EFFECT CurrentTradingState = 2
	CurrentTradingState_CurrentTradingState_TRADING_ON_NASDAQ_MARKET    CurrentTradingState = 3
)

// Enum value maps for CurrentTradingState.
var (
	CurrentTradingState_name = map[int32]string{
		0: "CurrentTradingState_HALT_IN_EFFECT",
		1: "CurrentTradingState_PAUSED_ACROSS_ALL",
		2: "CurrentTradingState_QUOTE_ONLY_PERIOD_IN_EFFECT",
		3: "CurrentTradingState_TRADING_ON_NASDAQ_MARKET",
	}
	CurrentTradingState_value = map[string]int32{
		"CurrentTradingState_HALT_IN_EFFECT":              0,
		"CurrentTradingState_PAUSED_ACROSS_ALL":           1,
		"CurrentTradingState_QUOTE_ONLY_PERIOD_IN_EFFECT": 2,
		"CurrentTradingState_TRADING_ON_NASDAQ_MARKET":    3,
	}
)

func (x CurrentTradingState) Enum() *CurrentTradingState {
	p := new(CurrentTradingState)
	*p = x
	return p
}

func (x CurrentTradingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentTradingState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[6].Descriptor()
}

func (CurrentTradingState) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[6]
}

func (x CurrentTradingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentTradingState.Descriptor instead.
func (CurrentTradingState) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{6}
}

type EventCode int32

const (
	EventCode_EventCode_START_OF_TRANSMISSIONS        EventCode = 0
	EventCode_EventCode_START_OF_SYSTEM_HOURS         EventCode = 1
	EventCode_EventCode_START_OF_MARKET_HOURS         EventCode = 2
	EventCode_EventCode_END_OF_THE_REGULAR_US_SESSION EventCode = 3
	EventCode_EventCode_END_OF_SYSTEM_HOURS           EventCode = 4
	EventCode_EventCode_END_OF_TRANSMISSIONS          EventCode = 5
)

// Enum value maps for EventCode.
var (
	EventCode_name = map[int32]string{
		0: "EventCode_START_OF_TRANSMISSIONS",
		1: "EventCode_START_OF_SYSTEM_HOURS",
		2: "EventCode_START_OF_MARKET_HOURS",
		3: "EventCode_END_OF_THE_REGULAR_US_SESSION",
		4: "EventCode_END_OF_SYSTEM_HOURS",
		5: "EventCode_END_OF_TRANSMISSIONS",
	}
	EventCode_value = map[string]int32{
		"EventCode_START_OF_TRANSMISSIONS":        0,
		"EventCode_START_OF_SYSTEM_HOURS":         1,
		"EventCode_START_OF_MARKET_HOURS":         2,
		"EventCode_END_OF_THE_REGULAR_US_SESSION": 3,
		"EventCode_END_OF_SYSTEM_HOURS":           4,
		"EventCode_END_OF_TRANSMISSIONS":          5,
	}
)

func (x EventCode) Enum() *EventCode {
	p := new(EventCode)
	*p = x
	return p
}

func (x EventCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[7].Descriptor()
}

func (EventCode) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[7]
}

func (x EventCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCode.Descriptor instead.
func (EventCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{7}
}

type FinancialStatusIndicator int32

const (
	FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT                                         FinancialStatusIndicator = 0
	FinancialStatusIndicator_FinancialStatusIndicator_DELINQUENT                                        FinancialStatusIndicator = 1
	FinancialStatusIndicator_FinancialStatusIndicator_BANKRUPT                                          FinancialStatusIndicator = 2
	FinancialStatusIndicator_FinancialStatusIndicator_SUSPENDED                                         FinancialStatusIndicator = 3
	FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT_AND_BANKRUPT                            FinancialStatusIndicator = 4
	FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT_AND_DELINQUENT                          FinancialStatusIndicator = 5
	FinancialStatusIndicator_FinancialStatusIndicator_DELINQUENT_AND_BANKRUPT                           FinancialStatusIndicator = 6
	FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT_DELINQUENT_AND_BANKRUPT                 FinancialStatusIndicator = 7
	FinancialStatusIndicator_FinancialStatusIndicator_REDEMPTIONS_SUSPENDED_FOR_EXCHANGE_TRADED_PRODUCT FinancialStatusIndicator = 8
	FinancialStatusIndicator_FinancialStatusIndicator_ISSUER_IS_NOT_DEFICIENT                           FinancialStatusIndicator = 9
)

// Enum value maps for FinancialStatusIndicator.
var (
	FinancialStatusIndicator_name = map[int32]string{
		0: "FinancialStatusIndicator_DEFICIENT",
		1: "FinancialStatusIndicator_DELINQUENT",
		2: "FinancialStatusIndicator_BANKRUPT",
		3: "FinancialStatusIndicator_SUSPENDED",
		4: "FinancialStatusIndicator_DEFICIENT_AND_BANKRUPT",
		5: "FinancialStatusIndicator_DEFICIENT_AND_DELINQUENT",
		6: "FinancialStatusIndicator_DELINQUENT_AND_BANKRUPT",
		7: "FinancialStatusIndicator_DEFICIENT_DELINQUENT_AND_BANKRUPT",
		8: "FinancialStatusIndicator_REDEMPTIONS_SUSPENDED_FOR_EXCHANGE_TRADED_PRODUCT",
		9: "FinancialStatusIndicator_ISSUER_IS_NOT_DEFICIENT",
	}
	FinancialStatusIndicator_value = map[string]int32{
		"FinancialStatusIndicator_DEFICIENT":                                         0,
		"FinancialStatusIndicator_DELINQUENT":                                        1,
		"FinancialStatusIndicator_BANKRUPT":                                          2,
		"FinancialStatusIndicator_SUSPENDED":                                         3,
		"FinancialStatusIndicator_DEFICIENT_AND_BANKRUPT":                            4,
		"FinancialStatusIndicator_DEFICIENT_AND_DELINQUENT":                          5,
		"FinancialStatusIndicator_DELINQUENT_AND_BANKRUPT":                           6,
		"FinancialStatusIndicator_DEFICIENT_DELINQUENT_AND_BANKRUPT":                 7,
		"FinancialStatusIndicator_REDEMPTIONS_SUSPENDED_FOR_EXCHANGE_TRADED_PRODUCT": 8,
		"FinancialStatusIndicator_ISSUER_IS_NOT_DEFICIENT":                           9,
	}
)

func (x FinancialStatusIndicator) Enum() *FinancialStatusIndicator {
	p := new(FinancialStatusIndicator)
	*p = x
	return p
}

func (x FinancialStatusIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialStatusIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[8].Descriptor()
}

func (FinancialStatusIndicator) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[8]
}

func (x FinancialStatusIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialStatusIndicator.Descriptor instead.
func (FinancialStatusIndicator) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{8}
}

type HaltAction int32

const (
	HaltAction_HaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET        HaltAction = 0
	HaltAction_HaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED HaltAction = 1
)

// Enum value maps for HaltAction.
var (
	HaltAction_name = map[int32]string{
		0: "HaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET",
		1: "HaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED",
	}
	HaltAction_value = map[string]int32{
		"HaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET":        0,
		"HaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED": 1,
	}
)

func (x HaltAction) Enum() *HaltAction {
	p := new(HaltAction)
	*p = x
	return p
}

func (x HaltAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaltAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[9].Descriptor()
}

func (HaltAction) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[9]
}

func (x HaltAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaltAction.Descriptor instead.
func (HaltAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{9}
}

type IPOQuotationReleaseQualifier int32

const (
	IPOQuotationReleaseQualifier_IPOQuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE_TIME IPOQuotationReleaseQualifier = 0
	IPOQuotationReleaseQualifier_IPOQuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED     IPOQuotationReleaseQualifier = 1
)

// Enum value maps for IPOQuotationReleaseQualifier.
var (
	IPOQuotationReleaseQualifier_name = map[int32]string{
		0: "IPOQuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE_TIME",
		1: "IPOQuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED",
	}
	IPOQuotationReleaseQualifier_value = map[string]int32{
		"IPOQuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE_TIME": 0,
		"IPOQuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED":     1,
	}
)

func (x IPOQuotationReleaseQualifier) Enum() *IPOQuotationReleaseQualifier {
	p := new(IPOQuotationReleaseQualifier)
	*p = x
	return p
}

func (x IPOQuotationReleaseQualifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPOQuotationReleaseQualifier) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[10].Descriptor()
}

func (IPOQuotationReleaseQualifier) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[10]
}

func (x IPOQuotationReleaseQualifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPOQuotationReleaseQualifier.Descriptor instead.
func (IPOQuotationReleaseQualifier) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{10}
}

type IndicatesIf int32

const (
	IndicatesIf_IndicatesIf_Y IndicatesIf = 0
	IndicatesIf_IndicatesIf_N IndicatesIf = 1
)

// Enum value maps for IndicatesIf.
var (
	IndicatesIf_name = map[int32]string{
		0: "IndicatesIf_Y",
		1: "IndicatesIf_N",
	}
	IndicatesIf_value = map[string]int32{
		"IndicatesIf_Y": 0,
		"IndicatesIf_N": 1,
	}
)

func (x IndicatesIf) Enum() *IndicatesIf {
	p := new(IndicatesIf)
	*p = x
	return p
}

func (x IndicatesIf) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicatesIf) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[11].Descriptor()
}

func (IndicatesIf) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[11]
}

func (x IndicatesIf) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicatesIf.Descriptor instead.
func (IndicatesIf) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{11}
}

type LULDRule int32

const (
	LULDRule_LULDRule_NMS_STOCKS_AND_SELECT_ETPS LULDRule = 0
	LULDRule_LULDRule_NMS_STOCKS                 LULDRule = 1
)

// Enum value maps for LULDRule.
var (
	LULDRule_name = map[int32]string{
		0: "LULDRule_NMS_STOCKS_AND_SELECT_ETPS",
		1: "LULDRule_NMS_STOCKS",
	}
	LULDRule_value = map[string]int32{
		"LULDRule_NMS_STOCKS_AND_SELECT_ETPS": 0,
		"LULDRule_NMS_STOCKS":                 1,
	}
)

func (x LULDRule) Enum() *LULDRule {
	p := new(LULDRule)
	*p = x
	return p
}

func (x LULDRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LULDRule) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[12].Descriptor()
}

func (LULDRule) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[12]
}

func (x LULDRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LULDRule.Descriptor instead.
func (LULDRule) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{12}
}

type LevelFour int32

const (
	LevelFour_LevelFour_ACQUISITION                   LevelFour = 0
	LevelFour_LevelFour_BUNCHED                       LevelFour = 1
	LevelFour_LevelFour_DISTRIBUTION                  LevelFour = 2
	LevelFour_LevelFour_PRICE_VARIATION_TRANSACTION   LevelFour = 3
	LevelFour_LevelFour_NASDAQ_OFFICIAL_CLOSE_PRICE   LevelFour = 4
	LevelFour_LevelFour_PRIOR_REFERENCE_PRICE         LevelFour = 5
	LevelFour_LevelFour_NASDAQ_OFFICIAL_OPENING_PRICE LevelFour = 6
	LevelFour_LevelFour_SPLIT_TRADE                   LevelFour = 7
	LevelFour_LevelFour_CONTINGENT_TRADE              LevelFour = 8
	LevelFour_LevelFour_AVERAGE_PRICE_TRADE1          LevelFour = 9
	LevelFour_LevelFour_CROSS_TRADE                   LevelFour = 10
	LevelFour_LevelFour_ODD_LOT_EXECUTION             LevelFour = 11
	LevelFour_LevelFour_ODD_LOT_CROSS_EXECUTION       LevelFour = 12
)

// Enum value maps for LevelFour.
var (
	LevelFour_name = map[int32]string{
		0:  "LevelFour_ACQUISITION",
		1:  "LevelFour_BUNCHED",
		2:  "LevelFour_DISTRIBUTION",
		3:  "LevelFour_PRICE_VARIATION_TRANSACTION",
		4:  "LevelFour_NASDAQ_OFFICIAL_CLOSE_PRICE",
		5:  "LevelFour_PRIOR_REFERENCE_PRICE",
		6:  "LevelFour_NASDAQ_OFFICIAL_OPENING_PRICE",
		7:  "LevelFour_SPLIT_TRADE",
		8:  "LevelFour_CONTINGENT_TRADE",
		9:  "LevelFour_AVERAGE_PRICE_TRADE1",
		10: "LevelFour_CROSS_TRADE",
		11: "LevelFour_ODD_LOT_EXECUTION",
		12: "LevelFour_ODD_LOT_CROSS_EXECUTION",
	}
	LevelFour_value = map[string]int32{
		"LevelFour_ACQUISITION":                   0,
		"LevelFour_BUNCHED":                       1,
		"LevelFour_DISTRIBUTION":                  2,
		"LevelFour_PRICE_VARIATION_TRANSACTION":   3,
		"LevelFour_NASDAQ_OFFICIAL_CLOSE_PRICE":   4,
		"LevelFour_PRIOR_REFERENCE_PRICE":         5,
		"LevelFour_NASDAQ_OFFICIAL_OPENING_PRICE": 6,
		"LevelFour_SPLIT_TRADE":                   7,
		"LevelFour_CONTINGENT_TRADE":              8,
		"LevelFour_AVERAGE_PRICE_TRADE1":          9,
		"LevelFour_CROSS_TRADE":                   10,
		"LevelFour_ODD_LOT_EXECUTION":             11,
		"LevelFour_ODD_LOT_CROSS_EXECUTION":       12,
	}
)

func (x LevelFour) Enum() *LevelFour {
	p := new(LevelFour)
	*p = x
	return p
}

func (x LevelFour) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelFour) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[13].Descriptor()
}

func (LevelFour) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[13]
}

func (x LevelFour) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelFour.Descriptor instead.
func (LevelFour) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{13}
}

type LevelOne int32

const (
	LevelOne_LevelOne_REGULAR             LevelOne = 0
	LevelOne_LevelOne_CASH_SETTLEMENT     LevelOne = 1
	LevelOne_LevelOne_NEXT_DAY_SETTLEMENT LevelOne = 2
	LevelOne_LevelOne_SELLER_SETTLEMENT   LevelOne = 3
)

// Enum value maps for LevelOne.
var (
	LevelOne_name = map[int32]string{
		0: "LevelOne_REGULAR",
		1: "LevelOne_CASH_SETTLEMENT",
		2: "LevelOne_NEXT_DAY_SETTLEMENT",
		3: "LevelOne_SELLER_SETTLEMENT",
	}
	LevelOne_value = map[string]int32{
		"LevelOne_REGULAR":             0,
		"LevelOne_CASH_SETTLEMENT":     1,
		"LevelOne_NEXT_DAY_SETTLEMENT": 2,
		"LevelOne_SELLER_SETTLEMENT":   3,
	}
)

func (x LevelOne) Enum() *LevelOne {
	p := new(LevelOne)
	*p = x
	return p
}

func (x LevelOne) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelOne) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[14].Descriptor()
}

func (LevelOne) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[14]
}

func (x LevelOne) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelOne.Descriptor instead.
func (LevelOne) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{14}
}

type LevelThree int32

const (
	LevelThree_LevelThree_EXTENDED_HOURS_TRADE                                  LevelThree = 0
	LevelThree_LevelThree_SOLD_LAST_REPORTED_LATE_BUT_IN_SEQUENCE               LevelThree = 1
	LevelThree_LevelThree_SOLD_OUT_OF_SEQUENCE                                  LevelThree = 2
	LevelThree_LevelThree_EXTENDED_HOURS_TRADE_REPORTED_LATE_OR_OUT_OF_SEQUENCE LevelThree = 3
)

// Enum value maps for LevelThree.
var (
	LevelThree_name = map[int32]string{
		0: "LevelThree_EXTENDED_HOURS_TRADE",
		1: "LevelThree_SOLD_LAST_REPORTED_LATE_BUT_IN_SEQUENCE",
		2: "LevelThree_SOLD_OUT_OF_SEQUENCE",
		3: "LevelThree_EXTENDED_HOURS_TRADE_REPORTED_LATE_OR_OUT_OF_SEQUENCE",
	}
	LevelThree_value = map[string]int32{
		"LevelThree_EXTENDED_HOURS_TRADE":                                  0,
		"LevelThree_SOLD_LAST_REPORTED_LATE_BUT_IN_SEQUENCE":               1,
		"LevelThree_SOLD_OUT_OF_SEQUENCE":                                  2,
		"LevelThree_EXTENDED_HOURS_TRADE_REPORTED_LATE_OR_OUT_OF_SEQUENCE": 3,
	}
)

func (x LevelThree) Enum() *LevelThree {
	p := new(LevelThree)
	*p = x
	return p
}

func (x LevelThree) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelThree) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[15].Descriptor()
}

func (LevelThree) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[15]
}

func (x LevelThree) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelThree.Descriptor instead.
func (LevelThree) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{15}
}

type LevelTwo int32

const (
	LevelTwo_LevelTwo_INTERMARKET_SWEEP          LevelTwo = 0
	LevelTwo_LevelTwo_OPENING_PRINT              LevelTwo = 1
	LevelTwo_LevelTwo_DERIVATIVE_PRICED          LevelTwo = 2
	LevelTwo_LevelTwo_RE_OPENING_PRINT           LevelTwo = 3
	LevelTwo_LevelTwo_CLOSING_PRINT              LevelTwo = 4
	LevelTwo_LevelTwo_QUALIFIED_CONTINGENT_TRADE LevelTwo = 5
)

// Enum value maps for LevelTwo.
var (
	LevelTwo_name = map[int32]string{
		0: "LevelTwo_INTERMARKET_SWEEP",
		1: "LevelTwo_OPENING_PRINT",
		2: "LevelTwo_DERIVATIVE_PRICED",
		3: "LevelTwo_RE_OPENING_PRINT",
		4: "LevelTwo_CLOSING_PRINT",
		5: "LevelTwo_QUALIFIED_CONTINGENT_TRADE",
	}
	LevelTwo_value = map[string]int32{
		"LevelTwo_INTERMARKET_SWEEP":          0,
		"LevelTwo_OPENING_PRINT":              1,
		"LevelTwo_DERIVATIVE_PRICED":          2,
		"LevelTwo_RE_OPENING_PRINT":           3,
		"LevelTwo_CLOSING_PRINT":              4,
		"LevelTwo_QUALIFIED_CONTINGENT_TRADE": 5,
	}
)

func (x LevelTwo) Enum() *LevelTwo {
	p := new(LevelTwo)
	*p = x
	return p
}

func (x LevelTwo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelTwo) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[16].Descriptor()
}

func (LevelTwo) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[16]
}

func (x LevelTwo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelTwo.Descriptor instead.
func (LevelTwo) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{16}
}

type MarketCategory int32

const (
	MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM                       MarketCategory = 0
	MarketCategory_MarketCategory_NASDAQ_GLOBAL_MARKETSM                              MarketCategory = 1
	MarketCategory_MarketCategory_NASDAQ_CAPITAL_MARKET_NON_NASDAQ_LISTED_INSTRUMENTS MarketCategory = 2
	MarketCategory_MarketCategory_NEW_YORK_STOCK__EXCHANGE_A_NYSE_MKT                 MarketCategory = 3
	MarketCategory_MarketCategory_NYSE_AMEX                                           MarketCategory = 4
	MarketCategory_MarketCategory_NYSE_ARCA                                           MarketCategory = 5
	MarketCategory_MarketCategory_BATS_Z_EXCHANGE                                     MarketCategory = 6
	MarketCategory_MarketCategory_INVESTORS_EXCHANGE_LLC                              MarketCategory = 7
)

// Enum value maps for MarketCategory.
var (
	MarketCategory_name = map[int32]string{
		0: "MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM",
		1: "MarketCategory_NASDAQ_GLOBAL_MARKETSM",
		2: "MarketCategory_NASDAQ_CAPITAL_MARKET_NON_NASDAQ_LISTED_INSTRUMENTS",
		3: "MarketCategory_NEW_YORK_STOCK__EXCHANGE_A_NYSE_MKT",
		4: "MarketCategory_NYSE_AMEX",
		5: "MarketCategory_NYSE_ARCA",
		6: "MarketCategory_BATS_Z_EXCHANGE",
		7: "MarketCategory_INVESTORS_EXCHANGE_LLC",
	}
	MarketCategory_value = map[string]int32{
		"MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM":                       0,
		"MarketCategory_NASDAQ_GLOBAL_MARKETSM":                              1,
		"MarketCategory_NASDAQ_CAPITAL_MARKET_NON_NASDAQ_LISTED_INSTRUMENTS": 2,
		"MarketCategory_NEW_YORK_STOCK__EXCHANGE_A_NYSE_MKT":                 3,
		"MarketCategory_NYSE_AMEX":                                           4,
		"MarketCategory_NYSE_ARCA":                                           5,
		"MarketCategory_BATS_Z_EXCHANGE":                                     6,
		"MarketCategory_INVESTORS_EXCHANGE_LLC":                              7,
	}
)

func (x MarketCategory) Enum() *MarketCategory {
	p := new(MarketCategory)
	*p = x
	return p
}

func (x MarketCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[17].Descriptor()
}

func (MarketCategory) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[17]
}

func (x MarketCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketCategory.Descriptor instead.
func (MarketCategory) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{17}
}

type MessageType int32

const (
	MessageType_MessageType_SYSTEM_EVENT_MESSAGE                      MessageType = 0
	MessageType_MessageType_TRADE_REPORT_FOR_NON_NEXT_SHARES          MessageType = 1
	MessageType_MessageType_TRADE_REPORT_FOR_NEXTSHARES               MessageType = 2
	MessageType_MessageType_TRADE_CANCEL_ERROR                        MessageType = 3
	MessageType_MessageType_TRADE_CANCEL_ERROR_NON                    MessageType = 4
	MessageType_MessageType_TRADING_ACTION                            MessageType = 5
	MessageType_MessageType_STOCK_DIRECTORY_MESSAGE                   MessageType = 6
	MessageType_MessageType_SHORT_SALE_RESTRICTION_INDICATOR          MessageType = 7
	MessageType_MessageType_ADJUSTED_CLOSING_PRICE                    MessageType = 8
	MessageType_MessageType_END_OF_DAY_TRADE_SUMMARY                  MessageType = 9
	MessageType_MessageType_END_OF_DAY_TRADE_SUMMARY_NEXTSHARES       MessageType = 10
	MessageType_MessageType_IPO_MESSAGE                               MessageType = 11
	MessageType_MessageType_IPO_QUOTING_PERIOD_UPDATE                 MessageType = 12
	MessageType_MessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL MessageType = 13
	MessageType_MessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS        MessageType = 14
	MessageType_MessageType_OPERATIONAL_HALT                          MessageType = 15
	MessageType_MessageType_TRADE_CORRECTION                          MessageType = 16
	MessageType_MessageType_TRADE_CORRECTION_NON                      MessageType = 17
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MessageType_SYSTEM_EVENT_MESSAGE",
		1:  "MessageType_TRADE_REPORT_FOR_NON_NEXT_SHARES",
		2:  "MessageType_TRADE_REPORT_FOR_NEXTSHARES",
		3:  "MessageType_TRADE_CANCEL_ERROR",
		4:  "MessageType_TRADE_CANCEL_ERROR_NON",
		5:  "MessageType_TRADING_ACTION",
		6:  "MessageType_STOCK_DIRECTORY_MESSAGE",
		7:  "MessageType_SHORT_SALE_RESTRICTION_INDICATOR",
		8:  "MessageType_ADJUSTED_CLOSING_PRICE",
		9:  "MessageType_END_OF_DAY_TRADE_SUMMARY",
		10: "MessageType_END_OF_DAY_TRADE_SUMMARY_NEXTSHARES",
		11: "MessageType_IPO_MESSAGE",
		12: "MessageType_IPO_QUOTING_PERIOD_UPDATE",
		13: "MessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL",
		14: "MessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS",
		15: "MessageType_OPERATIONAL_HALT",
		16: "MessageType_TRADE_CORRECTION",
		17: "MessageType_TRADE_CORRECTION_NON",
	}
	MessageType_value = map[string]int32{
		"MessageType_SYSTEM_EVENT_MESSAGE":                      0,
		"MessageType_TRADE_REPORT_FOR_NON_NEXT_SHARES":          1,
		"MessageType_TRADE_REPORT_FOR_NEXTSHARES":               2,
		"MessageType_TRADE_CANCEL_ERROR":                        3,
		"MessageType_TRADE_CANCEL_ERROR_NON":                    4,
		"MessageType_TRADING_ACTION":                            5,
		"MessageType_STOCK_DIRECTORY_MESSAGE":                   6,
		"MessageType_SHORT_SALE_RESTRICTION_INDICATOR":          7,
		"MessageType_ADJUSTED_CLOSING_PRICE":                    8,
		"MessageType_END_OF_DAY_TRADE_SUMMARY":                  9,
		"MessageType_END_OF_DAY_TRADE_SUMMARY_NEXTSHARES":       10,
		"MessageType_IPO_MESSAGE":                               11,
		"MessageType_IPO_QUOTING_PERIOD_UPDATE":                 12,
		"MessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL": 13,
		"MessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS":        14,
		"MessageType_OPERATIONAL_HALT":                          15,
		"MessageType_TRADE_CORRECTION":                          16,
		"MessageType_TRADE_CORRECTION_NON":                      17,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[18].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[18]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{18}
}

type NetChange int32

const (
	NetChange_NetChange_FIRST_TRADE_PRICE NetChange = 0
	NetChange_NetChange_UNDERWRITER_PRICE NetChange = 1
)

// Enum value maps for NetChange.
var (
	NetChange_name = map[int32]string{
		0: "NetChange_FIRST_TRADE_PRICE",
		1: "NetChange_UNDERWRITER_PRICE",
	}
	NetChange_value = map[string]int32{
		"NetChange_FIRST_TRADE_PRICE": 0,
		"NetChange_UNDERWRITER_PRICE": 1,
	}
)

func (x NetChange) Enum() *NetChange {
	p := new(NetChange)
	*p = x
	return p
}

func (x NetChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetChange) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[19].Descriptor()
}

func (NetChange) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[19]
}

func (x NetChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetChange.Descriptor instead.
func (NetChange) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{19}
}

type OperationalHaltAction int32

const (
	OperationalHaltAction_OperationalHaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET        OperationalHaltAction = 0
	OperationalHaltAction_OperationalHaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED OperationalHaltAction = 1
)

// Enum value maps for OperationalHaltAction.
var (
	OperationalHaltAction_name = map[int32]string{
		0: "OperationalHaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET",
		1: "OperationalHaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED",
	}
	OperationalHaltAction_value = map[string]int32{
		"OperationalHaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET":        0,
		"OperationalHaltAction_OPERATIONAL_HALT_HAS_BEEN_LIFTED_AND_TRADING_RESUMED": 1,
	}
)

func (x OperationalHaltAction) Enum() *OperationalHaltAction {
	p := new(OperationalHaltAction)
	*p = x
	return p
}

func (x OperationalHaltAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationalHaltAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[20].Descriptor()
}

func (OperationalHaltAction) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[20]
}

func (x OperationalHaltAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationalHaltAction.Descriptor instead.
func (OperationalHaltAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{20}
}

type OriginatingMarketCenterIdentifier int32

const (
	OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET                     OriginatingMarketCenterIdentifier = 0
	OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CARTARET OriginatingMarketCenterIdentifier = 1
	OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CHICAGO  OriginatingMarketCenterIdentifier = 2
	OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_NASDAQ_BX                                   OriginatingMarketCenterIdentifier = 3
	OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_NASDAQ_PSX                                  OriginatingMarketCenterIdentifier = 4
)

// Enum value maps for OriginatingMarketCenterIdentifier.
var (
	OriginatingMarketCenterIdentifier_name = map[int32]string{
		0: "OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET",
		1: "OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CARTARET",
		2: "OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CHICAGO",
		3: "OriginatingMarketCenterIdentifier_NASDAQ_BX",
		4: "OriginatingMarketCenterIdentifier_NASDAQ_PSX",
	}
	OriginatingMarketCenterIdentifier_value = map[string]int32{
		"OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET":                     0,
		"OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CARTARET": 1,
		"OriginatingMarketCenterIdentifier_FINRA_TRADE_REPORTING_FACILITY_TRF_CHICAGO":  2,
		"OriginatingMarketCenterIdentifier_NASDAQ_BX":                                   3,
		"OriginatingMarketCenterIdentifier_NASDAQ_PSX":                                  4,
	}
)

func (x OriginatingMarketCenterIdentifier) Enum() *OriginatingMarketCenterIdentifier {
	p := new(OriginatingMarketCenterIdentifier)
	*p = x
	return p
}

func (x OriginatingMarketCenterIdentifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginatingMarketCenterIdentifier) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[21].Descriptor()
}

func (OriginatingMarketCenterIdentifier) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[21]
}

func (x OriginatingMarketCenterIdentifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginatingMarketCenterIdentifier.Descriptor instead.
func (OriginatingMarketCenterIdentifier) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{21}
}

type QBBOMessageType int32

const (
	QBBOMessageType_QBBOMessageType_STOCK_DIRECTORY_MESSAGE                            QBBOMessageType = 0
	QBBOMessageType_QBBOMessageType_TRADING_ACTION                                     QBBOMessageType = 1
	QBBOMessageType_QBBOMessageType_REG_SHO_SHORT_SALE_PRICE_TEST_RESTRICTED_INDICATOR QBBOMessageType = 2
	QBBOMessageType_QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL          QBBOMessageType = 3
	QBBOMessageType_QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS_MESSAGE         QBBOMessageType = 4
	QBBOMessageType_QBBOMessageType_OPERATIONAL_HALT                                   QBBOMessageType = 5
	QBBOMessageType_QBBOMessageType_QUOTATION_MESSAGE                                  QBBOMessageType = 6
	QBBOMessageType_QBBOMessageType_NEXTSHARES_QUOTATION_MESSAGE                       QBBOMessageType = 7
	QBBOMessageType_QBBOMessageType_IPO_RELEASE_MESSAGE                                QBBOMessageType = 8
	QBBOMessageType_QBBOMessageType_SYSTEM_EVENT                                       QBBOMessageType = 9
)

// Enum value maps for QBBOMessageType.
var (
	QBBOMessageType_name = map[int32]string{
		0: "QBBOMessageType_STOCK_DIRECTORY_MESSAGE",
		1: "QBBOMessageType_TRADING_ACTION",
		2: "QBBOMessageType_REG_SHO_SHORT_SALE_PRICE_TEST_RESTRICTED_INDICATOR",
		3: "QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL",
		4: "QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS_MESSAGE",
		5: "QBBOMessageType_OPERATIONAL_HALT",
		6: "QBBOMessageType_QUOTATION_MESSAGE",
		7: "QBBOMessageType_NEXTSHARES_QUOTATION_MESSAGE",
		8: "QBBOMessageType_IPO_RELEASE_MESSAGE",
		9: "QBBOMessageType_SYSTEM_EVENT",
	}
	QBBOMessageType_value = map[string]int32{
		"QBBOMessageType_STOCK_DIRECTORY_MESSAGE":                            0,
		"QBBOMessageType_TRADING_ACTION":                                     1,
		"QBBOMessageType_REG_SHO_SHORT_SALE_PRICE_TEST_RESTRICTED_INDICATOR": 2,
		"QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_DECLINE_LEVEL":          3,
		"QBBOMessageType_MARKET_WIDE_CIRCUIT_BREAKER_STATUS_MESSAGE":         4,
		"QBBOMessageType_OPERATIONAL_HALT":                                   5,
		"QBBOMessageType_QUOTATION_MESSAGE":                                  6,
		"QBBOMessageType_NEXTSHARES_QUOTATION_MESSAGE":                       7,
		"QBBOMessageType_IPO_RELEASE_MESSAGE":                                8,
		"QBBOMessageType_SYSTEM_EVENT":                                       9,
	}
)

func (x QBBOMessageType) Enum() *QBBOMessageType {
	p := new(QBBOMessageType)
	*p = x
	return p
}

func (x QBBOMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QBBOMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[22].Descriptor()
}

func (QBBOMessageType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[22]
}

func (x QBBOMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QBBOMessageType.Descriptor instead.
func (QBBOMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{22}
}

type QuotationReleaseQualifier int32

const (
	QuotationReleaseQualifier_QuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE  QuotationReleaseQualifier = 0
	QuotationReleaseQualifier_QuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED QuotationReleaseQualifier = 1
)

// Enum value maps for QuotationReleaseQualifier.
var (
	QuotationReleaseQualifier_name = map[int32]string{
		0: "QuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE",
		1: "QuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED",
	}
	QuotationReleaseQualifier_value = map[string]int32{
		"QuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE":  0,
		"QuotationReleaseQualifier_IPO_RELEASE_CANCELED_POSTPONED": 1,
	}
)

func (x QuotationReleaseQualifier) Enum() *QuotationReleaseQualifier {
	p := new(QuotationReleaseQualifier)
	*p = x
	return p
}

func (x QuotationReleaseQualifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuotationReleaseQualifier) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[23].Descriptor()
}

func (QuotationReleaseQualifier) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[23]
}

func (x QuotationReleaseQualifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuotationReleaseQualifier.Descriptor instead.
func (QuotationReleaseQualifier) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{23}
}

type RegSHOAction int32

const (
	RegSHOAction_RegSHOAction_NO_PRICE_TEST_IN_PLACE        RegSHOAction = 0
	RegSHOAction_RegSHOAction_INTRA_DAY_PRICE               RegSHOAction = 1
	RegSHOAction_RegSHOAction_RESTRICTION_REMAINS_IN_EFFECT RegSHOAction = 2
)

// Enum value maps for RegSHOAction.
var (
	RegSHOAction_name = map[int32]string{
		0: "RegSHOAction_NO_PRICE_TEST_IN_PLACE",
		1: "RegSHOAction_INTRA_DAY_PRICE",
		2: "RegSHOAction_RESTRICTION_REMAINS_IN_EFFECT",
	}
	RegSHOAction_value = map[string]int32{
		"RegSHOAction_NO_PRICE_TEST_IN_PLACE":        0,
		"RegSHOAction_INTRA_DAY_PRICE":               1,
		"RegSHOAction_RESTRICTION_REMAINS_IN_EFFECT": 2,
	}
)

func (x RegSHOAction) Enum() *RegSHOAction {
	p := new(RegSHOAction)
	*p = x
	return p
}

func (x RegSHOAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegSHOAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[24].Descriptor()
}

func (RegSHOAction) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[24]
}

func (x RegSHOAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegSHOAction.Descriptor instead.
func (RegSHOAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{24}
}

type SecurityClass int32

const (
	SecurityClass_SecurityClass_Nasdaq                 SecurityClass = 0
	SecurityClass_SecurityClass_NYSE                   SecurityClass = 1
	SecurityClass_SecurityClass_NYSE_MKT               SecurityClass = 2
	SecurityClass_SecurityClass_NYSE_ARCA              SecurityClass = 3
	SecurityClass_SecurityClass_BATS                   SecurityClass = 4
	SecurityClass_SecurityClass_Investors_Exchange_LLC SecurityClass = 5
)

// Enum value maps for SecurityClass.
var (
	SecurityClass_name = map[int32]string{
		0: "SecurityClass_Nasdaq",
		1: "SecurityClass_NYSE",
		2: "SecurityClass_NYSE_MKT",
		3: "SecurityClass_NYSE_ARCA",
		4: "SecurityClass_BATS",
		5: "SecurityClass_Investors_Exchange_LLC",
	}
	SecurityClass_value = map[string]int32{
		"SecurityClass_Nasdaq":                 0,
		"SecurityClass_NYSE":                   1,
		"SecurityClass_NYSE_MKT":               2,
		"SecurityClass_NYSE_ARCA":              3,
		"SecurityClass_BATS":                   4,
		"SecurityClass_Investors_Exchange_LLC": 5,
	}
)

func (x SecurityClass) Enum() *SecurityClass {
	p := new(SecurityClass)
	*p = x
	return p
}

func (x SecurityClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityClass) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[25].Descriptor()
}

func (SecurityClass) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[25]
}

func (x SecurityClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityClass.Descriptor instead.
func (SecurityClass) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{25}
}

type BQMoreFlag int32

const (
	BQMoreFlag_BQMoreFlag_MORE_BROKER_NUMBERS_EXIST_IN_THE_QUEUE BQMoreFlag = 0
	BQMoreFlag_BQMoreFlag_NO_MORE_EXIST                          BQMoreFlag = 1
)

// Enum value maps for BQMoreFlag.
var (
	BQMoreFlag_name = map[int32]string{
		0: "BQMoreFlag_MORE_BROKER_NUMBERS_EXIST_IN_THE_QUEUE",
		1: "BQMoreFlag_NO_MORE_EXIST",
	}
	BQMoreFlag_value = map[string]int32{
		"BQMoreFlag_MORE_BROKER_NUMBERS_EXIST_IN_THE_QUEUE": 0,
		"BQMoreFlag_NO_MORE_EXIST":                          1,
	}
)

func (x BQMoreFlag) Enum() *BQMoreFlag {
	p := new(BQMoreFlag)
	*p = x
	return p
}

func (x BQMoreFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BQMoreFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[26].Descriptor()
}

func (BQMoreFlag) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[26]
}

func (x BQMoreFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BQMoreFlag.Descriptor instead.
func (BQMoreFlag) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{26}
}

type BrokerSide int32

const (
	BrokerSide_BrokerSide_BUY  BrokerSide = 0
	BrokerSide_BrokerSide_SELL BrokerSide = 1
)

// Enum value maps for BrokerSide.
var (
	BrokerSide_name = map[int32]string{
		0: "BrokerSide_BUY",
		1: "BrokerSide_SELL",
	}
	BrokerSide_value = map[string]int32{
		"BrokerSide_BUY":  0,
		"BrokerSide_SELL": 1,
	}
)

func (x BrokerSide) Enum() *BrokerSide {
	p := new(BrokerSide)
	*p = x
	return p
}

func (x BrokerSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrokerSide) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[27].Descriptor()
}

func (BrokerSide) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[27]
}

func (x BrokerSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrokerSide.Descriptor instead.
func (BrokerSide) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{27}
}

type CallPutFlag int32

const (
	CallPutFlag_CallPutFlag_C CallPutFlag = 0
	CallPutFlag_CallPutFlag_P CallPutFlag = 1
	CallPutFlag_CallPutFlag_O CallPutFlag = 2
)

// Enum value maps for CallPutFlag.
var (
	CallPutFlag_name = map[int32]string{
		0: "CallPutFlag_C",
		1: "CallPutFlag_P",
		2: "CallPutFlag_O",
	}
	CallPutFlag_value = map[string]int32{
		"CallPutFlag_C": 0,
		"CallPutFlag_P": 1,
		"CallPutFlag_O": 2,
	}
)

func (x CallPutFlag) Enum() *CallPutFlag {
	p := new(CallPutFlag)
	*p = x
	return p
}

func (x CallPutFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallPutFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[28].Descriptor()
}

func (CallPutFlag) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[28]
}

func (x CallPutFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallPutFlag.Descriptor instead.
func (CallPutFlag) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{28}
}

type CancelFlag int32

const (
	CancelFlag_CancelFlag_Cancelled    CancelFlag = 0
	CancelFlag_CancelFlag_NotCancelled CancelFlag = 1
)

// Enum value maps for CancelFlag.
var (
	CancelFlag_name = map[int32]string{
		0: "CancelFlag_Cancelled",
		1: "CancelFlag_NotCancelled",
	}
	CancelFlag_value = map[string]int32{
		"CancelFlag_Cancelled":    0,
		"CancelFlag_NotCancelled": 1,
	}
)

func (x CancelFlag) Enum() *CancelFlag {
	p := new(CancelFlag)
	*p = x
	return p
}

func (x CancelFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[29].Descriptor()
}

func (CancelFlag) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[29]
}

func (x CancelFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelFlag.Descriptor instead.
func (CancelFlag) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{29}
}

type CurrencyType int32

const (
	CurrencyType_CurrencyType_BLANK CurrencyType = 0
	CurrencyType_CurrencyType_HKD   CurrencyType = 1
	CurrencyType_CurrencyType_AUD   CurrencyType = 2
	CurrencyType_CurrencyType_ATS   CurrencyType = 3
	CurrencyType_CurrencyType_BDT   CurrencyType = 4
	CurrencyType_CurrencyType_BHD   CurrencyType = 5
	CurrencyType_CurrencyType_BEC   CurrencyType = 6
	CurrencyType_CurrencyType_BEL   CurrencyType = 7
	CurrencyType_CurrencyType_BND   CurrencyType = 8
	CurrencyType_CurrencyType_BUK   CurrencyType = 9
	CurrencyType_CurrencyType_CAD   CurrencyType = 10
	CurrencyType_CurrencyType_LKR   CurrencyType = 11
	CurrencyType_CurrencyType_CNY   CurrencyType = 12
	CurrencyType_CurrencyType_CYP   CurrencyType = 13
	CurrencyType_CurrencyType_DKK   CurrencyType = 14
	CurrencyType_CurrencyType_DEM   CurrencyType = 15
	CurrencyType_CurrencyType_NLG   CurrencyType = 16
	CurrencyType_CurrencyType_FJD   CurrencyType = 17
	CurrencyType_CurrencyType_FIM   CurrencyType = 18
	CurrencyType_CurrencyType_FRF   CurrencyType = 19
	CurrencyType_CurrencyType_INR   CurrencyType = 20
	CurrencyType_CurrencyType_IDR   CurrencyType = 21
	CurrencyType_CurrencyType_ITL   CurrencyType = 22
	CurrencyType_CurrencyType_JPY   CurrencyType = 23
	CurrencyType_CurrencyType_KWD   CurrencyType = 24
	CurrencyType_CurrencyType_KES   CurrencyType = 25
	CurrencyType_CurrencyType_LBP   CurrencyType = 26
	CurrencyType_CurrencyType_MUR   CurrencyType = 27
	CurrencyType_CurrencyType_MYR   CurrencyType = 28
	CurrencyType_CurrencyType_NZD   CurrencyType = 29
	CurrencyType_CurrencyType_NGN   CurrencyType = 30
	CurrencyType_CurrencyType_NOK   CurrencyType = 31
	CurrencyType_CurrencyType_OMR   CurrencyType = 32
	CurrencyType_CurrencyType_PKR   CurrencyType = 33
	CurrencyType_CurrencyType_PHP   CurrencyType = 34
	CurrencyType_CurrencyType_PTE   CurrencyType = 35
	CurrencyType_CurrencyType_QAR   CurrencyType = 36
	CurrencyType_CurrencyType_SAR   CurrencyType = 37
	CurrencyType_CurrencyType_SCR   CurrencyType = 38
	CurrencyType_CurrencyType_SGD   CurrencyType = 39
	CurrencyType_CurrencyType_SLL   CurrencyType = 40
	CurrencyType_CurrencyType_ZAR   CurrencyType = 41
	CurrencyType_CurrencyType_KRW   CurrencyType = 42
	CurrencyType_CurrencyType_ESP   CurrencyType = 43
	CurrencyType_CurrencyType_GBP   CurrencyType = 44
	CurrencyType_CurrencyType_SEK   CurrencyType = 45
	CurrencyType_CurrencyType_CHF   CurrencyType = 46
	CurrencyType_CurrencyType_THB   CurrencyType = 47
	CurrencyType_CurrencyType_AED   CurrencyType = 48
	CurrencyType_CurrencyType_USD   CurrencyType = 49
	CurrencyType_CurrencyType_IEP   CurrencyType = 50
	CurrencyType_CurrencyType_SDR   CurrencyType = 51
	CurrencyType_CurrencyType_MOP   CurrencyType = 52
	CurrencyType_CurrencyType_BRC   CurrencyType = 53
	CurrencyType_CurrencyType_ECU   CurrencyType = 54
	CurrencyType_CurrencyType_EUR   CurrencyType = 55
	CurrencyType_CurrencyType_MXN   CurrencyType = 56
	CurrencyType_CurrencyType_CNH   CurrencyType = 57
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0:  "CurrencyType_BLANK",
		1:  "CurrencyType_HKD",
		2:  "CurrencyType_AUD",
		3:  "CurrencyType_ATS",
		4:  "CurrencyType_BDT",
		5:  "CurrencyType_BHD",
		6:  "CurrencyType_BEC",
		7:  "CurrencyType_BEL",
		8:  "CurrencyType_BND",
		9:  "CurrencyType_BUK",
		10: "CurrencyType_CAD",
		11: "CurrencyType_LKR",
		12: "CurrencyType_CNY",
		13: "CurrencyType_CYP",
		14: "CurrencyType_DKK",
		15: "CurrencyType_DEM",
		16: "CurrencyType_NLG",
		17: "CurrencyType_FJD",
		18: "CurrencyType_FIM",
		19: "CurrencyType_FRF",
		20: "CurrencyType_INR",
		21: "CurrencyType_IDR",
		22: "CurrencyType_ITL",
		23: "CurrencyType_JPY",
		24: "CurrencyType_KWD",
		25: "CurrencyType_KES",
		26: "CurrencyType_LBP",
		27: "CurrencyType_MUR",
		28: "CurrencyType_MYR",
		29: "CurrencyType_NZD",
		30: "CurrencyType_NGN",
		31: "CurrencyType_NOK",
		32: "CurrencyType_OMR",
		33: "CurrencyType_PKR",
		34: "CurrencyType_PHP",
		35: "CurrencyType_PTE",
		36: "CurrencyType_QAR",
		37: "CurrencyType_SAR",
		38: "CurrencyType_SCR",
		39: "CurrencyType_SGD",
		40: "CurrencyType_SLL",
		41: "CurrencyType_ZAR",
		42: "CurrencyType_KRW",
		43: "CurrencyType_ESP",
		44: "CurrencyType_GBP",
		45: "CurrencyType_SEK",
		46: "CurrencyType_CHF",
		47: "CurrencyType_THB",
		48: "CurrencyType_AED",
		49: "CurrencyType_USD",
		50: "CurrencyType_IEP",
		51: "CurrencyType_SDR",
		52: "CurrencyType_MOP",
		53: "CurrencyType_BRC",
		54: "CurrencyType_ECU",
		55: "CurrencyType_EUR",
		56: "CurrencyType_MXN",
		57: "CurrencyType_CNH",
	}
	CurrencyType_value = map[string]int32{
		"CurrencyType_BLANK": 0,
		"CurrencyType_HKD":   1,
		"CurrencyType_AUD":   2,
		"CurrencyType_ATS":   3,
		"CurrencyType_BDT":   4,
		"CurrencyType_BHD":   5,
		"CurrencyType_BEC":   6,
		"CurrencyType_BEL":   7,
		"CurrencyType_BND":   8,
		"CurrencyType_BUK":   9,
		"CurrencyType_CAD":   10,
		"CurrencyType_LKR":   11,
		"CurrencyType_CNY":   12,
		"CurrencyType_CYP":   13,
		"CurrencyType_DKK":   14,
		"CurrencyType_DEM":   15,
		"CurrencyType_NLG":   16,
		"CurrencyType_FJD":   17,
		"CurrencyType_FIM":   18,
		"CurrencyType_FRF":   19,
		"CurrencyType_INR":   20,
		"CurrencyType_IDR":   21,
		"CurrencyType_ITL":   22,
		"CurrencyType_JPY":   23,
		"CurrencyType_KWD":   24,
		"CurrencyType_KES":   25,
		"CurrencyType_LBP":   26,
		"CurrencyType_MUR":   27,
		"CurrencyType_MYR":   28,
		"CurrencyType_NZD":   29,
		"CurrencyType_NGN":   30,
		"CurrencyType_NOK":   31,
		"CurrencyType_OMR":   32,
		"CurrencyType_PKR":   33,
		"CurrencyType_PHP":   34,
		"CurrencyType_PTE":   35,
		"CurrencyType_QAR":   36,
		"CurrencyType_SAR":   37,
		"CurrencyType_SCR":   38,
		"CurrencyType_SGD":   39,
		"CurrencyType_SLL":   40,
		"CurrencyType_ZAR":   41,
		"CurrencyType_KRW":   42,
		"CurrencyType_ESP":   43,
		"CurrencyType_GBP":   44,
		"CurrencyType_SEK":   45,
		"CurrencyType_CHF":   46,
		"CurrencyType_THB":   47,
		"CurrencyType_AED":   48,
		"CurrencyType_USD":   49,
		"CurrencyType_IEP":   50,
		"CurrencyType_SDR":   51,
		"CurrencyType_MOP":   52,
		"CurrencyType_BRC":   53,
		"CurrencyType_ECU":   54,
		"CurrencyType_EUR":   55,
		"CurrencyType_MXN":   56,
		"CurrencyType_CNH":   57,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[30].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[30]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{30}
}

type IndexSource int32

const (
	IndexSource_IndexSource_CSI_AND_CES IndexSource = 0
	IndexSource_IndexSource_HSI         IndexSource = 1
	IndexSource_IndexSource_S_P         IndexSource = 2
	IndexSource_IndexSource_TR          IndexSource = 3
)

// Enum value maps for IndexSource.
var (
	IndexSource_name = map[int32]string{
		0: "IndexSource_CSI_AND_CES",
		1: "IndexSource_HSI",
		2: "IndexSource_S_P",
		3: "IndexSource_TR",
	}
	IndexSource_value = map[string]int32{
		"IndexSource_CSI_AND_CES": 0,
		"IndexSource_HSI":         1,
		"IndexSource_S_P":         2,
		"IndexSource_TR":          3,
	}
)

func (x IndexSource) Enum() *IndexSource {
	p := new(IndexSource)
	*p = x
	return p
}

func (x IndexSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexSource) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[31].Descriptor()
}

func (IndexSource) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[31]
}

func (x IndexSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexSource.Descriptor instead.
func (IndexSource) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{31}
}

type IndexStatus int32

const (
	IndexStatus_IndexStatus_CLOSING_VALUE_I_INDICATIVE IndexStatus = 0
	IndexStatus_IndexStatus_OPENING_INDEX              IndexStatus = 1
	IndexStatus_IndexStatus_LAST_CLOSE_VALUE           IndexStatus = 2
	IndexStatus_IndexStatus_PRELIMINARY_CLOSE          IndexStatus = 3
	IndexStatus_IndexStatus_STOP_LOSS_INDEX            IndexStatus = 4
	IndexStatus_IndexStatus_REALTIME_INDEX_VALUE       IndexStatus = 5
	IndexStatus_IndexStatus_BLANK                      IndexStatus = 6
)

// Enum value maps for IndexStatus.
var (
	IndexStatus_name = map[int32]string{
		0: "IndexStatus_CLOSING_VALUE_I_INDICATIVE",
		1: "IndexStatus_OPENING_INDEX",
		2: "IndexStatus_LAST_CLOSE_VALUE",
		3: "IndexStatus_PRELIMINARY_CLOSE",
		4: "IndexStatus_STOP_LOSS_INDEX",
		5: "IndexStatus_REALTIME_INDEX_VALUE",
		6: "IndexStatus_BLANK",
	}
	IndexStatus_value = map[string]int32{
		"IndexStatus_CLOSING_VALUE_I_INDICATIVE": 0,
		"IndexStatus_OPENING_INDEX":              1,
		"IndexStatus_LAST_CLOSE_VALUE":           2,
		"IndexStatus_PRELIMINARY_CLOSE":          3,
		"IndexStatus_STOP_LOSS_INDEX":            4,
		"IndexStatus_REALTIME_INDEX_VALUE":       5,
		"IndexStatus_BLANK":                      6,
	}
)

func (x IndexStatus) Enum() *IndexStatus {
	p := new(IndexStatus)
	*p = x
	return p
}

func (x IndexStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[32].Descriptor()
}

func (IndexStatus) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[32]
}

func (x IndexStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexStatus.Descriptor instead.
func (IndexStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{32}
}

type IndicatesType int32

const (
	IndicatesType_IndicatesType_BROKERNUMBER     IndicatesType = 0
	IndicatesType_IndicatesType_NUMBER_OF_SPREAD IndicatesType = 1
)

// Enum value maps for IndicatesType.
var (
	IndicatesType_name = map[int32]string{
		0: "IndicatesType_BROKERNUMBER",
		1: "IndicatesType_NUMBER_OF_SPREAD",
	}
	IndicatesType_value = map[string]int32{
		"IndicatesType_BROKERNUMBER":     0,
		"IndicatesType_NUMBER_OF_SPREAD": 1,
	}
)

func (x IndicatesType) Enum() *IndicatesType {
	p := new(IndicatesType)
	*p = x
	return p
}

func (x IndicatesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicatesType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[33].Descriptor()
}

func (IndicatesType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[33]
}

func (x IndicatesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicatesType.Descriptor instead.
func (IndicatesType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{33}
}

type IndicatesWhether int32

const (
	IndicatesWhether_IndicatesWhether_Y IndicatesWhether = 0
	IndicatesWhether_IndicatesWhether_N IndicatesWhether = 1
)

// Enum value maps for IndicatesWhether.
var (
	IndicatesWhether_name = map[int32]string{
		0: "IndicatesWhether_Y",
		1: "IndicatesWhether_N",
	}
	IndicatesWhether_value = map[string]int32{
		"IndicatesWhether_Y": 0,
		"IndicatesWhether_N": 1,
	}
)

func (x IndicatesWhether) Enum() *IndicatesWhether {
	p := new(IndicatesWhether)
	*p = x
	return p
}

func (x IndicatesWhether) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicatesWhether) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[34].Descriptor()
}

func (IndicatesWhether) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[34]
}

func (x IndicatesWhether) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicatesWhether.Descriptor instead.
func (IndicatesWhether) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{34}
}

type InstrumentType int32

const (
	InstrumentType_InstrumentType_BOND InstrumentType = 0
	InstrumentType_InstrumentType_EQTY InstrumentType = 1
	InstrumentType_InstrumentType_TRST InstrumentType = 2
	InstrumentType_InstrumentType_WRNT InstrumentType = 3
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0: "InstrumentType_BOND",
		1: "InstrumentType_EQTY",
		2: "InstrumentType_TRST",
		3: "InstrumentType_WRNT",
	}
	InstrumentType_value = map[string]int32{
		"InstrumentType_BOND": 0,
		"InstrumentType_EQTY": 1,
		"InstrumentType_TRST": 2,
		"InstrumentType_WRNT": 3,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[35].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[35]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{35}
}

type InvestorType int32

const (
	InvestorType_InvestorType_Retail_Investor       InvestorType = 0
	InvestorType_InvestorType_Professional_Investor InvestorType = 1
)

// Enum value maps for InvestorType.
var (
	InvestorType_name = map[int32]string{
		0: "InvestorType_Retail_Investor",
		1: "InvestorType_Professional_Investor",
	}
	InvestorType_value = map[string]int32{
		"InvestorType_Retail_Investor":       0,
		"InvestorType_Professional_Investor": 1,
	}
)

func (x InvestorType) Enum() *InvestorType {
	p := new(InvestorType)
	*p = x
	return p
}

func (x InvestorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[36].Descriptor()
}

func (InvestorType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[36]
}

func (x InvestorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestorType.Descriptor instead.
func (InvestorType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{36}
}

type LastFragment int32

const (
	LastFragment_LastFragment_Complete    LastFragment = 0
	LastFragment_LastFragment_NotComplete LastFragment = 1
)

// Enum value maps for LastFragment.
var (
	LastFragment_name = map[int32]string{
		0: "LastFragment_Complete",
		1: "LastFragment_NotComplete",
	}
	LastFragment_value = map[string]int32{
		"LastFragment_Complete":    0,
		"LastFragment_NotComplete": 1,
	}
)

func (x LastFragment) Enum() *LastFragment {
	p := new(LastFragment)
	*p = x
	return p
}

func (x LastFragment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastFragment) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[37].Descriptor()
}

func (LastFragment) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[37]
}

func (x LastFragment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LastFragment.Descriptor instead.
func (LastFragment) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{37}
}

type CnMarketCode int32

const (
	CnMarketCode_SSE  CnMarketCode = 0
	CnMarketCode_SZSE CnMarketCode = 1
)

// Enum value maps for CnMarketCode.
var (
	CnMarketCode_name = map[int32]string{
		0: "SSE",
		1: "SZSE",
	}
	CnMarketCode_value = map[string]int32{
		"SSE":  0,
		"SZSE": 1,
	}
)

func (x CnMarketCode) Enum() *CnMarketCode {
	p := new(CnMarketCode)
	*p = x
	return p
}

func (x CnMarketCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CnMarketCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[38].Descriptor()
}

func (CnMarketCode) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[38]
}

func (x CnMarketCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CnMarketCode.Descriptor instead.
func (CnMarketCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{38}
}

type MarketCode int32

const (
	MarketCode_MarketCode_MAIN   MarketCode = 0
	MarketCode_MarketCode_GEM    MarketCode = 1
	MarketCode_MarketCode_NASD   MarketCode = 2
	MarketCode_MarketCode_ETS    MarketCode = 3
	MarketCode_MarketCode_NASDAQ MarketCode = 4
	MarketCode_MarketCode_BX     MarketCode = 5
	MarketCode_MarketCode_PSX    MarketCode = 6
)

// Enum value maps for MarketCode.
var (
	MarketCode_name = map[int32]string{
		0: "MarketCode_MAIN",
		1: "MarketCode_GEM",
		2: "MarketCode_NASD",
		3: "MarketCode_ETS",
		4: "MarketCode_NASDAQ",
		5: "MarketCode_BX",
		6: "MarketCode_PSX",
	}
	MarketCode_value = map[string]int32{
		"MarketCode_MAIN":   0,
		"MarketCode_GEM":    1,
		"MarketCode_NASD":   2,
		"MarketCode_ETS":    3,
		"MarketCode_NASDAQ": 4,
		"MarketCode_BX":     5,
		"MarketCode_PSX":    6,
	}
)

func (x MarketCode) Enum() *MarketCode {
	p := new(MarketCode)
	*p = x
	return p
}

func (x MarketCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[39].Descriptor()
}

func (MarketCode) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[39]
}

func (x MarketCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketCode.Descriptor instead.
func (MarketCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{39}
}

type MsgType int32

const (
	MsgType_MsgType_Blank                         MsgType = 0
	MsgType_MsgType_SequenceReset                 MsgType = 1
	MsgType_MsgType_Logon                         MsgType = 2
	MsgType_MsgType_LogonResponse                 MsgType = 3
	MsgType_MsgType_DisasterRecoverySignal        MsgType = 4
	MsgType_MsgType_RetransmissionRequest         MsgType = 5
	MsgType_MsgType_RetransmissionResponse        MsgType = 6
	MsgType_MsgType_RefreshComplete               MsgType = 7
	MsgType_MsgType_MarketDefinition              MsgType = 8
	MsgType_MsgType_SecurityDefinition            MsgType = 9
	MsgType_MsgType_LiquidityProvider             MsgType = 10
	MsgType_MsgType_CurrencyRate                  MsgType = 11
	MsgType_MsgType_TradingSessionStatus          MsgType = 12
	MsgType_MsgType_SecurityStatus                MsgType = 13
	MsgType_MsgType_AddOrder                      MsgType = 14
	MsgType_MsgType_ModifyOrder                   MsgType = 15
	MsgType_MsgType_DeleteOrder                   MsgType = 16
	MsgType_MsgType_AddOddLotOder                 MsgType = 17
	MsgType_MsgType_DeleteOddLotOrder             MsgType = 18
	MsgType_MsgType_AggregateOrderBookUpdate      MsgType = 19
	MsgType_MsgType_BrokerQueue                   MsgType = 20
	MsgType_MsgType_OrderImbalance                MsgType = 21
	MsgType_MsgType_Trade                         MsgType = 22
	MsgType_MsgType_TradeCancel                   MsgType = 23
	MsgType_MsgType_TradeTicker                   MsgType = 24
	MsgType_MsgType_ClosingPrice                  MsgType = 25
	MsgType_MsgType_NominalPrice                  MsgType = 26
	MsgType_MsgType_IndicativeEquilibriumPrice    MsgType = 27
	MsgType_MsgType_ReferencePrice                MsgType = 28
	MsgType_MsgType_VCMTrigger                    MsgType = 29
	MsgType_MsgType_Statistics                    MsgType = 30
	MsgType_MsgType_MarketTurnover                MsgType = 31
	MsgType_MsgType_Yield                         MsgType = 32
	MsgType_MsgType_News                          MsgType = 33
	MsgType_MsgType_IndexDefinition               MsgType = 34
	MsgType_MsgType_IndexData                     MsgType = 35
	MsgType_MsgType_StockConnectDailyQuotaBalance MsgType = 36
	MsgType_MsgType_StockConnectMarketTurnover    MsgType = 37
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:  "MsgType_Blank",
		1:  "MsgType_SequenceReset",
		2:  "MsgType_Logon",
		3:  "MsgType_LogonResponse",
		4:  "MsgType_DisasterRecoverySignal",
		5:  "MsgType_RetransmissionRequest",
		6:  "MsgType_RetransmissionResponse",
		7:  "MsgType_RefreshComplete",
		8:  "MsgType_MarketDefinition",
		9:  "MsgType_SecurityDefinition",
		10: "MsgType_LiquidityProvider",
		11: "MsgType_CurrencyRate",
		12: "MsgType_TradingSessionStatus",
		13: "MsgType_SecurityStatus",
		14: "MsgType_AddOrder",
		15: "MsgType_ModifyOrder",
		16: "MsgType_DeleteOrder",
		17: "MsgType_AddOddLotOder",
		18: "MsgType_DeleteOddLotOrder",
		19: "MsgType_AggregateOrderBookUpdate",
		20: "MsgType_BrokerQueue",
		21: "MsgType_OrderImbalance",
		22: "MsgType_Trade",
		23: "MsgType_TradeCancel",
		24: "MsgType_TradeTicker",
		25: "MsgType_ClosingPrice",
		26: "MsgType_NominalPrice",
		27: "MsgType_IndicativeEquilibriumPrice",
		28: "MsgType_ReferencePrice",
		29: "MsgType_VCMTrigger",
		30: "MsgType_Statistics",
		31: "MsgType_MarketTurnover",
		32: "MsgType_Yield",
		33: "MsgType_News",
		34: "MsgType_IndexDefinition",
		35: "MsgType_IndexData",
		36: "MsgType_StockConnectDailyQuotaBalance",
		37: "MsgType_StockConnectMarketTurnover",
	}
	MsgType_value = map[string]int32{
		"MsgType_Blank":                         0,
		"MsgType_SequenceReset":                 1,
		"MsgType_Logon":                         2,
		"MsgType_LogonResponse":                 3,
		"MsgType_DisasterRecoverySignal":        4,
		"MsgType_RetransmissionRequest":         5,
		"MsgType_RetransmissionResponse":        6,
		"MsgType_RefreshComplete":               7,
		"MsgType_MarketDefinition":              8,
		"MsgType_SecurityDefinition":            9,
		"MsgType_LiquidityProvider":             10,
		"MsgType_CurrencyRate":                  11,
		"MsgType_TradingSessionStatus":          12,
		"MsgType_SecurityStatus":                13,
		"MsgType_AddOrder":                      14,
		"MsgType_ModifyOrder":                   15,
		"MsgType_DeleteOrder":                   16,
		"MsgType_AddOddLotOder":                 17,
		"MsgType_DeleteOddLotOrder":             18,
		"MsgType_AggregateOrderBookUpdate":      19,
		"MsgType_BrokerQueue":                   20,
		"MsgType_OrderImbalance":                21,
		"MsgType_Trade":                         22,
		"MsgType_TradeCancel":                   23,
		"MsgType_TradeTicker":                   24,
		"MsgType_ClosingPrice":                  25,
		"MsgType_NominalPrice":                  26,
		"MsgType_IndicativeEquilibriumPrice":    27,
		"MsgType_ReferencePrice":                28,
		"MsgType_VCMTrigger":                    29,
		"MsgType_Statistics":                    30,
		"MsgType_MarketTurnover":                31,
		"MsgType_Yield":                         32,
		"MsgType_News":                          33,
		"MsgType_IndexDefinition":               34,
		"MsgType_IndexData":                     35,
		"MsgType_StockConnectDailyQuotaBalance": 36,
		"MsgType_StockConnectMarketTurnover":    37,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[40].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[40]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{40}
}

type NewsType int32

const (
	NewsType_NewsType_EXCHANGE_NEWS         NewsType = 0
	NewsType_NewsType_CHINESE_EXCHANGE_NEWS NewsType = 1
)

// Enum value maps for NewsType.
var (
	NewsType_name = map[int32]string{
		0: "NewsType_EXCHANGE_NEWS",
		1: "NewsType_CHINESE_EXCHANGE_NEWS",
	}
	NewsType_value = map[string]int32{
		"NewsType_EXCHANGE_NEWS":         0,
		"NewsType_CHINESE_EXCHANGE_NEWS": 1,
	}
)

func (x NewsType) Enum() *NewsType {
	p := new(NewsType)
	*p = x
	return p
}

func (x NewsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[41].Descriptor()
}

func (NewsType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[41]
}

func (x NewsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewsType.Descriptor instead.
func (NewsType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{41}
}

type OrderImbalanceDirection int32

const (
	OrderImbalanceDirection_OrderImbalanceDirection_Buy          OrderImbalanceDirection = 0
	OrderImbalanceDirection_OrderImbalanceDirection_BUY_SURPLUS  OrderImbalanceDirection = 1
	OrderImbalanceDirection_OrderImbalanceDirection_SELL_SURPLUS OrderImbalanceDirection = 2
	OrderImbalanceDirection_OrderImbalanceDirection_BLANK        OrderImbalanceDirection = 3
)

// Enum value maps for OrderImbalanceDirection.
var (
	OrderImbalanceDirection_name = map[int32]string{
		0: "OrderImbalanceDirection_Buy",
		1: "OrderImbalanceDirection_BUY_SURPLUS",
		2: "OrderImbalanceDirection_SELL_SURPLUS",
		3: "OrderImbalanceDirection_BLANK",
	}
	OrderImbalanceDirection_value = map[string]int32{
		"OrderImbalanceDirection_Buy":          0,
		"OrderImbalanceDirection_BUY_SURPLUS":  1,
		"OrderImbalanceDirection_SELL_SURPLUS": 2,
		"OrderImbalanceDirection_BLANK":        3,
	}
)

func (x OrderImbalanceDirection) Enum() *OrderImbalanceDirection {
	p := new(OrderImbalanceDirection)
	*p = x
	return p
}

func (x OrderImbalanceDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderImbalanceDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[42].Descriptor()
}

func (OrderImbalanceDirection) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[42]
}

func (x OrderImbalanceDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderImbalanceDirection.Descriptor instead.
func (OrderImbalanceDirection) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{42}
}

type ProductType int32

const (
	ProductType_ProductType_EQUITY_ORDINARY_SHARES                      ProductType = 0
	ProductType_ProductType_EQUITY_PREFERENCE_SHARES                    ProductType = 1
	ProductType_ProductType_EQUITY_RIGHTS                               ProductType = 2
	ProductType_ProductType_EQUITY_DEPOSITORY_RECEIPT_ORDINARY_SHARES   ProductType = 3
	ProductType_ProductType_EQUITY_DEPOSITORY_RECEIPT_PREFERENCE_SHARES ProductType = 4
	ProductType_ProductType_EQUITY_SPAC_SHARES_WARRANT                  ProductType = 5
	ProductType_ProductType_WARRANT_DERIVATIVE_WARRANT                  ProductType = 6
	ProductType_ProductType_WARRANT_CALLABLE_BULL_BEAR_CONTRACT         ProductType = 7
	ProductType_ProductType_WARRANT_EQUITY_WARRANT                      ProductType = 8
	ProductType_ProductType_WARRANT_EQUITY_LINKED_INSTRUMENT            ProductType = 9
	ProductType_ProductType_WARRANT_INLINE_WARRANT                      ProductType = 10
	ProductType_ProductType_WARRANT_SPAC_WARRANTS_BOND                  ProductType = 11
	ProductType_ProductType_BOND_DEBT_SECURITY_TRUST                    ProductType = 12
	ProductType_ProductType_TRUST_REAL_ESTATE_INVESTMENT_TRUST          ProductType = 13
	ProductType_ProductType_TRUST_OTHER_UNIT_TRUSTS                     ProductType = 14
	ProductType_ProductType_TRUST_LEVERAGED_AND_INVERSE_PRODUCT         ProductType = 15
	ProductType_ProductType_TRUST_EQUITY_ETF                            ProductType = 16
	ProductType_ProductType_TRUST_FIXED_INCOME_AND_MONEY_MARKET_ETF     ProductType = 17
	ProductType_ProductType_TRUST_COMMODITIES_ETF                       ProductType = 18
	ProductType_ProductType_OTHERS_NONE_OF_THE_ABOVE                    ProductType = 19
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0:  "ProductType_EQUITY_ORDINARY_SHARES",
		1:  "ProductType_EQUITY_PREFERENCE_SHARES",
		2:  "ProductType_EQUITY_RIGHTS",
		3:  "ProductType_EQUITY_DEPOSITORY_RECEIPT_ORDINARY_SHARES",
		4:  "ProductType_EQUITY_DEPOSITORY_RECEIPT_PREFERENCE_SHARES",
		5:  "ProductType_EQUITY_SPAC_SHARES_WARRANT",
		6:  "ProductType_WARRANT_DERIVATIVE_WARRANT",
		7:  "ProductType_WARRANT_CALLABLE_BULL_BEAR_CONTRACT",
		8:  "ProductType_WARRANT_EQUITY_WARRANT",
		9:  "ProductType_WARRANT_EQUITY_LINKED_INSTRUMENT",
		10: "ProductType_WARRANT_INLINE_WARRANT",
		11: "ProductType_WARRANT_SPAC_WARRANTS_BOND",
		12: "ProductType_BOND_DEBT_SECURITY_TRUST",
		13: "ProductType_TRUST_REAL_ESTATE_INVESTMENT_TRUST",
		14: "ProductType_TRUST_OTHER_UNIT_TRUSTS",
		15: "ProductType_TRUST_LEVERAGED_AND_INVERSE_PRODUCT",
		16: "ProductType_TRUST_EQUITY_ETF",
		17: "ProductType_TRUST_FIXED_INCOME_AND_MONEY_MARKET_ETF",
		18: "ProductType_TRUST_COMMODITIES_ETF",
		19: "ProductType_OTHERS_NONE_OF_THE_ABOVE",
	}
	ProductType_value = map[string]int32{
		"ProductType_EQUITY_ORDINARY_SHARES":                      0,
		"ProductType_EQUITY_PREFERENCE_SHARES":                    1,
		"ProductType_EQUITY_RIGHTS":                               2,
		"ProductType_EQUITY_DEPOSITORY_RECEIPT_ORDINARY_SHARES":   3,
		"ProductType_EQUITY_DEPOSITORY_RECEIPT_PREFERENCE_SHARES": 4,
		"ProductType_EQUITY_SPAC_SHARES_WARRANT":                  5,
		"ProductType_WARRANT_DERIVATIVE_WARRANT":                  6,
		"ProductType_WARRANT_CALLABLE_BULL_BEAR_CONTRACT":         7,
		"ProductType_WARRANT_EQUITY_WARRANT":                      8,
		"ProductType_WARRANT_EQUITY_LINKED_INSTRUMENT":            9,
		"ProductType_WARRANT_INLINE_WARRANT":                      10,
		"ProductType_WARRANT_SPAC_WARRANTS_BOND":                  11,
		"ProductType_BOND_DEBT_SECURITY_TRUST":                    12,
		"ProductType_TRUST_REAL_ESTATE_INVESTMENT_TRUST":          13,
		"ProductType_TRUST_OTHER_UNIT_TRUSTS":                     14,
		"ProductType_TRUST_LEVERAGED_AND_INVERSE_PRODUCT":         15,
		"ProductType_TRUST_EQUITY_ETF":                            16,
		"ProductType_TRUST_FIXED_INCOME_AND_MONEY_MARKET_ETF":     17,
		"ProductType_TRUST_COMMODITIES_ETF":                       18,
		"ProductType_OTHERS_NONE_OF_THE_ABOVE":                    19,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[43].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[43]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{43}
}

type Side int32

const (
	Side_Side_BID   Side = 0
	Side_Side_OFFER Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "Side_BID",
		1: "Side_OFFER",
	}
	Side_value = map[string]int32{
		"Side_BID":   0,
		"Side_OFFER": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[44].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[44]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{44}
}

type SpreadTableCode int32

const (
	SpreadTableCode_SpreadTableCode_Part_A             SpreadTableCode = 0
	SpreadTableCode_SpreadTableCode_Part_B             SpreadTableCode = 1
	SpreadTableCode_SpreadTableCode_FOR_INLINE_WARRANT SpreadTableCode = 2
	SpreadTableCode_SpreadTableCode_PART_D             SpreadTableCode = 3
)

// Enum value maps for SpreadTableCode.
var (
	SpreadTableCode_name = map[int32]string{
		0: "SpreadTableCode_Part_A",
		1: "SpreadTableCode_Part_B",
		2: "SpreadTableCode_FOR_INLINE_WARRANT",
		3: "SpreadTableCode_PART_D",
	}
	SpreadTableCode_value = map[string]int32{
		"SpreadTableCode_Part_A":             0,
		"SpreadTableCode_Part_B":             1,
		"SpreadTableCode_FOR_INLINE_WARRANT": 2,
		"SpreadTableCode_PART_D":             3,
	}
)

func (x SpreadTableCode) Enum() *SpreadTableCode {
	p := new(SpreadTableCode)
	*p = x
	return p
}

func (x SpreadTableCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpreadTableCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[45].Descriptor()
}

func (SpreadTableCode) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[45]
}

func (x SpreadTableCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpreadTableCode.Descriptor instead.
func (SpreadTableCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{45}
}

type Style int32

const (
	Style_Style_American_Style Style = 0
	Style_Style_European_Style Style = 1
)

// Enum value maps for Style.
var (
	Style_name = map[int32]string{
		0: "Style_American_Style",
		1: "Style_European_Style",
	}
	Style_value = map[string]int32{
		"Style_American_Style": 0,
		"Style_European_Style": 1,
	}
)

func (x Style) Enum() *Style {
	p := new(Style)
	*p = x
	return p
}

func (x Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Style) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[46].Descriptor()
}

func (Style) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[46]
}

func (x Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Style.Descriptor instead.
func (Style) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{46}
}

type TradingSesControlType int32

const (
	TradingSesControlType_TradingSesControlType_AUTOMATIC TradingSesControlType = 0
	TradingSesControlType_TradingSesControlType_MANUAL    TradingSesControlType = 1
)

// Enum value maps for TradingSesControlType.
var (
	TradingSesControlType_name = map[int32]string{
		0: "TradingSesControlType_AUTOMATIC",
		1: "TradingSesControlType_MANUAL",
	}
	TradingSesControlType_value = map[string]int32{
		"TradingSesControlType_AUTOMATIC": 0,
		"TradingSesControlType_MANUAL":    1,
	}
)

func (x TradingSesControlType) Enum() *TradingSesControlType {
	p := new(TradingSesControlType)
	*p = x
	return p
}

func (x TradingSesControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingSesControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[47].Descriptor()
}

func (TradingSesControlType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[47]
}

func (x TradingSesControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingSesControlType.Descriptor instead.
func (TradingSesControlType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{47}
}

type TradingSesStatus int32

const (
	TradingSesStatus_TradingSesStatus_UNKNOWN    TradingSesStatus = 0
	TradingSesStatus_TradingSesStatus_HALTED     TradingSesStatus = 1
	TradingSesStatus_TradingSesStatus_PRE_OPEN   TradingSesStatus = 2
	TradingSesStatus_TradingSesStatus_OPEN       TradingSesStatus = 3
	TradingSesStatus_TradingSesStatus_PRE_CLOSE  TradingSesStatus = 4
	TradingSesStatus_TradingSesStatus_CLOSED     TradingSesStatus = 5
	TradingSesStatus_TradingSesStatus_DAY_CLOSED TradingSesStatus = 6
)

// Enum value maps for TradingSesStatus.
var (
	TradingSesStatus_name = map[int32]string{
		0: "TradingSesStatus_UNKNOWN",
		1: "TradingSesStatus_HALTED",
		2: "TradingSesStatus_PRE_OPEN",
		3: "TradingSesStatus_OPEN",
		4: "TradingSesStatus_PRE_CLOSE",
		5: "TradingSesStatus_CLOSED",
		6: "TradingSesStatus_DAY_CLOSED",
	}
	TradingSesStatus_value = map[string]int32{
		"TradingSesStatus_UNKNOWN":    0,
		"TradingSesStatus_HALTED":     1,
		"TradingSesStatus_PRE_OPEN":   2,
		"TradingSesStatus_OPEN":       3,
		"TradingSesStatus_PRE_CLOSE":  4,
		"TradingSesStatus_CLOSED":     5,
		"TradingSesStatus_DAY_CLOSED": 6,
	}
)

func (x TradingSesStatus) Enum() *TradingSesStatus {
	p := new(TradingSesStatus)
	*p = x
	return p
}

func (x TradingSesStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingSesStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[48].Descriptor()
}

func (TradingSesStatus) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[48]
}

func (x TradingSesStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingSesStatus.Descriptor instead.
func (TradingSesStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{48}
}

type TradingSessionSubID int32

const (
	TradingSessionSubID_TradingSessionSubID_NOT_YET_OPEN               TradingSessionSubID = 0
	TradingSessionSubID_TradingSessionSubID_ORDER_INPUT                TradingSessionSubID = 1
	TradingSessionSubID_TradingSessionSubID_NO_CANCELLATION            TradingSessionSubID = 2
	TradingSessionSubID_TradingSessionSubID_RANDOM_MATCHING            TradingSessionSubID = 3
	TradingSessionSubID_TradingSessionSubID_ORDER_MATCHING             TradingSessionSubID = 4
	TradingSessionSubID_TradingSessionSubID_BLOCKING                   TradingSessionSubID = 5
	TradingSessionSubID_TradingSessionSubID_CONTINUOUS_TRADING         TradingSessionSubID = 6
	TradingSessionSubID_TradingSessionSubID_CAS_REFERENCE_PRICE_FIXING TradingSessionSubID = 7
	TradingSessionSubID_TradingSessionSubID_CAS_ORDER_INPUT            TradingSessionSubID = 8
	TradingSessionSubID_TradingSessionSubID_CAS_NO_CANCELLATION        TradingSessionSubID = 9
	TradingSessionSubID_TradingSessionSubID_CAS_RANDOM_CLOSE           TradingSessionSubID = 10
	TradingSessionSubID_TradingSessionSubID_CAS_ORDER_MATCHING         TradingSessionSubID = 11
	TradingSessionSubID_TradingSessionSubID_EXCHANGE_INTERVENTION      TradingSessionSubID = 12
	TradingSessionSubID_TradingSessionSubID_CLOSE                      TradingSessionSubID = 13
	TradingSessionSubID_TradingSessionSubID_ORDER_CANCEL               TradingSessionSubID = 14
	TradingSessionSubID_TradingSessionSubID_DAY_CLOSE                  TradingSessionSubID = 15
)

// Enum value maps for TradingSessionSubID.
var (
	TradingSessionSubID_name = map[int32]string{
		0:  "TradingSessionSubID_NOT_YET_OPEN",
		1:  "TradingSessionSubID_ORDER_INPUT",
		2:  "TradingSessionSubID_NO_CANCELLATION",
		3:  "TradingSessionSubID_RANDOM_MATCHING",
		4:  "TradingSessionSubID_ORDER_MATCHING",
		5:  "TradingSessionSubID_BLOCKING",
		6:  "TradingSessionSubID_CONTINUOUS_TRADING",
		7:  "TradingSessionSubID_CAS_REFERENCE_PRICE_FIXING",
		8:  "TradingSessionSubID_CAS_ORDER_INPUT",
		9:  "TradingSessionSubID_CAS_NO_CANCELLATION",
		10: "TradingSessionSubID_CAS_RANDOM_CLOSE",
		11: "TradingSessionSubID_CAS_ORDER_MATCHING",
		12: "TradingSessionSubID_EXCHANGE_INTERVENTION",
		13: "TradingSessionSubID_CLOSE",
		14: "TradingSessionSubID_ORDER_CANCEL",
		15: "TradingSessionSubID_DAY_CLOSE",
	}
	TradingSessionSubID_value = map[string]int32{
		"TradingSessionSubID_NOT_YET_OPEN":               0,
		"TradingSessionSubID_ORDER_INPUT":                1,
		"TradingSessionSubID_NO_CANCELLATION":            2,
		"TradingSessionSubID_RANDOM_MATCHING":            3,
		"TradingSessionSubID_ORDER_MATCHING":             4,
		"TradingSessionSubID_BLOCKING":                   5,
		"TradingSessionSubID_CONTINUOUS_TRADING":         6,
		"TradingSessionSubID_CAS_REFERENCE_PRICE_FIXING": 7,
		"TradingSessionSubID_CAS_ORDER_INPUT":            8,
		"TradingSessionSubID_CAS_NO_CANCELLATION":        9,
		"TradingSessionSubID_CAS_RANDOM_CLOSE":           10,
		"TradingSessionSubID_CAS_ORDER_MATCHING":         11,
		"TradingSessionSubID_EXCHANGE_INTERVENTION":      12,
		"TradingSessionSubID_CLOSE":                      13,
		"TradingSessionSubID_ORDER_CANCEL":               14,
		"TradingSessionSubID_DAY_CLOSE":                  15,
	}
)

func (x TradingSessionSubID) Enum() *TradingSessionSubID {
	p := new(TradingSessionSubID)
	*p = x
	return p
}

func (x TradingSessionSubID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingSessionSubID) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[49].Descriptor()
}

func (TradingSessionSubID) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[49]
}

func (x TradingSessionSubID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingSessionSubID.Descriptor instead.
func (TradingSessionSubID) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{49}
}

type TrdType int32

const (
	TrdType_TrdType_AUTOMATCH_NORMAL               TrdType = 0
	TrdType_TrdType_LATE_TRADE                     TrdType = 1
	TrdType_TrdType_NON_DIRECT_OFF__EXCHANGE_TRADE TrdType = 2
	TrdType_TrdType_AUTOMATCH_INTERNALIZED         TrdType = 3
	TrdType_TrdType_DIRECT_OFF_EXCHANGE_TRADE      TrdType = 4
	TrdType_TrdType_ODD_LOT_TRADE                  TrdType = 5
	TrdType_TrdType_AUCTION_TRADE                  TrdType = 6
	TrdType_TrdType_OVERSEAS_TRADE                 TrdType = 7
)

// Enum value maps for TrdType.
var (
	TrdType_name = map[int32]string{
		0: "TrdType_AUTOMATCH_NORMAL",
		1: "TrdType_LATE_TRADE",
		2: "TrdType_NON_DIRECT_OFF__EXCHANGE_TRADE",
		3: "TrdType_AUTOMATCH_INTERNALIZED",
		4: "TrdType_DIRECT_OFF_EXCHANGE_TRADE",
		5: "TrdType_ODD_LOT_TRADE",
		6: "TrdType_AUCTION_TRADE",
		7: "TrdType_OVERSEAS_TRADE",
	}
	TrdType_value = map[string]int32{
		"TrdType_AUTOMATCH_NORMAL":               0,
		"TrdType_LATE_TRADE":                     1,
		"TrdType_NON_DIRECT_OFF__EXCHANGE_TRADE": 2,
		"TrdType_AUTOMATCH_INTERNALIZED":         3,
		"TrdType_DIRECT_OFF_EXCHANGE_TRADE":      4,
		"TrdType_ODD_LOT_TRADE":                  5,
		"TrdType_AUCTION_TRADE":                  6,
		"TrdType_OVERSEAS_TRADE":                 7,
	}
)

func (x TrdType) Enum() *TrdType {
	p := new(TrdType)
	*p = x
	return p
}

func (x TrdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[50].Descriptor()
}

func (TrdType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[50]
}

func (x TrdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrdType.Descriptor instead.
func (TrdType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{50}
}

type UpdateAction int32

const (
	UpdateAction_UpdateAction_NEW             UpdateAction = 0
	UpdateAction_UpdateAction_CHANGE          UpdateAction = 1
	UpdateAction_UpdateAction_DELETE          UpdateAction = 2
	UpdateAction_UpdateAction_ORDERBOOK_CLEAR UpdateAction = 3
)

// Enum value maps for UpdateAction.
var (
	UpdateAction_name = map[int32]string{
		0: "UpdateAction_NEW",
		1: "UpdateAction_CHANGE",
		2: "UpdateAction_DELETE",
		3: "UpdateAction_ORDERBOOK_CLEAR",
	}
	UpdateAction_value = map[string]int32{
		"UpdateAction_NEW":             0,
		"UpdateAction_CHANGE":          1,
		"UpdateAction_DELETE":          2,
		"UpdateAction_ORDERBOOK_CLEAR": 3,
	}
)

func (x UpdateAction) Enum() *UpdateAction {
	p := new(UpdateAction)
	*p = x
	return p
}

func (x UpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[51].Descriptor()
}

func (UpdateAction) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[51]
}

func (x UpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAction.Descriptor instead.
func (UpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{51}
}

type WarrantType int32

const (
	WarrantType_WarrantType_N WarrantType = 0
	WarrantType_WarrantType_X WarrantType = 1
	WarrantType_WarrantType_O WarrantType = 2
)

// Enum value maps for WarrantType.
var (
	WarrantType_name = map[int32]string{
		0: "WarrantType_N",
		1: "WarrantType_X",
		2: "WarrantType_O",
	}
	WarrantType_value = map[string]int32{
		"WarrantType_N": 0,
		"WarrantType_X": 1,
		"WarrantType_O": 2,
	}
)

func (x WarrantType) Enum() *WarrantType {
	p := new(WarrantType)
	*p = x
	return p
}

func (x WarrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[52].Descriptor()
}

func (WarrantType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[52]
}

func (x WarrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WarrantType.Descriptor instead.
func (WarrantType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{52}
}

type Message_DataType int32

const (
	Message_AddOddLotOrderType                            Message_DataType = 0
	Message_AggregateOrderBookUpdateType                  Message_DataType = 1
	Message_BrokerQueueType                               Message_DataType = 2
	Message_ClosingPriceType                              Message_DataType = 3
	Message_CurrencyRateType                              Message_DataType = 4
	Message_DeleteOddLotOrderType                         Message_DataType = 5
	Message_IndexDataType                                 Message_DataType = 6
	Message_IndexDefinitionType                           Message_DataType = 7
	Message_IndicativeEquilibriumPriceType                Message_DataType = 8
	Message_LiquidityProviderType                         Message_DataType = 9
	Message_MarketDefinitionType                          Message_DataType = 10
	Message_MarketTurnoverType                            Message_DataType = 11
	Message_NewsType                                      Message_DataType = 12
	Message_NominalPriceType                              Message_DataType = 13
	Message_OrderImbalanceType                            Message_DataType = 14
	Message_ReferencePriceType                            Message_DataType = 15
	Message_SecurityDefinitionType                        Message_DataType = 16
	Message_SecurityStatusType                            Message_DataType = 17
	Message_StatisticsType                                Message_DataType = 18
	Message_StockConnectDailyQuotaBalanceType             Message_DataType = 19
	Message_StockConnectMarketTurnoverType                Message_DataType = 20
	Message_TradeType                                     Message_DataType = 21
	Message_TradeCancelType                               Message_DataType = 22
	Message_TradingSessionStatusType                      Message_DataType = 23
	Message_VCMTriggerType                                Message_DataType = 24
	Message_YieldType                                     Message_DataType = 25
	Message_AdjustedClosingPriceType                      Message_DataType = 26
	Message_DayTradeSummaryType                           Message_DataType = 27
	Message_DayTradeSummaryNextSharesType                 Message_DataType = 28
	Message_IPOInformationType                            Message_DataType = 29
	Message_IPOQuotingPeriodUpdateType                    Message_DataType = 30
	Message_LongAdjustedClosingPriceType                  Message_DataType = 31
	Message_LongDayTradeSummaryType                       Message_DataType = 32
	Message_LongTradeCancelForNonNextSharesTradesType     Message_DataType = 33
	Message_LongTradeCorrectionForNonNextsharesTradesType Message_DataType = 34
	Message_LongTradeReportForNonNextsharesType           Message_DataType = 35
	Message_MWCBStatusMessageType                         Message_DataType = 36
	Message_MarketWideCircuitBreakerType                  Message_DataType = 37
	Message_OperationalHaltType                           Message_DataType = 38
	Message_SaleConditionModifierType                     Message_DataType = 39
	Message_ShortSaleRestrictionIndicatorMessageType      Message_DataType = 40
	Message_StockDirectoryType                            Message_DataType = 41
	Message_StockTradingActionType                        Message_DataType = 42
	Message_SystemEventMessageType                        Message_DataType = 43
	Message_TradeCancelForNextsharesTradesType            Message_DataType = 44
	Message_TradeCancelForNonNextSharesTradesType         Message_DataType = 45
	Message_TradeCorrectionForNextsharesTradesType        Message_DataType = 46
	Message_TradeCorrectionForNonNextsharesTradesType     Message_DataType = 47
	Message_TradeReportForNextsharesType                  Message_DataType = 48
	Message_TradeReportForNonNextsharesType               Message_DataType = 49
	Message_QBBOMWCBBreachMessageType                     Message_DataType = 50
	Message_QBBOMWCBDeclineLevelMessageType               Message_DataType = 51
	Message_QBBONextSharesQuotationMessageType            Message_DataType = 52
	Message_QBBOOperationalHaltType                       Message_DataType = 53
	Message_QBBOQuotationMessageType                      Message_DataType = 54
	Message_QBBORegShoRestrictionType                     Message_DataType = 55
	Message_QBBOStockDirectoryType                        Message_DataType = 56
	Message_QBBOStockTradingActionType                    Message_DataType = 57
	Message_QBBOSystemEventMessageType                    Message_DataType = 58
	Message_QBBOIPOQuotingPeriodUpdateType                Message_DataType = 59
	Message_CertificationMsgType                          Message_DataType = 60 //授权验证信息
	Message_CNMarketDefinitionType                        Message_DataType = 61
	Message_CNSecurityDefinitionType                      Message_DataType = 62
	Message_CNSecurityStatusType                          Message_DataType = 63
	Message_CNStatisticsType                              Message_DataType = 64
	Message_CNTopBookType                                 Message_DataType = 65
)

// Enum value maps for Message_DataType.
var (
	Message_DataType_name = map[int32]string{
		0:  "AddOddLotOrderType",
		1:  "AggregateOrderBookUpdateType",
		2:  "BrokerQueueType",
		3:  "ClosingPriceType",
		4:  "CurrencyRateType",
		5:  "DeleteOddLotOrderType",
		6:  "IndexDataType",
		7:  "IndexDefinitionType",
		8:  "IndicativeEquilibriumPriceType",
		9:  "LiquidityProviderType",
		10: "MarketDefinitionType",
		11: "MarketTurnoverType",
		12: "NewsType",
		13: "NominalPriceType",
		14: "OrderImbalanceType",
		15: "ReferencePriceType",
		16: "SecurityDefinitionType",
		17: "SecurityStatusType",
		18: "StatisticsType",
		19: "StockConnectDailyQuotaBalanceType",
		20: "StockConnectMarketTurnoverType",
		21: "TradeType",
		22: "TradeCancelType",
		23: "TradingSessionStatusType",
		24: "VCMTriggerType",
		25: "YieldType",
		26: "AdjustedClosingPriceType",
		27: "DayTradeSummaryType",
		28: "DayTradeSummaryNextSharesType",
		29: "IPOInformationType",
		30: "IPOQuotingPeriodUpdateType",
		31: "LongAdjustedClosingPriceType",
		32: "LongDayTradeSummaryType",
		33: "LongTradeCancelForNonNextSharesTradesType",
		34: "LongTradeCorrectionForNonNextsharesTradesType",
		35: "LongTradeReportForNonNextsharesType",
		36: "MWCBStatusMessageType",
		37: "MarketWideCircuitBreakerType",
		38: "OperationalHaltType",
		39: "SaleConditionModifierType",
		40: "ShortSaleRestrictionIndicatorMessageType",
		41: "StockDirectoryType",
		42: "StockTradingActionType",
		43: "SystemEventMessageType",
		44: "TradeCancelForNextsharesTradesType",
		45: "TradeCancelForNonNextSharesTradesType",
		46: "TradeCorrectionForNextsharesTradesType",
		47: "TradeCorrectionForNonNextsharesTradesType",
		48: "TradeReportForNextsharesType",
		49: "TradeReportForNonNextsharesType",
		50: "QBBOMWCBBreachMessageType",
		51: "QBBOMWCBDeclineLevelMessageType",
		52: "QBBONextSharesQuotationMessageType",
		53: "QBBOOperationalHaltType",
		54: "QBBOQuotationMessageType",
		55: "QBBORegShoRestrictionType",
		56: "QBBOStockDirectoryType",
		57: "QBBOStockTradingActionType",
		58: "QBBOSystemEventMessageType",
		59: "QBBOIPOQuotingPeriodUpdateType",
		60: "CertificationMsgType",
		61: "CNMarketDefinitionType",
		62: "CNSecurityDefinitionType",
		63: "CNSecurityStatusType",
		64: "CNStatisticsType",
		65: "CNTopBookType",
	}
	Message_DataType_value = map[string]int32{
		"AddOddLotOrderType":                            0,
		"AggregateOrderBookUpdateType":                  1,
		"BrokerQueueType":                               2,
		"ClosingPriceType":                              3,
		"CurrencyRateType":                              4,
		"DeleteOddLotOrderType":                         5,
		"IndexDataType":                                 6,
		"IndexDefinitionType":                           7,
		"IndicativeEquilibriumPriceType":                8,
		"LiquidityProviderType":                         9,
		"MarketDefinitionType":                          10,
		"MarketTurnoverType":                            11,
		"NewsType":                                      12,
		"NominalPriceType":                              13,
		"OrderImbalanceType":                            14,
		"ReferencePriceType":                            15,
		"SecurityDefinitionType":                        16,
		"SecurityStatusType":                            17,
		"StatisticsType":                                18,
		"StockConnectDailyQuotaBalanceType":             19,
		"StockConnectMarketTurnoverType":                20,
		"TradeType":                                     21,
		"TradeCancelType":                               22,
		"TradingSessionStatusType":                      23,
		"VCMTriggerType":                                24,
		"YieldType":                                     25,
		"AdjustedClosingPriceType":                      26,
		"DayTradeSummaryType":                           27,
		"DayTradeSummaryNextSharesType":                 28,
		"IPOInformationType":                            29,
		"IPOQuotingPeriodUpdateType":                    30,
		"LongAdjustedClosingPriceType":                  31,
		"LongDayTradeSummaryType":                       32,
		"LongTradeCancelForNonNextSharesTradesType":     33,
		"LongTradeCorrectionForNonNextsharesTradesType": 34,
		"LongTradeReportForNonNextsharesType":           35,
		"MWCBStatusMessageType":                         36,
		"MarketWideCircuitBreakerType":                  37,
		"OperationalHaltType":                           38,
		"SaleConditionModifierType":                     39,
		"ShortSaleRestrictionIndicatorMessageType":      40,
		"StockDirectoryType":                            41,
		"StockTradingActionType":                        42,
		"SystemEventMessageType":                        43,
		"TradeCancelForNextsharesTradesType":            44,
		"TradeCancelForNonNextSharesTradesType":         45,
		"TradeCorrectionForNextsharesTradesType":        46,
		"TradeCorrectionForNonNextsharesTradesType":     47,
		"TradeReportForNextsharesType":                  48,
		"TradeReportForNonNextsharesType":               49,
		"QBBOMWCBBreachMessageType":                     50,
		"QBBOMWCBDeclineLevelMessageType":               51,
		"QBBONextSharesQuotationMessageType":            52,
		"QBBOOperationalHaltType":                       53,
		"QBBOQuotationMessageType":                      54,
		"QBBORegShoRestrictionType":                     55,
		"QBBOStockDirectoryType":                        56,
		"QBBOStockTradingActionType":                    57,
		"QBBOSystemEventMessageType":                    58,
		"QBBOIPOQuotingPeriodUpdateType":                59,
		"CertificationMsgType":                          60,
		"CNMarketDefinitionType":                        61,
		"CNSecurityDefinitionType":                      62,
		"CNSecurityStatusType":                          63,
		"CNStatisticsType":                              64,
		"CNTopBookType":                                 65,
	}
)

func (x Message_DataType) Enum() *Message_DataType {
	p := new(Message_DataType)
	*p = x
	return p
}

func (x Message_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_data_proto_enumTypes[53].Descriptor()
}

func (Message_DataType) Type() protoreflect.EnumType {
	return &file_pb_data_proto_enumTypes[53]
}

func (x Message_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_DataType.Descriptor instead.
func (Message_DataType) EnumDescriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{77, 0}
}

type AdjustedClosingPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol          *string        `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass        *SecurityClass `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	AdjustedClosingPrice *float64       `protobuf:"fixed64,3,opt,name=adjustedClosingPrice,proto3,oneof" json:"adjustedClosingPrice,omitempty"`
}

func (x *AdjustedClosingPrice) Reset() {
	*x = AdjustedClosingPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustedClosingPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustedClosingPrice) ProtoMessage() {}

func (x *AdjustedClosingPrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustedClosingPrice.ProtoReflect.Descriptor instead.
func (*AdjustedClosingPrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{0}
}

func (x *AdjustedClosingPrice) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *AdjustedClosingPrice) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *AdjustedClosingPrice) GetAdjustedClosingPrice() float64 {
	if x != nil && x.AdjustedClosingPrice != nil {
		return *x.AdjustedClosingPrice
	}
	return 0
}

type DayTradeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol        *string         `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	MarketCategory     *MarketCategory `protobuf:"varint,2,opt,name=marketCategory,proto3,enum=MarketCategory,oneof" json:"marketCategory,omitempty"`
	NasdaqHighPrice    *float64        `protobuf:"fixed64,3,opt,name=nasdaqHighPrice,proto3,oneof" json:"nasdaqHighPrice,omitempty"`
	NasdaqLowPrice     *float64        `protobuf:"fixed64,4,opt,name=nasdaqLowPrice,proto3,oneof" json:"nasdaqLowPrice,omitempty"`
	NasdaqClosingPrice *float64        `protobuf:"fixed64,5,opt,name=nasdaqClosingPrice,proto3,oneof" json:"nasdaqClosingPrice,omitempty"`
	ConsolidatedVolume *int64          `protobuf:"varint,6,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *DayTradeSummary) Reset() {
	*x = DayTradeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTradeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTradeSummary) ProtoMessage() {}

func (x *DayTradeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTradeSummary.ProtoReflect.Descriptor instead.
func (*DayTradeSummary) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{1}
}

func (x *DayTradeSummary) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *DayTradeSummary) GetMarketCategory() MarketCategory {
	if x != nil && x.MarketCategory != nil {
		return *x.MarketCategory
	}
	return MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM
}

func (x *DayTradeSummary) GetNasdaqHighPrice() float64 {
	if x != nil && x.NasdaqHighPrice != nil {
		return *x.NasdaqHighPrice
	}
	return 0
}

func (x *DayTradeSummary) GetNasdaqLowPrice() float64 {
	if x != nil && x.NasdaqLowPrice != nil {
		return *x.NasdaqLowPrice
	}
	return 0
}

func (x *DayTradeSummary) GetNasdaqClosingPrice() float64 {
	if x != nil && x.NasdaqClosingPrice != nil {
		return *x.NasdaqClosingPrice
	}
	return 0
}

func (x *DayTradeSummary) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type DayTradeSummaryNextShares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol          *string         `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	MarketCategory       *MarketCategory `protobuf:"varint,2,opt,name=marketCategory,proto3,enum=MarketCategory,oneof" json:"marketCategory,omitempty"`
	NasdaqHighPrice      *float64        `protobuf:"fixed64,3,opt,name=nasdaqHighPrice,proto3,oneof" json:"nasdaqHighPrice,omitempty"`
	NAVOffsetAmountHigh  *float64        `protobuf:"fixed64,4,opt,name=NAVOffsetAmountHigh,proto3,oneof" json:"NAVOffsetAmountHigh,omitempty"`
	NasdaqLowPrice       *float64        `protobuf:"fixed64,5,opt,name=nasdaqLowPrice,proto3,oneof" json:"nasdaqLowPrice,omitempty"`
	NAVOffsetAmountLow   *float64        `protobuf:"fixed64,6,opt,name=NAVOffsetAmountLow,proto3,oneof" json:"NAVOffsetAmountLow,omitempty"`
	NasdaqClosingPrice   *float64        `protobuf:"fixed64,7,opt,name=nasdaqClosingPrice,proto3,oneof" json:"nasdaqClosingPrice,omitempty"`
	NAVOffsetAmountClose *float64        `protobuf:"fixed64,8,opt,name=NAVOffsetAmountClose,proto3,oneof" json:"NAVOffsetAmountClose,omitempty"`
	ConsolidatedVolume   *int64          `protobuf:"varint,9,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *DayTradeSummaryNextShares) Reset() {
	*x = DayTradeSummaryNextShares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayTradeSummaryNextShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayTradeSummaryNextShares) ProtoMessage() {}

func (x *DayTradeSummaryNextShares) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayTradeSummaryNextShares.ProtoReflect.Descriptor instead.
func (*DayTradeSummaryNextShares) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{2}
}

func (x *DayTradeSummaryNextShares) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *DayTradeSummaryNextShares) GetMarketCategory() MarketCategory {
	if x != nil && x.MarketCategory != nil {
		return *x.MarketCategory
	}
	return MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM
}

func (x *DayTradeSummaryNextShares) GetNasdaqHighPrice() float64 {
	if x != nil && x.NasdaqHighPrice != nil {
		return *x.NasdaqHighPrice
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetNAVOffsetAmountHigh() float64 {
	if x != nil && x.NAVOffsetAmountHigh != nil {
		return *x.NAVOffsetAmountHigh
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetNasdaqLowPrice() float64 {
	if x != nil && x.NasdaqLowPrice != nil {
		return *x.NasdaqLowPrice
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetNAVOffsetAmountLow() float64 {
	if x != nil && x.NAVOffsetAmountLow != nil {
		return *x.NAVOffsetAmountLow
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetNasdaqClosingPrice() float64 {
	if x != nil && x.NasdaqClosingPrice != nil {
		return *x.NasdaqClosingPrice
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetNAVOffsetAmountClose() float64 {
	if x != nil && x.NAVOffsetAmountClose != nil {
		return *x.NAVOffsetAmountClose
	}
	return 0
}

func (x *DayTradeSummaryNextShares) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type IPOInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol           *string        `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass         *SecurityClass `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	ReferenceForNetChange *NetChange     `protobuf:"varint,3,opt,name=referenceForNetChange,proto3,enum=NetChange,oneof" json:"referenceForNetChange,omitempty"`
	ReferencePrice        *float64       `protobuf:"fixed64,4,opt,name=referencePrice,proto3,oneof" json:"referencePrice,omitempty"`
}

func (x *IPOInformation) Reset() {
	*x = IPOInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOInformation) ProtoMessage() {}

func (x *IPOInformation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOInformation.ProtoReflect.Descriptor instead.
func (*IPOInformation) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{3}
}

func (x *IPOInformation) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *IPOInformation) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *IPOInformation) GetReferenceForNetChange() NetChange {
	if x != nil && x.ReferenceForNetChange != nil {
		return *x.ReferenceForNetChange
	}
	return NetChange_NetChange_FIRST_TRADE_PRICE
}

func (x *IPOInformation) GetReferencePrice() float64 {
	if x != nil && x.ReferencePrice != nil {
		return *x.ReferencePrice
	}
	return 0
}

type IPOQuotingPeriodUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                     *string                       `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	IPOQuotationReleaseTime   *int64                        `protobuf:"varint,2,opt,name=iPOQuotationReleaseTime,proto3,oneof" json:"iPOQuotationReleaseTime,omitempty"`
	QuotationReleaseQualifier *IPOQuotationReleaseQualifier `protobuf:"varint,3,opt,name=quotationReleaseQualifier,proto3,enum=IPOQuotationReleaseQualifier,oneof" json:"quotationReleaseQualifier,omitempty"`
	IPOPrice                  *float64                      `protobuf:"fixed64,4,opt,name=iPOPrice,proto3,oneof" json:"iPOPrice,omitempty"`
}

func (x *IPOQuotingPeriodUpdate) Reset() {
	*x = IPOQuotingPeriodUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOQuotingPeriodUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOQuotingPeriodUpdate) ProtoMessage() {}

func (x *IPOQuotingPeriodUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOQuotingPeriodUpdate.ProtoReflect.Descriptor instead.
func (*IPOQuotingPeriodUpdate) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{4}
}

func (x *IPOQuotingPeriodUpdate) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *IPOQuotingPeriodUpdate) GetIPOQuotationReleaseTime() int64 {
	if x != nil && x.IPOQuotationReleaseTime != nil {
		return *x.IPOQuotationReleaseTime
	}
	return 0
}

func (x *IPOQuotingPeriodUpdate) GetQuotationReleaseQualifier() IPOQuotationReleaseQualifier {
	if x != nil && x.QuotationReleaseQualifier != nil {
		return *x.QuotationReleaseQualifier
	}
	return IPOQuotationReleaseQualifier_IPOQuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE_TIME
}

func (x *IPOQuotingPeriodUpdate) GetIPOPrice() float64 {
	if x != nil && x.IPOPrice != nil {
		return *x.IPOPrice
	}
	return 0
}

type MWCBStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreachedLevel *BreachedLevel `protobuf:"varint,1,opt,name=breachedLevel,proto3,enum=BreachedLevel,oneof" json:"breachedLevel,omitempty"`
}

func (x *MWCBStatusMessage) Reset() {
	*x = MWCBStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MWCBStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MWCBStatusMessage) ProtoMessage() {}

func (x *MWCBStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MWCBStatusMessage.ProtoReflect.Descriptor instead.
func (*MWCBStatusMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{5}
}

func (x *MWCBStatusMessage) GetBreachedLevel() BreachedLevel {
	if x != nil && x.BreachedLevel != nil {
		return *x.BreachedLevel
	}
	return BreachedLevel_BreachedLevel_LEVEL1
}

type MarketWideCircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level1 *float64 `protobuf:"fixed64,1,opt,name=Level1,proto3,oneof" json:"Level1,omitempty"`
	Level2 *float64 `protobuf:"fixed64,2,opt,name=Level2,proto3,oneof" json:"Level2,omitempty"`
	Level3 *float64 `protobuf:"fixed64,3,opt,name=Level3,proto3,oneof" json:"Level3,omitempty"`
}

func (x *MarketWideCircuitBreaker) Reset() {
	*x = MarketWideCircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketWideCircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketWideCircuitBreaker) ProtoMessage() {}

func (x *MarketWideCircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketWideCircuitBreaker.ProtoReflect.Descriptor instead.
func (*MarketWideCircuitBreaker) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{6}
}

func (x *MarketWideCircuitBreaker) GetLevel1() float64 {
	if x != nil && x.Level1 != nil {
		return *x.Level1
	}
	return 0
}

func (x *MarketWideCircuitBreaker) GetLevel2() float64 {
	if x != nil && x.Level2 != nil {
		return *x.Level2
	}
	return 0
}

func (x *MarketWideCircuitBreaker) GetLevel3() float64 {
	if x != nil && x.Level3 != nil {
		return *x.Level3
	}
	return 0
}

type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingNumber *int32       `protobuf:"varint,1,opt,name=trackingNumber,proto3,oneof" json:"trackingNumber,omitempty"`
	Timestamp      *int64       `protobuf:"varint,2,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	MessageType    *MessageType `protobuf:"varint,3,opt,name=messageType,proto3,enum=MessageType,oneof" json:"messageType,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{7}
}

func (x *MessageHeader) GetTrackingNumber() int32 {
	if x != nil && x.TrackingNumber != nil {
		return *x.TrackingNumber
	}
	return 0
}

func (x *MessageHeader) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MessageHeader) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_MessageType_SYSTEM_EVENT_MESSAGE
}

type OperationalHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                 *string                `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	MarketCode            *MarketCode            `protobuf:"varint,2,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	OperationalHaltAction *OperationalHaltAction `protobuf:"varint,3,opt,name=operationalHaltAction,proto3,enum=OperationalHaltAction,oneof" json:"operationalHaltAction,omitempty"`
}

func (x *OperationalHalt) Reset() {
	*x = OperationalHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalHalt) ProtoMessage() {}

func (x *OperationalHalt) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalHalt.ProtoReflect.Descriptor instead.
func (*OperationalHalt) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{8}
}

func (x *OperationalHalt) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *OperationalHalt) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *OperationalHalt) GetOperationalHaltAction() OperationalHaltAction {
	if x != nil && x.OperationalHaltAction != nil {
		return *x.OperationalHaltAction
	}
	return OperationalHaltAction_OperationalHaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET
}

type SaleConditionModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level1 *LevelOne   `protobuf:"varint,1,opt,name=level1,proto3,enum=LevelOne,oneof" json:"level1,omitempty"`
	Level2 *LevelTwo   `protobuf:"varint,2,opt,name=level2,proto3,enum=LevelTwo,oneof" json:"level2,omitempty"`
	Level3 *LevelThree `protobuf:"varint,3,opt,name=level3,proto3,enum=LevelThree,oneof" json:"level3,omitempty"`
	Level4 *LevelFour  `protobuf:"varint,4,opt,name=level4,proto3,enum=LevelFour,oneof" json:"level4,omitempty"`
}

func (x *SaleConditionModifier) Reset() {
	*x = SaleConditionModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleConditionModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleConditionModifier) ProtoMessage() {}

func (x *SaleConditionModifier) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleConditionModifier.ProtoReflect.Descriptor instead.
func (*SaleConditionModifier) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{9}
}

func (x *SaleConditionModifier) GetLevel1() LevelOne {
	if x != nil && x.Level1 != nil {
		return *x.Level1
	}
	return LevelOne_LevelOne_REGULAR
}

func (x *SaleConditionModifier) GetLevel2() LevelTwo {
	if x != nil && x.Level2 != nil {
		return *x.Level2
	}
	return LevelTwo_LevelTwo_INTERMARKET_SWEEP
}

func (x *SaleConditionModifier) GetLevel3() LevelThree {
	if x != nil && x.Level3 != nil {
		return *x.Level3
	}
	return LevelThree_LevelThree_EXTENDED_HOURS_TRADE
}

func (x *SaleConditionModifier) GetLevel4() LevelFour {
	if x != nil && x.Level4 != nil {
		return *x.Level4
	}
	return LevelFour_LevelFour_ACQUISITION
}

type ShortSaleRestrictionIndicatorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol  *string       `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	RegSHOAction *RegSHOAction `protobuf:"varint,2,opt,name=regSHOAction,proto3,enum=RegSHOAction,oneof" json:"regSHOAction,omitempty"`
}

func (x *ShortSaleRestrictionIndicatorMessage) Reset() {
	*x = ShortSaleRestrictionIndicatorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortSaleRestrictionIndicatorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortSaleRestrictionIndicatorMessage) ProtoMessage() {}

func (x *ShortSaleRestrictionIndicatorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortSaleRestrictionIndicatorMessage.ProtoReflect.Descriptor instead.
func (*ShortSaleRestrictionIndicatorMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{10}
}

func (x *ShortSaleRestrictionIndicatorMessage) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *ShortSaleRestrictionIndicatorMessage) GetRegSHOAction() RegSHOAction {
	if x != nil && x.RegSHOAction != nil {
		return *x.RegSHOAction
	}
	return RegSHOAction_RegSHOAction_NO_PRICE_TEST_IN_PLACE
}

type StockDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                       *string                   `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	MarketCategory              *MarketCategory           `protobuf:"varint,2,opt,name=marketCategory,proto3,enum=MarketCategory,oneof" json:"marketCategory,omitempty"`
	FinancialStatusIndicator    *FinancialStatusIndicator `protobuf:"varint,3,opt,name=financialStatusIndicator,proto3,enum=FinancialStatusIndicator,oneof" json:"financialStatusIndicator,omitempty"`
	RoundLotsize                *int64                    `protobuf:"varint,4,opt,name=roundLotsize,proto3,oneof" json:"roundLotsize,omitempty"`
	RoundLotOnly                *IndicatesIf              `protobuf:"varint,5,opt,name=roundLotOnly,proto3,enum=IndicatesIf,oneof" json:"roundLotOnly,omitempty"`
	IssueClassification         *string                   `protobuf:"bytes,6,opt,name=issueClassification,proto3,oneof" json:"issueClassification,omitempty"`
	IssueSubType                *string                   `protobuf:"bytes,7,opt,name=issueSubType,proto3,oneof" json:"issueSubType,omitempty"`
	Authenticity                *Authenticity             `protobuf:"varint,8,opt,name=authenticity,proto3,enum=Authenticity,oneof" json:"authenticity,omitempty"`
	ShortSaleThresholdIndicator *IndicatesIf              `protobuf:"varint,9,opt,name=shortSaleThresholdIndicator,proto3,enum=IndicatesIf,oneof" json:"shortSaleThresholdIndicator,omitempty"`
	IPOFlag                     *IndicatesIf              `protobuf:"varint,10,opt,name=IPOFlag,proto3,enum=IndicatesIf,oneof" json:"IPOFlag,omitempty"`
	LULDReferencePriceTier      *LULDRule                 `protobuf:"varint,11,opt,name=lULDReferencePriceTier,proto3,enum=LULDRule,oneof" json:"lULDReferencePriceTier,omitempty"`
	ETPlag                      *IndicatesIf              `protobuf:"varint,12,opt,name=ETPlag,proto3,enum=IndicatesIf,oneof" json:"ETPlag,omitempty"`
	ETPLeverageFactor           *int64                    `protobuf:"varint,13,opt,name=ETPLeverageFactor,proto3,oneof" json:"ETPLeverageFactor,omitempty"`
	InverseIndicator            *IndicatesIf              `protobuf:"varint,14,opt,name=inverseIndicator,proto3,enum=IndicatesIf,oneof" json:"inverseIndicator,omitempty"`
	BloombergID                 *string                   `protobuf:"bytes,15,opt,name=bloombergID,proto3,oneof" json:"bloombergID,omitempty"`
}

func (x *StockDirectory) Reset() {
	*x = StockDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockDirectory) ProtoMessage() {}

func (x *StockDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockDirectory.ProtoReflect.Descriptor instead.
func (*StockDirectory) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{11}
}

func (x *StockDirectory) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *StockDirectory) GetMarketCategory() MarketCategory {
	if x != nil && x.MarketCategory != nil {
		return *x.MarketCategory
	}
	return MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM
}

func (x *StockDirectory) GetFinancialStatusIndicator() FinancialStatusIndicator {
	if x != nil && x.FinancialStatusIndicator != nil {
		return *x.FinancialStatusIndicator
	}
	return FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT
}

func (x *StockDirectory) GetRoundLotsize() int64 {
	if x != nil && x.RoundLotsize != nil {
		return *x.RoundLotsize
	}
	return 0
}

func (x *StockDirectory) GetRoundLotOnly() IndicatesIf {
	if x != nil && x.RoundLotOnly != nil {
		return *x.RoundLotOnly
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *StockDirectory) GetIssueClassification() string {
	if x != nil && x.IssueClassification != nil {
		return *x.IssueClassification
	}
	return ""
}

func (x *StockDirectory) GetIssueSubType() string {
	if x != nil && x.IssueSubType != nil {
		return *x.IssueSubType
	}
	return ""
}

func (x *StockDirectory) GetAuthenticity() Authenticity {
	if x != nil && x.Authenticity != nil {
		return *x.Authenticity
	}
	return Authenticity_Authenticity_LIVE_PRODUCTION
}

func (x *StockDirectory) GetShortSaleThresholdIndicator() IndicatesIf {
	if x != nil && x.ShortSaleThresholdIndicator != nil {
		return *x.ShortSaleThresholdIndicator
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *StockDirectory) GetIPOFlag() IndicatesIf {
	if x != nil && x.IPOFlag != nil {
		return *x.IPOFlag
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *StockDirectory) GetLULDReferencePriceTier() LULDRule {
	if x != nil && x.LULDReferencePriceTier != nil {
		return *x.LULDReferencePriceTier
	}
	return LULDRule_LULDRule_NMS_STOCKS_AND_SELECT_ETPS
}

func (x *StockDirectory) GetETPlag() IndicatesIf {
	if x != nil && x.ETPlag != nil {
		return *x.ETPlag
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *StockDirectory) GetETPLeverageFactor() int64 {
	if x != nil && x.ETPLeverageFactor != nil {
		return *x.ETPLeverageFactor
	}
	return 0
}

func (x *StockDirectory) GetInverseIndicator() IndicatesIf {
	if x != nil && x.InverseIndicator != nil {
		return *x.InverseIndicator
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *StockDirectory) GetBloombergID() string {
	if x != nil && x.BloombergID != nil {
		return *x.BloombergID
	}
	return ""
}

type StockTradingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved            *string              `protobuf:"bytes,1,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	IssueSymbol         *string              `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass       *SecurityClass       `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	CurrentTradingState *CurrentTradingState `protobuf:"varint,4,opt,name=currentTradingState,proto3,enum=CurrentTradingState,oneof" json:"currentTradingState,omitempty"`
	Reason              *string              `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *StockTradingAction) Reset() {
	*x = StockTradingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTradingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTradingAction) ProtoMessage() {}

func (x *StockTradingAction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTradingAction.ProtoReflect.Descriptor instead.
func (*StockTradingAction) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{12}
}

func (x *StockTradingAction) GetReserved() string {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return ""
}

func (x *StockTradingAction) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *StockTradingAction) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *StockTradingAction) GetCurrentTradingState() CurrentTradingState {
	if x != nil && x.CurrentTradingState != nil {
		return *x.CurrentTradingState
	}
	return CurrentTradingState_CurrentTradingState_HALT_IN_EFFECT
}

func (x *StockTradingAction) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type SystemEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCode *EventCode `protobuf:"varint,1,opt,name=eventCode,proto3,enum=EventCode,oneof" json:"eventCode,omitempty"`
}

func (x *SystemEventMessage) Reset() {
	*x = SystemEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemEventMessage) ProtoMessage() {}

func (x *SystemEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemEventMessage.ProtoReflect.Descriptor instead.
func (*SystemEventMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{13}
}

func (x *SystemEventMessage) GetEventCode() EventCode {
	if x != nil && x.EventCode != nil {
		return *x.EventCode
	}
	return EventCode_EventCode_START_OF_TRANSMISSIONS
}

type TradeCancelForNextsharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier        *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                   *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                 *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalTradeControlNumber    *string                            `protobuf:"bytes,4,opt,name=originalTradeControlNumber,proto3,oneof" json:"originalTradeControlNumber,omitempty"`
	OriginalProxyPrice            *float64                           `protobuf:"fixed64,5,opt,name=originalProxyPrice,proto3,oneof" json:"originalProxyPrice,omitempty"`
	OriginalNAVOffsetAmount       *float64                           `protobuf:"fixed64,6,opt,name=originalNAVOffsetAmount,proto3,oneof" json:"originalNAVOffsetAmount,omitempty"`
	OriginalTradeSize             *int64                             `protobuf:"varint,7,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalSaleConditionModifier *string                            `protobuf:"bytes,8,opt,name=originalSaleConditionModifier,proto3,oneof" json:"originalSaleConditionModifier,omitempty"`
	ConsolidatedVolume            *int64                             `protobuf:"varint,9,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeCancelForNextsharesTrades) Reset() {
	*x = TradeCancelForNextsharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCancelForNextsharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCancelForNextsharesTrades) ProtoMessage() {}

func (x *TradeCancelForNextsharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCancelForNextsharesTrades.ProtoReflect.Descriptor instead.
func (*TradeCancelForNextsharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{14}
}

func (x *TradeCancelForNextsharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeCancelForNextsharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *TradeCancelForNextsharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeCancelForNextsharesTrades) GetOriginalTradeControlNumber() string {
	if x != nil && x.OriginalTradeControlNumber != nil {
		return *x.OriginalTradeControlNumber
	}
	return ""
}

func (x *TradeCancelForNextsharesTrades) GetOriginalProxyPrice() float64 {
	if x != nil && x.OriginalProxyPrice != nil {
		return *x.OriginalProxyPrice
	}
	return 0
}

func (x *TradeCancelForNextsharesTrades) GetOriginalNAVOffsetAmount() float64 {
	if x != nil && x.OriginalNAVOffsetAmount != nil {
		return *x.OriginalNAVOffsetAmount
	}
	return 0
}

func (x *TradeCancelForNextsharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *TradeCancelForNextsharesTrades) GetOriginalSaleConditionModifier() string {
	if x != nil && x.OriginalSaleConditionModifier != nil {
		return *x.OriginalSaleConditionModifier
	}
	return ""
}

func (x *TradeCancelForNextsharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type TradeCancelForNonNextSharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier        *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                   *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                 *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalControlNumber         *string                            `protobuf:"bytes,4,opt,name=originalControlNumber,proto3,oneof" json:"originalControlNumber,omitempty"`
	OriginalTradePrice            *float64                           `protobuf:"fixed64,5,opt,name=originalTradePrice,proto3,oneof" json:"originalTradePrice,omitempty"`
	OriginalTradeSize             *int64                             `protobuf:"varint,6,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalSaleConditionModifier *SaleConditionModifier             `protobuf:"bytes,7,opt,name=originalSaleConditionModifier,proto3,oneof" json:"originalSaleConditionModifier,omitempty"`
	ConsolidatedVolume            *int64                             `protobuf:"varint,8,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeCancelForNonNextSharesTrades) Reset() {
	*x = TradeCancelForNonNextSharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCancelForNonNextSharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCancelForNonNextSharesTrades) ProtoMessage() {}

func (x *TradeCancelForNonNextSharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCancelForNonNextSharesTrades.ProtoReflect.Descriptor instead.
func (*TradeCancelForNonNextSharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{15}
}

func (x *TradeCancelForNonNextSharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeCancelForNonNextSharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *TradeCancelForNonNextSharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeCancelForNonNextSharesTrades) GetOriginalControlNumber() string {
	if x != nil && x.OriginalControlNumber != nil {
		return *x.OriginalControlNumber
	}
	return ""
}

func (x *TradeCancelForNonNextSharesTrades) GetOriginalTradePrice() float64 {
	if x != nil && x.OriginalTradePrice != nil {
		return *x.OriginalTradePrice
	}
	return 0
}

func (x *TradeCancelForNonNextSharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *TradeCancelForNonNextSharesTrades) GetOriginalSaleConditionModifier() *SaleConditionModifier {
	if x != nil {
		return x.OriginalSaleConditionModifier
	}
	return nil
}

func (x *TradeCancelForNonNextSharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type TradeCorrectionForNextsharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier         *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                    *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                  *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalControlNumber          *string                            `protobuf:"bytes,4,opt,name=originalControlNumber,proto3,oneof" json:"originalControlNumber,omitempty"`
	OriginalProxyPrice             *float64                           `protobuf:"fixed64,5,opt,name=originalProxyPrice,proto3,oneof" json:"originalProxyPrice,omitempty"`
	OriginalNAVOffsetAmount        *float64                           `protobuf:"fixed64,6,opt,name=originalNAVOffsetAmount,proto3,oneof" json:"originalNAVOffsetAmount,omitempty"`
	OriginalTradeSize              *int64                             `protobuf:"varint,7,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalConditionModifier      *string                            `protobuf:"bytes,8,opt,name=originalConditionModifier,proto3,oneof" json:"originalConditionModifier,omitempty"`
	CorrectedTradeControlNumber    *string                            `protobuf:"bytes,9,opt,name=correctedTradeControlNumber,proto3,oneof" json:"correctedTradeControlNumber,omitempty"`
	CorrectedTradePrice            *float64                           `protobuf:"fixed64,10,opt,name=correctedTradePrice,proto3,oneof" json:"correctedTradePrice,omitempty"`
	CorrectedNAVOffsetAmount       *float64                           `protobuf:"fixed64,11,opt,name=correctedNAVOffsetAmount,proto3,oneof" json:"correctedNAVOffsetAmount,omitempty"`
	CorrectedTradeSize             *int64                             `protobuf:"varint,12,opt,name=CorrectedTradeSize,proto3,oneof" json:"CorrectedTradeSize,omitempty"`
	CorrectedSaleConditionModifier *string                            `protobuf:"bytes,13,opt,name=CorrectedSaleConditionModifier,proto3,oneof" json:"CorrectedSaleConditionModifier,omitempty"`
	ConsolidatedVolume             *int64                             `protobuf:"varint,14,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeCorrectionForNextsharesTrades) Reset() {
	*x = TradeCorrectionForNextsharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCorrectionForNextsharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCorrectionForNextsharesTrades) ProtoMessage() {}

func (x *TradeCorrectionForNextsharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCorrectionForNextsharesTrades.ProtoReflect.Descriptor instead.
func (*TradeCorrectionForNextsharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{16}
}

func (x *TradeCorrectionForNextsharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeCorrectionForNextsharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *TradeCorrectionForNextsharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeCorrectionForNextsharesTrades) GetOriginalControlNumber() string {
	if x != nil && x.OriginalControlNumber != nil {
		return *x.OriginalControlNumber
	}
	return ""
}

func (x *TradeCorrectionForNextsharesTrades) GetOriginalProxyPrice() float64 {
	if x != nil && x.OriginalProxyPrice != nil {
		return *x.OriginalProxyPrice
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetOriginalNAVOffsetAmount() float64 {
	if x != nil && x.OriginalNAVOffsetAmount != nil {
		return *x.OriginalNAVOffsetAmount
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetOriginalConditionModifier() string {
	if x != nil && x.OriginalConditionModifier != nil {
		return *x.OriginalConditionModifier
	}
	return ""
}

func (x *TradeCorrectionForNextsharesTrades) GetCorrectedTradeControlNumber() string {
	if x != nil && x.CorrectedTradeControlNumber != nil {
		return *x.CorrectedTradeControlNumber
	}
	return ""
}

func (x *TradeCorrectionForNextsharesTrades) GetCorrectedTradePrice() float64 {
	if x != nil && x.CorrectedTradePrice != nil {
		return *x.CorrectedTradePrice
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetCorrectedNAVOffsetAmount() float64 {
	if x != nil && x.CorrectedNAVOffsetAmount != nil {
		return *x.CorrectedNAVOffsetAmount
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetCorrectedTradeSize() int64 {
	if x != nil && x.CorrectedTradeSize != nil {
		return *x.CorrectedTradeSize
	}
	return 0
}

func (x *TradeCorrectionForNextsharesTrades) GetCorrectedSaleConditionModifier() string {
	if x != nil && x.CorrectedSaleConditionModifier != nil {
		return *x.CorrectedSaleConditionModifier
	}
	return ""
}

func (x *TradeCorrectionForNextsharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type TradeCorrectionForNonNextsharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier         *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                    *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                  *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalControlNumber          *string                            `protobuf:"bytes,4,opt,name=originalControlNumber,proto3,oneof" json:"originalControlNumber,omitempty"`
	OriginalTradePrice             *float64                           `protobuf:"fixed64,5,opt,name=originalTradePrice,proto3,oneof" json:"originalTradePrice,omitempty"`
	OriginalTradeSize              *int64                             `protobuf:"varint,6,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalConditionModifier      *string                            `protobuf:"bytes,7,opt,name=originalConditionModifier,proto3,oneof" json:"originalConditionModifier,omitempty"`
	CorrectedTradeControlNumber    *string                            `protobuf:"bytes,8,opt,name=correctedTradeControlNumber,proto3,oneof" json:"correctedTradeControlNumber,omitempty"`
	CorrectedTradePrice            *float64                           `protobuf:"fixed64,9,opt,name=correctedTradePrice,proto3,oneof" json:"correctedTradePrice,omitempty"`
	CorrectedTradeSize             *int64                             `protobuf:"varint,10,opt,name=CorrectedTradeSize,proto3,oneof" json:"CorrectedTradeSize,omitempty"`
	CorrectedSaleConditionModifier *string                            `protobuf:"bytes,11,opt,name=CorrectedSaleConditionModifier,proto3,oneof" json:"CorrectedSaleConditionModifier,omitempty"`
	ConsolidatedVolume             *int64                             `protobuf:"varint,12,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeCorrectionForNonNextsharesTrades) Reset() {
	*x = TradeCorrectionForNonNextsharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCorrectionForNonNextsharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCorrectionForNonNextsharesTrades) ProtoMessage() {}

func (x *TradeCorrectionForNonNextsharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCorrectionForNonNextsharesTrades.ProtoReflect.Descriptor instead.
func (*TradeCorrectionForNonNextsharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{17}
}

func (x *TradeCorrectionForNonNextsharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeCorrectionForNonNextsharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *TradeCorrectionForNonNextsharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeCorrectionForNonNextsharesTrades) GetOriginalControlNumber() string {
	if x != nil && x.OriginalControlNumber != nil {
		return *x.OriginalControlNumber
	}
	return ""
}

func (x *TradeCorrectionForNonNextsharesTrades) GetOriginalTradePrice() float64 {
	if x != nil && x.OriginalTradePrice != nil {
		return *x.OriginalTradePrice
	}
	return 0
}

func (x *TradeCorrectionForNonNextsharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *TradeCorrectionForNonNextsharesTrades) GetOriginalConditionModifier() string {
	if x != nil && x.OriginalConditionModifier != nil {
		return *x.OriginalConditionModifier
	}
	return ""
}

func (x *TradeCorrectionForNonNextsharesTrades) GetCorrectedTradeControlNumber() string {
	if x != nil && x.CorrectedTradeControlNumber != nil {
		return *x.CorrectedTradeControlNumber
	}
	return ""
}

func (x *TradeCorrectionForNonNextsharesTrades) GetCorrectedTradePrice() float64 {
	if x != nil && x.CorrectedTradePrice != nil {
		return *x.CorrectedTradePrice
	}
	return 0
}

func (x *TradeCorrectionForNonNextsharesTrades) GetCorrectedTradeSize() int64 {
	if x != nil && x.CorrectedTradeSize != nil {
		return *x.CorrectedTradeSize
	}
	return 0
}

func (x *TradeCorrectionForNonNextsharesTrades) GetCorrectedSaleConditionModifier() string {
	if x != nil && x.CorrectedSaleConditionModifier != nil {
		return *x.CorrectedSaleConditionModifier
	}
	return ""
}

func (x *TradeCorrectionForNonNextsharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type TradeReportForNextshares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatingMarketCenterIdentifier *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=originatingMarketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"originatingMarketCenterIdentifier,omitempty"`
	NextsharesSymbol                  *string                            `protobuf:"bytes,2,opt,name=nextsharesSymbol,proto3,oneof" json:"nextsharesSymbol,omitempty"`
	SecurityClass                     *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	TradeControlNumber                *string                            `protobuf:"bytes,4,opt,name=tradeControlNumber,proto3,oneof" json:"tradeControlNumber,omitempty"`
	ProxyPrice                        *float64                           `protobuf:"fixed64,5,opt,name=proxyPrice,proto3,oneof" json:"proxyPrice,omitempty"`
	TradeSize                         *int64                             `protobuf:"varint,6,opt,name=tradeSize,proto3,oneof" json:"tradeSize,omitempty"`
	NAVOffsetAmount                   *float64                           `protobuf:"fixed64,7,opt,name=NAVOffsetAmount,proto3,oneof" json:"NAVOffsetAmount,omitempty"`
	SaleConditionModifier             *SaleConditionModifier             `protobuf:"bytes,8,opt,name=saleConditionModifier,proto3,oneof" json:"saleConditionModifier,omitempty"`
	ConsolidatedVolume                *int32                             `protobuf:"varint,9,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeReportForNextshares) Reset() {
	*x = TradeReportForNextshares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeReportForNextshares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeReportForNextshares) ProtoMessage() {}

func (x *TradeReportForNextshares) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeReportForNextshares.ProtoReflect.Descriptor instead.
func (*TradeReportForNextshares) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{18}
}

func (x *TradeReportForNextshares) GetOriginatingMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.OriginatingMarketCenterIdentifier != nil {
		return *x.OriginatingMarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeReportForNextshares) GetNextsharesSymbol() string {
	if x != nil && x.NextsharesSymbol != nil {
		return *x.NextsharesSymbol
	}
	return ""
}

func (x *TradeReportForNextshares) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeReportForNextshares) GetTradeControlNumber() string {
	if x != nil && x.TradeControlNumber != nil {
		return *x.TradeControlNumber
	}
	return ""
}

func (x *TradeReportForNextshares) GetProxyPrice() float64 {
	if x != nil && x.ProxyPrice != nil {
		return *x.ProxyPrice
	}
	return 0
}

func (x *TradeReportForNextshares) GetTradeSize() int64 {
	if x != nil && x.TradeSize != nil {
		return *x.TradeSize
	}
	return 0
}

func (x *TradeReportForNextshares) GetNAVOffsetAmount() float64 {
	if x != nil && x.NAVOffsetAmount != nil {
		return *x.NAVOffsetAmount
	}
	return 0
}

func (x *TradeReportForNextshares) GetSaleConditionModifier() *SaleConditionModifier {
	if x != nil {
		return x.SaleConditionModifier
	}
	return nil
}

func (x *TradeReportForNextshares) GetConsolidatedVolume() int32 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type TradeReportForNonNextshares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatingMarketCenterIdentifier *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=originatingMarketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"originatingMarketCenterIdentifier,omitempty"`
	IssueSymbol                       *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                     *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	TradeControlNumber                *string                            `protobuf:"bytes,4,opt,name=tradeControlNumber,proto3,oneof" json:"tradeControlNumber,omitempty"`
	TradePrice                        *float64                           `protobuf:"fixed64,5,opt,name=tradePrice,proto3,oneof" json:"tradePrice,omitempty"`
	TradeSize                         *int64                             `protobuf:"varint,6,opt,name=tradeSize,proto3,oneof" json:"tradeSize,omitempty"`
	SaleConditionModifier             *SaleConditionModifier             `protobuf:"bytes,7,opt,name=saleConditionModifier,proto3,oneof" json:"saleConditionModifier,omitempty"`
	ConsolidatedVolume                *int64                             `protobuf:"varint,8,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *TradeReportForNonNextshares) Reset() {
	*x = TradeReportForNonNextshares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeReportForNonNextshares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeReportForNonNextshares) ProtoMessage() {}

func (x *TradeReportForNonNextshares) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeReportForNonNextshares.ProtoReflect.Descriptor instead.
func (*TradeReportForNonNextshares) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{19}
}

func (x *TradeReportForNonNextshares) GetOriginatingMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.OriginatingMarketCenterIdentifier != nil {
		return *x.OriginatingMarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *TradeReportForNonNextshares) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *TradeReportForNonNextshares) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *TradeReportForNonNextshares) GetTradeControlNumber() string {
	if x != nil && x.TradeControlNumber != nil {
		return *x.TradeControlNumber
	}
	return ""
}

func (x *TradeReportForNonNextshares) GetTradePrice() float64 {
	if x != nil && x.TradePrice != nil {
		return *x.TradePrice
	}
	return 0
}

func (x *TradeReportForNonNextshares) GetTradeSize() int64 {
	if x != nil && x.TradeSize != nil {
		return *x.TradeSize
	}
	return 0
}

func (x *TradeReportForNonNextshares) GetSaleConditionModifier() *SaleConditionModifier {
	if x != nil {
		return x.SaleConditionModifier
	}
	return nil
}

func (x *TradeReportForNonNextshares) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type QBBOMWCBBreachMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreachedLevel *string `protobuf:"bytes,1,opt,name=breachedLevel,proto3,oneof" json:"breachedLevel,omitempty"`
}

func (x *QBBOMWCBBreachMessage) Reset() {
	*x = QBBOMWCBBreachMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOMWCBBreachMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOMWCBBreachMessage) ProtoMessage() {}

func (x *QBBOMWCBBreachMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOMWCBBreachMessage.ProtoReflect.Descriptor instead.
func (*QBBOMWCBBreachMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{20}
}

func (x *QBBOMWCBBreachMessage) GetBreachedLevel() string {
	if x != nil && x.BreachedLevel != nil {
		return *x.BreachedLevel
	}
	return ""
}

type QBBOMWCBDeclineLevelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level1 *float64 `protobuf:"fixed64,1,opt,name=Level1,proto3,oneof" json:"Level1,omitempty"`
	Level2 *float64 `protobuf:"fixed64,2,opt,name=Level2,proto3,oneof" json:"Level2,omitempty"`
	Level3 *float64 `protobuf:"fixed64,3,opt,name=Level3,proto3,oneof" json:"Level3,omitempty"`
}

func (x *QBBOMWCBDeclineLevelMessage) Reset() {
	*x = QBBOMWCBDeclineLevelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOMWCBDeclineLevelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOMWCBDeclineLevelMessage) ProtoMessage() {}

func (x *QBBOMWCBDeclineLevelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOMWCBDeclineLevelMessage.ProtoReflect.Descriptor instead.
func (*QBBOMWCBDeclineLevelMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{21}
}

func (x *QBBOMWCBDeclineLevelMessage) GetLevel1() float64 {
	if x != nil && x.Level1 != nil {
		return *x.Level1
	}
	return 0
}

func (x *QBBOMWCBDeclineLevelMessage) GetLevel2() float64 {
	if x != nil && x.Level2 != nil {
		return *x.Level2
	}
	return 0
}

func (x *QBBOMWCBDeclineLevelMessage) GetLevel3() float64 {
	if x != nil && x.Level3 != nil {
		return *x.Level3
	}
	return 0
}

type QBBOMessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType    *QBBOMessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=QBBOMessageType,oneof" json:"messageType,omitempty"`
	TrackingNumber *int32           `protobuf:"varint,2,opt,name=trackingNumber,proto3,oneof" json:"trackingNumber,omitempty"`
	Timestamp      *int64           `protobuf:"varint,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *QBBOMessageHeader) Reset() {
	*x = QBBOMessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOMessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOMessageHeader) ProtoMessage() {}

func (x *QBBOMessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOMessageHeader.ProtoReflect.Descriptor instead.
func (*QBBOMessageHeader) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{22}
}

func (x *QBBOMessageHeader) GetMessageType() QBBOMessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return QBBOMessageType_QBBOMessageType_STOCK_DIRECTORY_MESSAGE
}

func (x *QBBOMessageHeader) GetTrackingNumber() int32 {
	if x != nil && x.TrackingNumber != nil {
		return *x.TrackingNumber
	}
	return 0
}

func (x *QBBOMessageHeader) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type QBBONextSharesQuotationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextsharesSymbol              *string        `protobuf:"bytes,1,opt,name=nextsharesSymbol,proto3,oneof" json:"nextsharesSymbol,omitempty"`
	SecurityClass                 *SecurityClass `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	NasdaqBestBid                 *float64       `protobuf:"fixed64,3,opt,name=nasdaqBestBid,proto3,oneof" json:"nasdaqBestBid,omitempty"`
	NasdaqBestBidSize             *int64         `protobuf:"varint,4,opt,name=nasdaqBestBidSize,proto3,oneof" json:"nasdaqBestBidSize,omitempty"`
	NasdaqBestBidDiscountAmount   *float64       `protobuf:"fixed64,5,opt,name=nasdaqBestBidDiscountAmount,proto3,oneof" json:"nasdaqBestBidDiscountAmount,omitempty"`
	NasdaqBestOfferProxyPrice     *float64       `protobuf:"fixed64,6,opt,name=nasdaqBestOfferProxyPrice,proto3,oneof" json:"nasdaqBestOfferProxyPrice,omitempty"`
	NasdaqBestOfferSize           *int64         `protobuf:"varint,7,opt,name=nasdaqBestOfferSize,proto3,oneof" json:"nasdaqBestOfferSize,omitempty"`
	NasdaqBestOfferDiscountAmount *float64       `protobuf:"fixed64,8,opt,name=nasdaqBestOfferDiscountAmount,proto3,oneof" json:"nasdaqBestOfferDiscountAmount,omitempty"`
}

func (x *QBBONextSharesQuotationMessage) Reset() {
	*x = QBBONextSharesQuotationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBONextSharesQuotationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBONextSharesQuotationMessage) ProtoMessage() {}

func (x *QBBONextSharesQuotationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBONextSharesQuotationMessage.ProtoReflect.Descriptor instead.
func (*QBBONextSharesQuotationMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{23}
}

func (x *QBBONextSharesQuotationMessage) GetNextsharesSymbol() string {
	if x != nil && x.NextsharesSymbol != nil {
		return *x.NextsharesSymbol
	}
	return ""
}

func (x *QBBONextSharesQuotationMessage) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestBid() float64 {
	if x != nil && x.NasdaqBestBid != nil {
		return *x.NasdaqBestBid
	}
	return 0
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestBidSize() int64 {
	if x != nil && x.NasdaqBestBidSize != nil {
		return *x.NasdaqBestBidSize
	}
	return 0
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestBidDiscountAmount() float64 {
	if x != nil && x.NasdaqBestBidDiscountAmount != nil {
		return *x.NasdaqBestBidDiscountAmount
	}
	return 0
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestOfferProxyPrice() float64 {
	if x != nil && x.NasdaqBestOfferProxyPrice != nil {
		return *x.NasdaqBestOfferProxyPrice
	}
	return 0
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestOfferSize() int64 {
	if x != nil && x.NasdaqBestOfferSize != nil {
		return *x.NasdaqBestOfferSize
	}
	return 0
}

func (x *QBBONextSharesQuotationMessage) GetNasdaqBestOfferDiscountAmount() float64 {
	if x != nil && x.NasdaqBestOfferDiscountAmount != nil {
		return *x.NasdaqBestOfferDiscountAmount
	}
	return 0
}

type QBBOOperationalHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                 *string     `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	MarketCode            *MarketCode `protobuf:"varint,2,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	OperationalHaltAction *HaltAction `protobuf:"varint,3,opt,name=operationalHaltAction,proto3,enum=HaltAction,oneof" json:"operationalHaltAction,omitempty"`
}

func (x *QBBOOperationalHalt) Reset() {
	*x = QBBOOperationalHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOOperationalHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOOperationalHalt) ProtoMessage() {}

func (x *QBBOOperationalHalt) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOOperationalHalt.ProtoReflect.Descriptor instead.
func (*QBBOOperationalHalt) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{24}
}

func (x *QBBOOperationalHalt) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBOOperationalHalt) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *QBBOOperationalHalt) GetOperationalHaltAction() HaltAction {
	if x != nil && x.OperationalHaltAction != nil {
		return *x.OperationalHaltAction
	}
	return HaltAction_HaltAction_OPERATIONALLY_HALTED_ON_THE_IDENTIFIED_MARKET
}

type QBBOQuotationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                *string        `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	SecurityClass        *SecurityClass `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	NasdaqBestBidPrice   *float64       `protobuf:"fixed64,3,opt,name=nasdaqBestBidPrice,proto3,oneof" json:"nasdaqBestBidPrice,omitempty"`
	NasdaqBestBidSize    *int64         `protobuf:"varint,4,opt,name=nasdaqBestBidSize,proto3,oneof" json:"nasdaqBestBidSize,omitempty"`
	NasdaqBestOfferPrice *float64       `protobuf:"fixed64,5,opt,name=nasdaqBestOfferPrice,proto3,oneof" json:"nasdaqBestOfferPrice,omitempty"`
	NasdaqBestOfferSize  *int64         `protobuf:"varint,6,opt,name=nasdaqBestOfferSize,proto3,oneof" json:"nasdaqBestOfferSize,omitempty"`
}

func (x *QBBOQuotationMessage) Reset() {
	*x = QBBOQuotationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOQuotationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOQuotationMessage) ProtoMessage() {}

func (x *QBBOQuotationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOQuotationMessage.ProtoReflect.Descriptor instead.
func (*QBBOQuotationMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{25}
}

func (x *QBBOQuotationMessage) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBOQuotationMessage) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *QBBOQuotationMessage) GetNasdaqBestBidPrice() float64 {
	if x != nil && x.NasdaqBestBidPrice != nil {
		return *x.NasdaqBestBidPrice
	}
	return 0
}

func (x *QBBOQuotationMessage) GetNasdaqBestBidSize() int64 {
	if x != nil && x.NasdaqBestBidSize != nil {
		return *x.NasdaqBestBidSize
	}
	return 0
}

func (x *QBBOQuotationMessage) GetNasdaqBestOfferPrice() float64 {
	if x != nil && x.NasdaqBestOfferPrice != nil {
		return *x.NasdaqBestOfferPrice
	}
	return 0
}

func (x *QBBOQuotationMessage) GetNasdaqBestOfferSize() int64 {
	if x != nil && x.NasdaqBestOfferSize != nil {
		return *x.NasdaqBestOfferSize
	}
	return 0
}

type QBBORegShoRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock        *string       `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	RegSHOAction *RegSHOAction `protobuf:"varint,2,opt,name=regSHOAction,proto3,enum=RegSHOAction,oneof" json:"regSHOAction,omitempty"`
}

func (x *QBBORegShoRestriction) Reset() {
	*x = QBBORegShoRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBORegShoRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBORegShoRestriction) ProtoMessage() {}

func (x *QBBORegShoRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBORegShoRestriction.ProtoReflect.Descriptor instead.
func (*QBBORegShoRestriction) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{26}
}

func (x *QBBORegShoRestriction) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBORegShoRestriction) GetRegSHOAction() RegSHOAction {
	if x != nil && x.RegSHOAction != nil {
		return *x.RegSHOAction
	}
	return RegSHOAction_RegSHOAction_NO_PRICE_TEST_IN_PLACE
}

type QBBOStockDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                       *string                   `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	MarketCategory              *MarketCategory           `protobuf:"varint,2,opt,name=marketCategory,proto3,enum=MarketCategory,oneof" json:"marketCategory,omitempty"`
	FinancialStatusIndicator    *FinancialStatusIndicator `protobuf:"varint,3,opt,name=financialStatusIndicator,proto3,enum=FinancialStatusIndicator,oneof" json:"financialStatusIndicator,omitempty"`
	RoundLotsize                *int64                    `protobuf:"varint,4,opt,name=roundLotsize,proto3,oneof" json:"roundLotsize,omitempty"`
	RoundLotOnly                *IndicatesIf              `protobuf:"varint,5,opt,name=roundLotOnly,proto3,enum=IndicatesIf,oneof" json:"roundLotOnly,omitempty"`
	IssueClassification         *string                   `protobuf:"bytes,6,opt,name=issueClassification,proto3,oneof" json:"issueClassification,omitempty"`
	IssueSubType                *string                   `protobuf:"bytes,7,opt,name=issueSubType,proto3,oneof" json:"issueSubType,omitempty"`
	Authenticity                *Authenticity             `protobuf:"varint,8,opt,name=authenticity,proto3,enum=Authenticity,oneof" json:"authenticity,omitempty"`
	ShortSaleThresholdIndicator *IndicatesIf              `protobuf:"varint,9,opt,name=shortSaleThresholdIndicator,proto3,enum=IndicatesIf,oneof" json:"shortSaleThresholdIndicator,omitempty"`
	IPOFlag                     *IndicatesIf              `protobuf:"varint,10,opt,name=IPOFlag,proto3,enum=IndicatesIf,oneof" json:"IPOFlag,omitempty"`
	LULDReferencePriceTier      *LULDRule                 `protobuf:"varint,11,opt,name=lULDReferencePriceTier,proto3,enum=LULDRule,oneof" json:"lULDReferencePriceTier,omitempty"`
	ETPlag                      *IndicatesIf              `protobuf:"varint,12,opt,name=ETPlag,proto3,enum=IndicatesIf,oneof" json:"ETPlag,omitempty"`
	ETPLeverageFactor           *int64                    `protobuf:"varint,13,opt,name=ETPLeverageFactor,proto3,oneof" json:"ETPLeverageFactor,omitempty"`
	InverseIndicator            *IndicatesIf              `protobuf:"varint,14,opt,name=inverseIndicator,proto3,enum=IndicatesIf,oneof" json:"inverseIndicator,omitempty"`
}

func (x *QBBOStockDirectory) Reset() {
	*x = QBBOStockDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOStockDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOStockDirectory) ProtoMessage() {}

func (x *QBBOStockDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOStockDirectory.ProtoReflect.Descriptor instead.
func (*QBBOStockDirectory) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{27}
}

func (x *QBBOStockDirectory) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBOStockDirectory) GetMarketCategory() MarketCategory {
	if x != nil && x.MarketCategory != nil {
		return *x.MarketCategory
	}
	return MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM
}

func (x *QBBOStockDirectory) GetFinancialStatusIndicator() FinancialStatusIndicator {
	if x != nil && x.FinancialStatusIndicator != nil {
		return *x.FinancialStatusIndicator
	}
	return FinancialStatusIndicator_FinancialStatusIndicator_DEFICIENT
}

func (x *QBBOStockDirectory) GetRoundLotsize() int64 {
	if x != nil && x.RoundLotsize != nil {
		return *x.RoundLotsize
	}
	return 0
}

func (x *QBBOStockDirectory) GetRoundLotOnly() IndicatesIf {
	if x != nil && x.RoundLotOnly != nil {
		return *x.RoundLotOnly
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *QBBOStockDirectory) GetIssueClassification() string {
	if x != nil && x.IssueClassification != nil {
		return *x.IssueClassification
	}
	return ""
}

func (x *QBBOStockDirectory) GetIssueSubType() string {
	if x != nil && x.IssueSubType != nil {
		return *x.IssueSubType
	}
	return ""
}

func (x *QBBOStockDirectory) GetAuthenticity() Authenticity {
	if x != nil && x.Authenticity != nil {
		return *x.Authenticity
	}
	return Authenticity_Authenticity_LIVE_PRODUCTION
}

func (x *QBBOStockDirectory) GetShortSaleThresholdIndicator() IndicatesIf {
	if x != nil && x.ShortSaleThresholdIndicator != nil {
		return *x.ShortSaleThresholdIndicator
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *QBBOStockDirectory) GetIPOFlag() IndicatesIf {
	if x != nil && x.IPOFlag != nil {
		return *x.IPOFlag
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *QBBOStockDirectory) GetLULDReferencePriceTier() LULDRule {
	if x != nil && x.LULDReferencePriceTier != nil {
		return *x.LULDReferencePriceTier
	}
	return LULDRule_LULDRule_NMS_STOCKS_AND_SELECT_ETPS
}

func (x *QBBOStockDirectory) GetETPlag() IndicatesIf {
	if x != nil && x.ETPlag != nil {
		return *x.ETPlag
	}
	return IndicatesIf_IndicatesIf_Y
}

func (x *QBBOStockDirectory) GetETPLeverageFactor() int64 {
	if x != nil && x.ETPLeverageFactor != nil {
		return *x.ETPLeverageFactor
	}
	return 0
}

func (x *QBBOStockDirectory) GetInverseIndicator() IndicatesIf {
	if x != nil && x.InverseIndicator != nil {
		return *x.InverseIndicator
	}
	return IndicatesIf_IndicatesIf_Y
}

type QBBOStockTradingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock               *string              `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	SecurityClass       *SecurityClass       `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	CurrentTradingState *CurrentTradingState `protobuf:"varint,3,opt,name=currentTradingState,proto3,enum=CurrentTradingState,oneof" json:"currentTradingState,omitempty"`
	Reason              *string              `protobuf:"bytes,4,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *QBBOStockTradingAction) Reset() {
	*x = QBBOStockTradingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOStockTradingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOStockTradingAction) ProtoMessage() {}

func (x *QBBOStockTradingAction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOStockTradingAction.ProtoReflect.Descriptor instead.
func (*QBBOStockTradingAction) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{28}
}

func (x *QBBOStockTradingAction) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBOStockTradingAction) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *QBBOStockTradingAction) GetCurrentTradingState() CurrentTradingState {
	if x != nil && x.CurrentTradingState != nil {
		return *x.CurrentTradingState
	}
	return CurrentTradingState_CurrentTradingState_HALT_IN_EFFECT
}

func (x *QBBOStockTradingAction) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type QBBOSystemEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCode *EventCode `protobuf:"varint,1,opt,name=eventCode,proto3,enum=EventCode,oneof" json:"eventCode,omitempty"`
}

func (x *QBBOSystemEventMessage) Reset() {
	*x = QBBOSystemEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOSystemEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOSystemEventMessage) ProtoMessage() {}

func (x *QBBOSystemEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOSystemEventMessage.ProtoReflect.Descriptor instead.
func (*QBBOSystemEventMessage) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{29}
}

func (x *QBBOSystemEventMessage) GetEventCode() EventCode {
	if x != nil && x.EventCode != nil {
		return *x.EventCode
	}
	return EventCode_EventCode_START_OF_TRANSMISSIONS
}

type AddOddLotOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	OrderId      *int64   `protobuf:"varint,2,opt,name=orderId,proto3,oneof" json:"orderId,omitempty"`
	Price        *float64 `protobuf:"fixed64,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Quantity     *int64   `protobuf:"varint,4,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	BrokerID     *int32   `protobuf:"varint,5,opt,name=brokerID,proto3,oneof" json:"brokerID,omitempty"`
	Side         *Side    `protobuf:"varint,6,opt,name=side,proto3,enum=Side,oneof" json:"side,omitempty"`
}

func (x *AddOddLotOrder) Reset() {
	*x = AddOddLotOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOddLotOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOddLotOrder) ProtoMessage() {}

func (x *AddOddLotOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOddLotOrder.ProtoReflect.Descriptor instead.
func (*AddOddLotOrder) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{30}
}

func (x *AddOddLotOrder) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *AddOddLotOrder) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *AddOddLotOrder) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AddOddLotOrder) GetQuantity() int64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *AddOddLotOrder) GetBrokerID() int32 {
	if x != nil && x.BrokerID != nil {
		return *x.BrokerID
	}
	return 0
}

func (x *AddOddLotOrder) GetSide() Side {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Side_Side_BID
}

type AggregateOrderBookUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64     `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	NoEntries    []*NoEntry `protobuf:"bytes,2,rep,name=noEntries,proto3" json:"noEntries,omitempty"`
}

func (x *AggregateOrderBookUpdate) Reset() {
	*x = AggregateOrderBookUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateOrderBookUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateOrderBookUpdate) ProtoMessage() {}

func (x *AggregateOrderBookUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateOrderBookUpdate.ProtoReflect.Descriptor instead.
func (*AggregateOrderBookUpdate) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{31}
}

func (x *AggregateOrderBookUpdate) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *AggregateOrderBookUpdate) GetNoEntries() []*NoEntry {
	if x != nil {
		return x.NoEntries
	}
	return nil
}

type BQMoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *int32         `protobuf:"varint,1,opt,name=item,proto3,oneof" json:"item,omitempty"`
	Type *IndicatesType `protobuf:"varint,2,opt,name=type,proto3,enum=IndicatesType,oneof" json:"type,omitempty"`
}

func (x *BQMoreItem) Reset() {
	*x = BQMoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BQMoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BQMoreItem) ProtoMessage() {}

func (x *BQMoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BQMoreItem.ProtoReflect.Descriptor instead.
func (*BQMoreItem) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{32}
}

func (x *BQMoreItem) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return 0
}

func (x *BQMoreItem) GetType() IndicatesType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IndicatesType_IndicatesType_BROKERNUMBER
}

type BrokerQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64        `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	ItemCount    *int32        `protobuf:"varint,2,opt,name=itemCount,proto3,oneof" json:"itemCount,omitempty"`
	Side         *BrokerSide   `protobuf:"varint,3,opt,name=side,proto3,enum=BrokerSide,oneof" json:"side,omitempty"`
	BQMoreFlag   *BQMoreFlag   `protobuf:"varint,4,opt,name=bQMoreFlag,proto3,enum=BQMoreFlag,oneof" json:"bQMoreFlag,omitempty"`
	Items        []*BQMoreItem `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BrokerQueue) Reset() {
	*x = BrokerQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerQueue) ProtoMessage() {}

func (x *BrokerQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerQueue.ProtoReflect.Descriptor instead.
func (*BrokerQueue) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{33}
}

func (x *BrokerQueue) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *BrokerQueue) GetItemCount() int32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *BrokerQueue) GetSide() BrokerSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return BrokerSide_BrokerSide_BUY
}

func (x *BrokerQueue) GetBQMoreFlag() BQMoreFlag {
	if x != nil && x.BQMoreFlag != nil {
		return *x.BQMoreFlag
	}
	return BQMoreFlag_BQMoreFlag_MORE_BROKER_NUMBERS_EXIST_IN_THE_QUEUE
}

func (x *BrokerQueue) GetItems() []*BQMoreItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ClosingPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode   *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	ClosingPrice   *float64 `protobuf:"fixed64,2,opt,name=closingPrice,proto3,oneof" json:"closingPrice,omitempty"`
	NumberOfTrades *int64   `protobuf:"varint,3,opt,name=numberOfTrades,proto3,oneof" json:"numberOfTrades,omitempty"`
}

func (x *ClosingPrice) Reset() {
	*x = ClosingPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosingPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosingPrice) ProtoMessage() {}

func (x *ClosingPrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosingPrice.ProtoReflect.Descriptor instead.
func (*ClosingPrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{34}
}

func (x *ClosingPrice) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *ClosingPrice) GetClosingPrice() float64 {
	if x != nil && x.ClosingPrice != nil {
		return *x.ClosingPrice
	}
	return 0
}

func (x *ClosingPrice) GetNumberOfTrades() int64 {
	if x != nil && x.NumberOfTrades != nil {
		return *x.NumberOfTrades
	}
	return 0
}

type CurrencyRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode   *CurrencyType `protobuf:"varint,1,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	CurrencyFactor *int32        `protobuf:"varint,2,opt,name=currencyFactor,proto3,oneof" json:"currencyFactor,omitempty"`
	CurrencyRate   *float64      `protobuf:"fixed64,3,opt,name=currencyRate,proto3,oneof" json:"currencyRate,omitempty"`
}

func (x *CurrencyRate) Reset() {
	*x = CurrencyRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRate) ProtoMessage() {}

func (x *CurrencyRate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRate.ProtoReflect.Descriptor instead.
func (*CurrencyRate) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{35}
}

func (x *CurrencyRate) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *CurrencyRate) GetCurrencyFactor() int32 {
	if x != nil && x.CurrencyFactor != nil {
		return *x.CurrencyFactor
	}
	return 0
}

func (x *CurrencyRate) GetCurrencyRate() float64 {
	if x != nil && x.CurrencyRate != nil {
		return *x.CurrencyRate
	}
	return 0
}

type DeleteOddLotOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	OrderId      *int64 `protobuf:"varint,2,opt,name=orderId,proto3,oneof" json:"orderId,omitempty"`
	BrokerID     *int32 `protobuf:"varint,3,opt,name=brokerID,proto3,oneof" json:"brokerID,omitempty"`
	Side         *Side  `protobuf:"varint,4,opt,name=side,proto3,enum=Side,oneof" json:"side,omitempty"`
}

func (x *DeleteOddLotOrder) Reset() {
	*x = DeleteOddLotOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOddLotOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOddLotOrder) ProtoMessage() {}

func (x *DeleteOddLotOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOddLotOrder.ProtoReflect.Descriptor instead.
func (*DeleteOddLotOrder) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteOddLotOrder) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *DeleteOddLotOrder) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *DeleteOddLotOrder) GetBrokerID() int32 {
	if x != nil && x.BrokerID != nil {
		return *x.BrokerID
	}
	return 0
}

func (x *DeleteOddLotOrder) GetSide() Side {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Side_Side_BID
}

type IndexData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexCode        *string      `protobuf:"bytes,1,opt,name=indexCode,proto3,oneof" json:"indexCode,omitempty"`
	IndexStatus      *IndexStatus `protobuf:"varint,2,opt,name=indexStatus,proto3,enum=IndexStatus,oneof" json:"indexStatus,omitempty"`
	IndexTime        *int64       `protobuf:"varint,3,opt,name=indexTime,proto3,oneof" json:"indexTime,omitempty"`
	IndexValue       *float64     `protobuf:"fixed64,4,opt,name=indexValue,proto3,oneof" json:"indexValue,omitempty"`
	NetChgPrevDay    *float64     `protobuf:"fixed64,5,opt,name=netChgPrevDay,proto3,oneof" json:"netChgPrevDay,omitempty"`
	HighValue        *float64     `protobuf:"fixed64,6,opt,name=highValue,proto3,oneof" json:"highValue,omitempty"`
	LowValue         *float64     `protobuf:"fixed64,7,opt,name=lowValue,proto3,oneof" json:"lowValue,omitempty"`
	EASValue         *float64     `protobuf:"fixed64,8,opt,name=eASValue,proto3,oneof" json:"eASValue,omitempty"`
	IndexTurnover    *float64     `protobuf:"fixed64,9,opt,name=indexTurnover,proto3,oneof" json:"indexTurnover,omitempty"`
	OpeningValue     *float64     `protobuf:"fixed64,10,opt,name=openingValue,proto3,oneof" json:"openingValue,omitempty"`
	ClosingValue     *float64     `protobuf:"fixed64,11,opt,name=closingValue,proto3,oneof" json:"closingValue,omitempty"`
	PreviousSesClose *float64     `protobuf:"fixed64,12,opt,name=previousSesClose,proto3,oneof" json:"previousSesClose,omitempty"`
	IndexVolume      *int64       `protobuf:"varint,13,opt,name=indexVolume,proto3,oneof" json:"indexVolume,omitempty"`
	NetChgPrevDayPct *float64     `protobuf:"fixed64,14,opt,name=netChgPrevDayPct,proto3,oneof" json:"netChgPrevDayPct,omitempty"`
	Exception        *string      `protobuf:"bytes,15,opt,name=exception,proto3,oneof" json:"exception,omitempty"`
}

func (x *IndexData) Reset() {
	*x = IndexData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexData) ProtoMessage() {}

func (x *IndexData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexData.ProtoReflect.Descriptor instead.
func (*IndexData) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{37}
}

func (x *IndexData) GetIndexCode() string {
	if x != nil && x.IndexCode != nil {
		return *x.IndexCode
	}
	return ""
}

func (x *IndexData) GetIndexStatus() IndexStatus {
	if x != nil && x.IndexStatus != nil {
		return *x.IndexStatus
	}
	return IndexStatus_IndexStatus_CLOSING_VALUE_I_INDICATIVE
}

func (x *IndexData) GetIndexTime() int64 {
	if x != nil && x.IndexTime != nil {
		return *x.IndexTime
	}
	return 0
}

func (x *IndexData) GetIndexValue() float64 {
	if x != nil && x.IndexValue != nil {
		return *x.IndexValue
	}
	return 0
}

func (x *IndexData) GetNetChgPrevDay() float64 {
	if x != nil && x.NetChgPrevDay != nil {
		return *x.NetChgPrevDay
	}
	return 0
}

func (x *IndexData) GetHighValue() float64 {
	if x != nil && x.HighValue != nil {
		return *x.HighValue
	}
	return 0
}

func (x *IndexData) GetLowValue() float64 {
	if x != nil && x.LowValue != nil {
		return *x.LowValue
	}
	return 0
}

func (x *IndexData) GetEASValue() float64 {
	if x != nil && x.EASValue != nil {
		return *x.EASValue
	}
	return 0
}

func (x *IndexData) GetIndexTurnover() float64 {
	if x != nil && x.IndexTurnover != nil {
		return *x.IndexTurnover
	}
	return 0
}

func (x *IndexData) GetOpeningValue() float64 {
	if x != nil && x.OpeningValue != nil {
		return *x.OpeningValue
	}
	return 0
}

func (x *IndexData) GetClosingValue() float64 {
	if x != nil && x.ClosingValue != nil {
		return *x.ClosingValue
	}
	return 0
}

func (x *IndexData) GetPreviousSesClose() float64 {
	if x != nil && x.PreviousSesClose != nil {
		return *x.PreviousSesClose
	}
	return 0
}

func (x *IndexData) GetIndexVolume() int64 {
	if x != nil && x.IndexVolume != nil {
		return *x.IndexVolume
	}
	return 0
}

func (x *IndexData) GetNetChgPrevDayPct() float64 {
	if x != nil && x.NetChgPrevDayPct != nil {
		return *x.NetChgPrevDayPct
	}
	return 0
}

func (x *IndexData) GetException() string {
	if x != nil && x.Exception != nil {
		return *x.Exception
	}
	return ""
}

type IndexDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexCode    *string       `protobuf:"bytes,1,opt,name=indexCode,proto3,oneof" json:"indexCode,omitempty"`
	IndexSource  *IndexSource  `protobuf:"varint,2,opt,name=indexSource,proto3,enum=IndexSource,oneof" json:"indexSource,omitempty"`
	CurrencyCode *CurrencyType `protobuf:"varint,3,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
}

func (x *IndexDefinition) Reset() {
	*x = IndexDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDefinition) ProtoMessage() {}

func (x *IndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDefinition.ProtoReflect.Descriptor instead.
func (*IndexDefinition) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{38}
}

func (x *IndexDefinition) GetIndexCode() string {
	if x != nil && x.IndexCode != nil {
		return *x.IndexCode
	}
	return ""
}

func (x *IndexDefinition) GetIndexSource() IndexSource {
	if x != nil && x.IndexSource != nil {
		return *x.IndexSource
	}
	return IndexSource_IndexSource_CSI_AND_CES
}

func (x *IndexDefinition) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

type IndicativeEquilibriumPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode      *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	Price             *float64 `protobuf:"fixed64,2,opt,name=price,proto3,oneof" json:"price,omitempty"`
	AggregateQuantity *int64   `protobuf:"varint,3,opt,name=aggregateQuantity,proto3,oneof" json:"aggregateQuantity,omitempty"`
}

func (x *IndicativeEquilibriumPrice) Reset() {
	*x = IndicativeEquilibriumPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicativeEquilibriumPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicativeEquilibriumPrice) ProtoMessage() {}

func (x *IndicativeEquilibriumPrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicativeEquilibriumPrice.ProtoReflect.Descriptor instead.
func (*IndicativeEquilibriumPrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{39}
}

func (x *IndicativeEquilibriumPrice) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *IndicativeEquilibriumPrice) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *IndicativeEquilibriumPrice) GetAggregateQuantity() int64 {
	if x != nil && x.AggregateQuantity != nil {
		return *x.AggregateQuantity
	}
	return 0
}

type LiquidityProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode         *int64                 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	NoLiquidityProviders []*NoLiquidityProvider `protobuf:"bytes,2,rep,name=noLiquidityProviders,proto3" json:"noLiquidityProviders,omitempty"`
}

func (x *LiquidityProvider) Reset() {
	*x = LiquidityProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvider) ProtoMessage() {}

func (x *LiquidityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvider.ProtoReflect.Descriptor instead.
func (*LiquidityProvider) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{40}
}

func (x *LiquidityProvider) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *LiquidityProvider) GetNoLiquidityProviders() []*NoLiquidityProvider {
	if x != nil {
		return x.NoLiquidityProviders
	}
	return nil
}

type MarketDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode         *MarketCode   `protobuf:"varint,1,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	MarketName         *string       `protobuf:"bytes,2,opt,name=marketName,proto3,oneof" json:"marketName,omitempty"`
	CurrencyCode       *CurrencyType `protobuf:"varint,3,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	NumberOfSecurities *int64        `protobuf:"varint,4,opt,name=numberOfSecurities,proto3,oneof" json:"numberOfSecurities,omitempty"`
}

func (x *MarketDefinition) Reset() {
	*x = MarketDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDefinition) ProtoMessage() {}

func (x *MarketDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDefinition.ProtoReflect.Descriptor instead.
func (*MarketDefinition) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{41}
}

func (x *MarketDefinition) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *MarketDefinition) GetMarketName() string {
	if x != nil && x.MarketName != nil {
		return *x.MarketName
	}
	return ""
}

func (x *MarketDefinition) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *MarketDefinition) GetNumberOfSecurities() int64 {
	if x != nil && x.NumberOfSecurities != nil {
		return *x.NumberOfSecurities
	}
	return 0
}

type MarketTurnover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode   *MarketCode   `protobuf:"varint,1,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	CurrencyCode *CurrencyType `protobuf:"varint,2,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	Turnover     *float64      `protobuf:"fixed64,3,opt,name=turnover,proto3,oneof" json:"turnover,omitempty"`
}

func (x *MarketTurnover) Reset() {
	*x = MarketTurnover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTurnover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTurnover) ProtoMessage() {}

func (x *MarketTurnover) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTurnover.ProtoReflect.Descriptor instead.
func (*MarketTurnover) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{42}
}

func (x *MarketTurnover) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *MarketTurnover) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *MarketTurnover) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

type News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsType        *NewsType         `protobuf:"varint,1,opt,name=newsType,proto3,enum=NewsType,oneof" json:"newsType,omitempty"`
	NewsID          *string           `protobuf:"bytes,2,opt,name=newsID,proto3,oneof" json:"newsID,omitempty"`
	Headline        *string           `protobuf:"bytes,3,opt,name=headline,proto3,oneof" json:"headline,omitempty"`
	CancelFlag      *CancelFlag       `protobuf:"varint,4,opt,name=cancelFlag,proto3,enum=CancelFlag,oneof" json:"cancelFlag,omitempty"`
	LastFragment    *LastFragment     `protobuf:"varint,5,opt,name=lastFragment,proto3,enum=LastFragment,oneof" json:"lastFragment,omitempty"`
	ReleaseTime     *int64            `protobuf:"varint,6,opt,name=releaseTime,proto3,oneof" json:"releaseTime,omitempty"`
	NoMarketCodes   []*NoMarketCode   `protobuf:"bytes,7,rep,name=noMarketCodes,proto3" json:"noMarketCodes,omitempty"`
	NoSecurityCodes []*NoSecurityCode `protobuf:"bytes,8,rep,name=noSecurityCodes,proto3" json:"noSecurityCodes,omitempty"`
	NoNewsLines     []*NoNewsLine     `protobuf:"bytes,9,rep,name=noNewsLines,proto3" json:"noNewsLines,omitempty"`
}

func (x *News) Reset() {
	*x = News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{43}
}

func (x *News) GetNewsType() NewsType {
	if x != nil && x.NewsType != nil {
		return *x.NewsType
	}
	return NewsType_NewsType_EXCHANGE_NEWS
}

func (x *News) GetNewsID() string {
	if x != nil && x.NewsID != nil {
		return *x.NewsID
	}
	return ""
}

func (x *News) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *News) GetCancelFlag() CancelFlag {
	if x != nil && x.CancelFlag != nil {
		return *x.CancelFlag
	}
	return CancelFlag_CancelFlag_Cancelled
}

func (x *News) GetLastFragment() LastFragment {
	if x != nil && x.LastFragment != nil {
		return *x.LastFragment
	}
	return LastFragment_LastFragment_Complete
}

func (x *News) GetReleaseTime() int64 {
	if x != nil && x.ReleaseTime != nil {
		return *x.ReleaseTime
	}
	return 0
}

func (x *News) GetNoMarketCodes() []*NoMarketCode {
	if x != nil {
		return x.NoMarketCodes
	}
	return nil
}

func (x *News) GetNoSecurityCodes() []*NoSecurityCode {
	if x != nil {
		return x.NoSecurityCodes
	}
	return nil
}

func (x *News) GetNoNewsLines() []*NoNewsLine {
	if x != nil {
		return x.NoNewsLines
	}
	return nil
}

type NoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateQuantity *int64        `protobuf:"varint,1,opt,name=aggregateQuantity,proto3,oneof" json:"aggregateQuantity,omitempty"`
	Price             *float64      `protobuf:"fixed64,2,opt,name=price,proto3,oneof" json:"price,omitempty"`
	NumberOfOrders    *int64        `protobuf:"varint,3,opt,name=numberOfOrders,proto3,oneof" json:"numberOfOrders,omitempty"`
	Side              *Side         `protobuf:"varint,4,opt,name=side,proto3,enum=Side,oneof" json:"side,omitempty"`
	PriceLevel        *int32        `protobuf:"varint,5,opt,name=priceLevel,proto3,oneof" json:"priceLevel,omitempty"`
	UpdateAction      *UpdateAction `protobuf:"varint,6,opt,name=updateAction,proto3,enum=UpdateAction,oneof" json:"updateAction,omitempty"`
}

func (x *NoEntry) Reset() {
	*x = NoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoEntry) ProtoMessage() {}

func (x *NoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoEntry.ProtoReflect.Descriptor instead.
func (*NoEntry) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{44}
}

func (x *NoEntry) GetAggregateQuantity() int64 {
	if x != nil && x.AggregateQuantity != nil {
		return *x.AggregateQuantity
	}
	return 0
}

func (x *NoEntry) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *NoEntry) GetNumberOfOrders() int64 {
	if x != nil && x.NumberOfOrders != nil {
		return *x.NumberOfOrders
	}
	return 0
}

func (x *NoEntry) GetSide() Side {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Side_Side_BID
}

func (x *NoEntry) GetPriceLevel() int32 {
	if x != nil && x.PriceLevel != nil {
		return *x.PriceLevel
	}
	return 0
}

func (x *NoEntry) GetUpdateAction() UpdateAction {
	if x != nil && x.UpdateAction != nil {
		return *x.UpdateAction
	}
	return UpdateAction_UpdateAction_NEW
}

type NoLiquidityProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LPBrokerNumber *int32 `protobuf:"varint,1,opt,name=lPBrokerNumber,proto3,oneof" json:"lPBrokerNumber,omitempty"`
}

func (x *NoLiquidityProvider) Reset() {
	*x = NoLiquidityProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoLiquidityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoLiquidityProvider) ProtoMessage() {}

func (x *NoLiquidityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoLiquidityProvider.ProtoReflect.Descriptor instead.
func (*NoLiquidityProvider) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{45}
}

func (x *NoLiquidityProvider) GetLPBrokerNumber() int32 {
	if x != nil && x.LPBrokerNumber != nil {
		return *x.LPBrokerNumber
	}
	return 0
}

type NoMarketCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode *MarketCode `protobuf:"varint,1,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
}

func (x *NoMarketCode) Reset() {
	*x = NoMarketCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoMarketCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoMarketCode) ProtoMessage() {}

func (x *NoMarketCode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoMarketCode.ProtoReflect.Descriptor instead.
func (*NoMarketCode) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{46}
}

func (x *NoMarketCode) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

type NoNewsLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsLine *string `protobuf:"bytes,1,opt,name=newsLine,proto3,oneof" json:"newsLine,omitempty"`
}

func (x *NoNewsLine) Reset() {
	*x = NoNewsLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoNewsLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoNewsLine) ProtoMessage() {}

func (x *NoNewsLine) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoNewsLine.ProtoReflect.Descriptor instead.
func (*NoNewsLine) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{47}
}

func (x *NoNewsLine) GetNewsLine() string {
	if x != nil && x.NewsLine != nil {
		return *x.NewsLine
	}
	return ""
}

type NoSecurityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
}

func (x *NoSecurityCode) Reset() {
	*x = NoSecurityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoSecurityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoSecurityCode) ProtoMessage() {}

func (x *NoSecurityCode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoSecurityCode.ProtoReflect.Descriptor instead.
func (*NoSecurityCode) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{48}
}

func (x *NoSecurityCode) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

type NoUnderlyingSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlyingSecurityCode *int64 `protobuf:"varint,1,opt,name=underlyingSecurityCode,proto3,oneof" json:"underlyingSecurityCode,omitempty"`
}

func (x *NoUnderlyingSecurity) Reset() {
	*x = NoUnderlyingSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoUnderlyingSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoUnderlyingSecurity) ProtoMessage() {}

func (x *NoUnderlyingSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoUnderlyingSecurity.ProtoReflect.Descriptor instead.
func (*NoUnderlyingSecurity) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{49}
}

func (x *NoUnderlyingSecurity) GetUnderlyingSecurityCode() int64 {
	if x != nil && x.UnderlyingSecurityCode != nil {
		return *x.UnderlyingSecurityCode
	}
	return 0
}

type NominalPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	NominalPrice *float64 `protobuf:"fixed64,2,opt,name=nominalPrice,proto3,oneof" json:"nominalPrice,omitempty"`
}

func (x *NominalPrice) Reset() {
	*x = NominalPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominalPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominalPrice) ProtoMessage() {}

func (x *NominalPrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominalPrice.ProtoReflect.Descriptor instead.
func (*NominalPrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{50}
}

func (x *NominalPrice) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *NominalPrice) GetNominalPrice() float64 {
	if x != nil && x.NominalPrice != nil {
		return *x.NominalPrice
	}
	return 0
}

type OrderImbalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode            *int64                   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	OrderImbalanceDirection *OrderImbalanceDirection `protobuf:"varint,2,opt,name=orderImbalanceDirection,proto3,enum=OrderImbalanceDirection,oneof" json:"orderImbalanceDirection,omitempty"`
	OrderImbalanceQuantity  *int64                   `protobuf:"varint,3,opt,name=orderImbalanceQuantity,proto3,oneof" json:"orderImbalanceQuantity,omitempty"`
}

func (x *OrderImbalance) Reset() {
	*x = OrderImbalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderImbalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderImbalance) ProtoMessage() {}

func (x *OrderImbalance) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderImbalance.ProtoReflect.Descriptor instead.
func (*OrderImbalance) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{51}
}

func (x *OrderImbalance) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *OrderImbalance) GetOrderImbalanceDirection() OrderImbalanceDirection {
	if x != nil && x.OrderImbalanceDirection != nil {
		return *x.OrderImbalanceDirection
	}
	return OrderImbalanceDirection_OrderImbalanceDirection_Buy
}

func (x *OrderImbalance) GetOrderImbalanceQuantity() int64 {
	if x != nil && x.OrderImbalanceQuantity != nil {
		return *x.OrderImbalanceQuantity
	}
	return 0
}

type PacketHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PktSize  *int32  `protobuf:"varint,1,opt,name=pktSize,proto3,oneof" json:"pktSize,omitempty"`
	MsgCount *int32  `protobuf:"varint,2,opt,name=msgCount,proto3,oneof" json:"msgCount,omitempty"`
	Filler   *string `protobuf:"bytes,3,opt,name=filler,proto3,oneof" json:"filler,omitempty"`
	SeqNum   *int64  `protobuf:"varint,4,opt,name=seqNum,proto3,oneof" json:"seqNum,omitempty"`
	SendTime *int64  `protobuf:"varint,5,opt,name=sendTime,proto3,oneof" json:"sendTime,omitempty"`
}

func (x *PacketHeader) Reset() {
	*x = PacketHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketHeader) ProtoMessage() {}

func (x *PacketHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketHeader.ProtoReflect.Descriptor instead.
func (*PacketHeader) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{52}
}

func (x *PacketHeader) GetPktSize() int32 {
	if x != nil && x.PktSize != nil {
		return *x.PktSize
	}
	return 0
}

func (x *PacketHeader) GetMsgCount() int32 {
	if x != nil && x.MsgCount != nil {
		return *x.MsgCount
	}
	return 0
}

func (x *PacketHeader) GetFiller() string {
	if x != nil && x.Filler != nil {
		return *x.Filler
	}
	return ""
}

func (x *PacketHeader) GetSeqNum() int64 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *PacketHeader) GetSendTime() int64 {
	if x != nil && x.SendTime != nil {
		return *x.SendTime
	}
	return 0
}

type LongAdjustedClosingPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol          *string        `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass        *SecurityClass `protobuf:"varint,2,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	AdjustedClosingPrice *float64       `protobuf:"fixed64,3,opt,name=adjustedClosingPrice,proto3,oneof" json:"adjustedClosingPrice,omitempty"`
}

func (x *LongAdjustedClosingPrice) Reset() {
	*x = LongAdjustedClosingPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongAdjustedClosingPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongAdjustedClosingPrice) ProtoMessage() {}

func (x *LongAdjustedClosingPrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongAdjustedClosingPrice.ProtoReflect.Descriptor instead.
func (*LongAdjustedClosingPrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{53}
}

func (x *LongAdjustedClosingPrice) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *LongAdjustedClosingPrice) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *LongAdjustedClosingPrice) GetAdjustedClosingPrice() float64 {
	if x != nil && x.AdjustedClosingPrice != nil {
		return *x.AdjustedClosingPrice
	}
	return 0
}

type LongDayTradeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueSymbol           *string         `protobuf:"bytes,1,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	MarketCategory        *MarketCategory `protobuf:"varint,2,opt,name=marketCategory,proto3,enum=MarketCategory,oneof" json:"marketCategory,omitempty"`
	NasdaqHighPrice       *float64        `protobuf:"fixed64,3,opt,name=nasdaqHighPrice,proto3,oneof" json:"nasdaqHighPrice,omitempty"`
	NasdaqLowPrice        *float64        `protobuf:"fixed64,4,opt,name=nasdaqLowPrice,proto3,oneof" json:"nasdaqLowPrice,omitempty"`
	NasdaqClosingPrice    *float64        `protobuf:"fixed64,5,opt,name=nasdaqClosingPrice,proto3,oneof" json:"nasdaqClosingPrice,omitempty"`
	ConsolidatedVolume    *int64          `protobuf:"varint,6,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
	ConsolidatedOpenPrice *float64        `protobuf:"fixed64,7,opt,name=consolidatedOpenPrice,proto3,oneof" json:"consolidatedOpenPrice,omitempty"`
}

func (x *LongDayTradeSummary) Reset() {
	*x = LongDayTradeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongDayTradeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongDayTradeSummary) ProtoMessage() {}

func (x *LongDayTradeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongDayTradeSummary.ProtoReflect.Descriptor instead.
func (*LongDayTradeSummary) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{54}
}

func (x *LongDayTradeSummary) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *LongDayTradeSummary) GetMarketCategory() MarketCategory {
	if x != nil && x.MarketCategory != nil {
		return *x.MarketCategory
	}
	return MarketCategory_MarketCategory_NASDAQ_GLOBAL_SELECT_MARKETSM
}

func (x *LongDayTradeSummary) GetNasdaqHighPrice() float64 {
	if x != nil && x.NasdaqHighPrice != nil {
		return *x.NasdaqHighPrice
	}
	return 0
}

func (x *LongDayTradeSummary) GetNasdaqLowPrice() float64 {
	if x != nil && x.NasdaqLowPrice != nil {
		return *x.NasdaqLowPrice
	}
	return 0
}

func (x *LongDayTradeSummary) GetNasdaqClosingPrice() float64 {
	if x != nil && x.NasdaqClosingPrice != nil {
		return *x.NasdaqClosingPrice
	}
	return 0
}

func (x *LongDayTradeSummary) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

func (x *LongDayTradeSummary) GetConsolidatedOpenPrice() float64 {
	if x != nil && x.ConsolidatedOpenPrice != nil {
		return *x.ConsolidatedOpenPrice
	}
	return 0
}

type LongTradeCancelForNonNextSharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier        *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                   *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                 *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalControlNumber         *string                            `protobuf:"bytes,4,opt,name=originalControlNumber,proto3,oneof" json:"originalControlNumber,omitempty"`
	OriginalTradePrice            *float64                           `protobuf:"fixed64,5,opt,name=originalTradePrice,proto3,oneof" json:"originalTradePrice,omitempty"`
	OriginalTradeSize             *int64                             `protobuf:"varint,6,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalSaleConditionModifier *SaleConditionModifier             `protobuf:"bytes,7,opt,name=originalSaleConditionModifier,proto3,oneof" json:"originalSaleConditionModifier,omitempty"`
	ConsolidatedVolume            *int64                             `protobuf:"varint,8,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *LongTradeCancelForNonNextSharesTrades) Reset() {
	*x = LongTradeCancelForNonNextSharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongTradeCancelForNonNextSharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongTradeCancelForNonNextSharesTrades) ProtoMessage() {}

func (x *LongTradeCancelForNonNextSharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongTradeCancelForNonNextSharesTrades.ProtoReflect.Descriptor instead.
func (*LongTradeCancelForNonNextSharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{55}
}

func (x *LongTradeCancelForNonNextSharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *LongTradeCancelForNonNextSharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *LongTradeCancelForNonNextSharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *LongTradeCancelForNonNextSharesTrades) GetOriginalControlNumber() string {
	if x != nil && x.OriginalControlNumber != nil {
		return *x.OriginalControlNumber
	}
	return ""
}

func (x *LongTradeCancelForNonNextSharesTrades) GetOriginalTradePrice() float64 {
	if x != nil && x.OriginalTradePrice != nil {
		return *x.OriginalTradePrice
	}
	return 0
}

func (x *LongTradeCancelForNonNextSharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *LongTradeCancelForNonNextSharesTrades) GetOriginalSaleConditionModifier() *SaleConditionModifier {
	if x != nil {
		return x.OriginalSaleConditionModifier
	}
	return nil
}

func (x *LongTradeCancelForNonNextSharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type LongTradeCorrectionForNonNextsharesTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCenterIdentifier         *OriginatingMarketCenterIdentifier `protobuf:"varint,1,opt,name=marketCenterIdentifier,proto3,enum=OriginatingMarketCenterIdentifier,oneof" json:"marketCenterIdentifier,omitempty"`
	IssueSymbol                    *string                            `protobuf:"bytes,2,opt,name=issueSymbol,proto3,oneof" json:"issueSymbol,omitempty"`
	SecurityClass                  *SecurityClass                     `protobuf:"varint,3,opt,name=securityClass,proto3,enum=SecurityClass,oneof" json:"securityClass,omitempty"`
	OriginalControlNumber          *string                            `protobuf:"bytes,4,opt,name=originalControlNumber,proto3,oneof" json:"originalControlNumber,omitempty"`
	OriginalTradePrice             *float64                           `protobuf:"fixed64,5,opt,name=originalTradePrice,proto3,oneof" json:"originalTradePrice,omitempty"`
	OriginalTradeSize              *int64                             `protobuf:"varint,6,opt,name=originalTradeSize,proto3,oneof" json:"originalTradeSize,omitempty"`
	OriginalConditionModifier      *string                            `protobuf:"bytes,7,opt,name=originalConditionModifier,proto3,oneof" json:"originalConditionModifier,omitempty"`
	CorrectedTradeControlNumber    *string                            `protobuf:"bytes,8,opt,name=correctedTradeControlNumber,proto3,oneof" json:"correctedTradeControlNumber,omitempty"`
	CorrectedTradePrice            *float64                           `protobuf:"fixed64,9,opt,name=correctedTradePrice,proto3,oneof" json:"correctedTradePrice,omitempty"`
	CorrectedTradeSize             *int64                             `protobuf:"varint,10,opt,name=CorrectedTradeSize,proto3,oneof" json:"CorrectedTradeSize,omitempty"`
	CorrectedSaleConditionModifier *string                            `protobuf:"bytes,11,opt,name=CorrectedSaleConditionModifier,proto3,oneof" json:"CorrectedSaleConditionModifier,omitempty"`
	ConsolidatedVolume             *int64                             `protobuf:"varint,12,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *LongTradeCorrectionForNonNextsharesTrades) Reset() {
	*x = LongTradeCorrectionForNonNextsharesTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongTradeCorrectionForNonNextsharesTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongTradeCorrectionForNonNextsharesTrades) ProtoMessage() {}

func (x *LongTradeCorrectionForNonNextsharesTrades) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongTradeCorrectionForNonNextsharesTrades.ProtoReflect.Descriptor instead.
func (*LongTradeCorrectionForNonNextsharesTrades) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{56}
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetMarketCenterIdentifier() OriginatingMarketCenterIdentifier {
	if x != nil && x.MarketCenterIdentifier != nil {
		return *x.MarketCenterIdentifier
	}
	return OriginatingMarketCenterIdentifier_OriginatingMarketCenterIdentifier_THE_NASDAQ_STOCK_MARKET
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetIssueSymbol() string {
	if x != nil && x.IssueSymbol != nil {
		return *x.IssueSymbol
	}
	return ""
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetSecurityClass() SecurityClass {
	if x != nil && x.SecurityClass != nil {
		return *x.SecurityClass
	}
	return SecurityClass_SecurityClass_Nasdaq
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetOriginalControlNumber() string {
	if x != nil && x.OriginalControlNumber != nil {
		return *x.OriginalControlNumber
	}
	return ""
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetOriginalTradePrice() float64 {
	if x != nil && x.OriginalTradePrice != nil {
		return *x.OriginalTradePrice
	}
	return 0
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetOriginalTradeSize() int64 {
	if x != nil && x.OriginalTradeSize != nil {
		return *x.OriginalTradeSize
	}
	return 0
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetOriginalConditionModifier() string {
	if x != nil && x.OriginalConditionModifier != nil {
		return *x.OriginalConditionModifier
	}
	return ""
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetCorrectedTradeControlNumber() string {
	if x != nil && x.CorrectedTradeControlNumber != nil {
		return *x.CorrectedTradeControlNumber
	}
	return ""
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetCorrectedTradePrice() float64 {
	if x != nil && x.CorrectedTradePrice != nil {
		return *x.CorrectedTradePrice
	}
	return 0
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetCorrectedTradeSize() int64 {
	if x != nil && x.CorrectedTradeSize != nil {
		return *x.CorrectedTradeSize
	}
	return 0
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetCorrectedSaleConditionModifier() string {
	if x != nil && x.CorrectedSaleConditionModifier != nil {
		return *x.CorrectedSaleConditionModifier
	}
	return ""
}

func (x *LongTradeCorrectionForNonNextsharesTrades) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type LongTradeReportForNonNextshares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsolidatedVolume *int64 `protobuf:"varint,1,opt,name=consolidatedVolume,proto3,oneof" json:"consolidatedVolume,omitempty"`
}

func (x *LongTradeReportForNonNextshares) Reset() {
	*x = LongTradeReportForNonNextshares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongTradeReportForNonNextshares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongTradeReportForNonNextshares) ProtoMessage() {}

func (x *LongTradeReportForNonNextshares) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongTradeReportForNonNextshares.ProtoReflect.Descriptor instead.
func (*LongTradeReportForNonNextshares) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{57}
}

func (x *LongTradeReportForNonNextshares) GetConsolidatedVolume() int64 {
	if x != nil && x.ConsolidatedVolume != nil {
		return *x.ConsolidatedVolume
	}
	return 0
}

type ReferencePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode   *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	ReferencePrice *float64 `protobuf:"fixed64,2,opt,name=referencePrice,proto3,oneof" json:"referencePrice,omitempty"`
	LowerPrice     *float64 `protobuf:"fixed64,3,opt,name=lowerPrice,proto3,oneof" json:"lowerPrice,omitempty"`
	UpperPrice     *float64 `protobuf:"fixed64,4,opt,name=upperPrice,proto3,oneof" json:"upperPrice,omitempty"`
}

func (x *ReferencePrice) Reset() {
	*x = ReferencePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencePrice) ProtoMessage() {}

func (x *ReferencePrice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencePrice.ProtoReflect.Descriptor instead.
func (*ReferencePrice) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{58}
}

func (x *ReferencePrice) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *ReferencePrice) GetReferencePrice() float64 {
	if x != nil && x.ReferencePrice != nil {
		return *x.ReferencePrice
	}
	return 0
}

func (x *ReferencePrice) GetLowerPrice() float64 {
	if x != nil && x.LowerPrice != nil {
		return *x.LowerPrice
	}
	return 0
}

func (x *ReferencePrice) GetUpperPrice() float64 {
	if x != nil && x.UpperPrice != nil {
		return *x.UpperPrice
	}
	return 0
}

type QBBOIPOQuotingPeriodUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock                     *string                       `protobuf:"bytes,1,opt,name=stock,proto3,oneof" json:"stock,omitempty"`
	IPOQuotationReleaseTime   *int64                        `protobuf:"varint,2,opt,name=iPOQuotationReleaseTime,proto3,oneof" json:"iPOQuotationReleaseTime,omitempty"`
	QuotationReleaseQualifier *IPOQuotationReleaseQualifier `protobuf:"varint,3,opt,name=quotationReleaseQualifier,proto3,enum=IPOQuotationReleaseQualifier,oneof" json:"quotationReleaseQualifier,omitempty"`
	IPOPrice                  *float64                      `protobuf:"fixed64,4,opt,name=iPOPrice,proto3,oneof" json:"iPOPrice,omitempty"`
}

func (x *QBBOIPOQuotingPeriodUpdate) Reset() {
	*x = QBBOIPOQuotingPeriodUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QBBOIPOQuotingPeriodUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QBBOIPOQuotingPeriodUpdate) ProtoMessage() {}

func (x *QBBOIPOQuotingPeriodUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QBBOIPOQuotingPeriodUpdate.ProtoReflect.Descriptor instead.
func (*QBBOIPOQuotingPeriodUpdate) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{59}
}

func (x *QBBOIPOQuotingPeriodUpdate) GetStock() string {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return ""
}

func (x *QBBOIPOQuotingPeriodUpdate) GetIPOQuotationReleaseTime() int64 {
	if x != nil && x.IPOQuotationReleaseTime != nil {
		return *x.IPOQuotationReleaseTime
	}
	return 0
}

func (x *QBBOIPOQuotingPeriodUpdate) GetQuotationReleaseQualifier() IPOQuotationReleaseQualifier {
	if x != nil && x.QuotationReleaseQualifier != nil {
		return *x.QuotationReleaseQualifier
	}
	return IPOQuotationReleaseQualifier_IPOQuotationReleaseQualifier_ANTICIPATED_QUOTATION_RELEASE_TIME
}

func (x *QBBOIPOQuotingPeriodUpdate) GetIPOPrice() float64 {
	if x != nil && x.IPOPrice != nil {
		return *x.IPOPrice
	}
	return 0
}

type SecurityDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode             *int64                  `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	MarketCode               *MarketCode             `protobuf:"varint,2,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	IsinCode                 *string                 `protobuf:"bytes,3,opt,name=isinCode,proto3,oneof" json:"isinCode,omitempty"`
	InstrumentType           *InstrumentType         `protobuf:"varint,4,opt,name=instrumentType,proto3,enum=InstrumentType,oneof" json:"instrumentType,omitempty"`
	ProductType              *ProductType            `protobuf:"varint,5,opt,name=productType,proto3,enum=ProductType,oneof" json:"productType,omitempty"`
	SpreadTableCode          *SpreadTableCode        `protobuf:"varint,6,opt,name=spreadTableCode,proto3,enum=SpreadTableCode,oneof" json:"spreadTableCode,omitempty"`
	SecurityShortName        *string                 `protobuf:"bytes,7,opt,name=securityShortName,proto3,oneof" json:"securityShortName,omitempty"`
	CurrencyCode             *CurrencyType           `protobuf:"varint,8,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	SecurityNameGCCS         *string                 `protobuf:"bytes,9,opt,name=securityNameGCCS,proto3,oneof" json:"securityNameGCCS,omitempty"`
	SecurityNameGB           *string                 `protobuf:"bytes,10,opt,name=securityNameGB,proto3,oneof" json:"securityNameGB,omitempty"`
	LotSize                  *int64                  `protobuf:"varint,11,opt,name=lotSize,proto3,oneof" json:"lotSize,omitempty"`
	PreviousClosingPrice     *float64                `protobuf:"fixed64,12,opt,name=previousClosingPrice,proto3,oneof" json:"previousClosingPrice,omitempty"`
	VCMFlag                  *string                 `protobuf:"bytes,13,opt,name=VCMFlag,proto3,oneof" json:"VCMFlag,omitempty"`
	ShortSellFlag            *IndicatesWhether       `protobuf:"varint,14,opt,name=shortSellFlag,proto3,enum=IndicatesWhether,oneof" json:"shortSellFlag,omitempty"`
	CasFlag                  *IndicatesWhether       `protobuf:"varint,15,opt,name=casFlag,proto3,enum=IndicatesWhether,oneof" json:"casFlag,omitempty"`
	CCASSFlag                *IndicatesWhether       `protobuf:"varint,16,opt,name=CCASSFlag,proto3,enum=IndicatesWhether,oneof" json:"CCASSFlag,omitempty"`
	DummySecurityFlag        *IndicatesWhether       `protobuf:"varint,17,opt,name=dummySecurityFlag,proto3,enum=IndicatesWhether,oneof" json:"dummySecurityFlag,omitempty"`
	StampDutyFlag            *IndicatesWhether       `protobuf:"varint,18,opt,name=stampDutyFlag,proto3,enum=IndicatesWhether,oneof" json:"stampDutyFlag,omitempty"`
	ListingDate              *int64                  `protobuf:"varint,19,opt,name=listingDate,proto3,oneof" json:"listingDate,omitempty"`
	DelistingDate            *int64                  `protobuf:"varint,20,opt,name=delistingDate,proto3,oneof" json:"delistingDate,omitempty"`
	FreeText                 *string                 `protobuf:"bytes,21,opt,name=freeText,proto3,oneof" json:"freeText,omitempty"`
	PosFlag                  *IndicatesWhether       `protobuf:"varint,22,opt,name=posFlag,proto3,enum=IndicatesWhether,oneof" json:"posFlag,omitempty"`
	PosUpperLimit            *int32                  `protobuf:"varint,23,opt,name=posUpperLimit,proto3,oneof" json:"posUpperLimit,omitempty"`
	PosLowerLimit            *int32                  `protobuf:"varint,24,opt,name=posLowerLimit,proto3,oneof" json:"posLowerLimit,omitempty"`
	EFNFlag                  *IndicatesWhether       `protobuf:"varint,25,opt,name=EFNFlag,proto3,enum=IndicatesWhether,oneof" json:"EFNFlag,omitempty"`
	AccruedInterest          *float64                `protobuf:"fixed64,26,opt,name=accruedInterest,proto3,oneof" json:"accruedInterest,omitempty"`
	CouponRate               *float64                `protobuf:"fixed64,27,opt,name=couponRate,proto3,oneof" json:"couponRate,omitempty"`
	FaceValue                *int64                  `protobuf:"varint,28,opt,name=faceValue,proto3,oneof" json:"faceValue,omitempty"`
	DecimalsInFaceValue      *int32                  `protobuf:"varint,29,opt,name=decimalsInFaceValue,proto3,oneof" json:"decimalsInFaceValue,omitempty"`
	FaceValueCurrency        *string                 `protobuf:"bytes,30,opt,name=faceValueCurrency,proto3,oneof" json:"faceValueCurrency,omitempty"`
	BondMaturityDate         *int64                  `protobuf:"varint,31,opt,name=bondMaturityDate,proto3,oneof" json:"bondMaturityDate,omitempty"`
	InvestorType             *InvestorType           `protobuf:"varint,32,opt,name=investorType,proto3,enum=InvestorType,oneof" json:"investorType,omitempty"`
	ConversionRatio          *float64                `protobuf:"fixed64,33,opt,name=conversionRatio,proto3,oneof" json:"conversionRatio,omitempty"`
	StrikePrice1             *float64                `protobuf:"fixed64,34,opt,name=strikePrice1,proto3,oneof" json:"strikePrice1,omitempty"`
	StrikePrice2             *float64                `protobuf:"fixed64,35,opt,name=strikePrice2,proto3,oneof" json:"strikePrice2,omitempty"`
	WarrantMaturityDate      *int64                  `protobuf:"varint,36,opt,name=warrantMaturityDate,proto3,oneof" json:"warrantMaturityDate,omitempty"`
	CallPutFlag              *CallPutFlag            `protobuf:"varint,37,opt,name=callPutFlag,proto3,enum=CallPutFlag,oneof" json:"callPutFlag,omitempty"`
	Style                    *Style                  `protobuf:"varint,38,opt,name=style,proto3,enum=Style,oneof" json:"style,omitempty"`
	WarrantType              *string                 `protobuf:"bytes,39,opt,name=warrantType,proto3,oneof" json:"warrantType,omitempty"`
	CallPrice                *int32                  `protobuf:"varint,40,opt,name=callPrice,proto3,oneof" json:"callPrice,omitempty"`
	DecimalsInCallPrice      *int32                  `protobuf:"varint,41,opt,name=DecimalsInCallPrice,proto3,oneof" json:"DecimalsInCallPrice,omitempty"`
	Entitlement              *int32                  `protobuf:"varint,42,opt,name=entitlement,proto3,oneof" json:"entitlement,omitempty"`
	DecimalsInEntitlement    *int32                  `protobuf:"varint,43,opt,name=decimalsInEntitlement,proto3,oneof" json:"decimalsInEntitlement,omitempty"`
	NoWarrantsPerEntitlement *int64                  `protobuf:"varint,44,opt,name=noWarrantsPerEntitlement,proto3,oneof" json:"noWarrantsPerEntitlement,omitempty"`
	NoUnderlyingSecurities   []*NoUnderlyingSecurity `protobuf:"bytes,45,rep,name=noUnderlyingSecurities,proto3" json:"noUnderlyingSecurities,omitempty"`
}

func (x *SecurityDefinition) Reset() {
	*x = SecurityDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDefinition) ProtoMessage() {}

func (x *SecurityDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDefinition.ProtoReflect.Descriptor instead.
func (*SecurityDefinition) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{60}
}

func (x *SecurityDefinition) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *SecurityDefinition) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *SecurityDefinition) GetIsinCode() string {
	if x != nil && x.IsinCode != nil {
		return *x.IsinCode
	}
	return ""
}

func (x *SecurityDefinition) GetInstrumentType() InstrumentType {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return InstrumentType_InstrumentType_BOND
}

func (x *SecurityDefinition) GetProductType() ProductType {
	if x != nil && x.ProductType != nil {
		return *x.ProductType
	}
	return ProductType_ProductType_EQUITY_ORDINARY_SHARES
}

func (x *SecurityDefinition) GetSpreadTableCode() SpreadTableCode {
	if x != nil && x.SpreadTableCode != nil {
		return *x.SpreadTableCode
	}
	return SpreadTableCode_SpreadTableCode_Part_A
}

func (x *SecurityDefinition) GetSecurityShortName() string {
	if x != nil && x.SecurityShortName != nil {
		return *x.SecurityShortName
	}
	return ""
}

func (x *SecurityDefinition) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *SecurityDefinition) GetSecurityNameGCCS() string {
	if x != nil && x.SecurityNameGCCS != nil {
		return *x.SecurityNameGCCS
	}
	return ""
}

func (x *SecurityDefinition) GetSecurityNameGB() string {
	if x != nil && x.SecurityNameGB != nil {
		return *x.SecurityNameGB
	}
	return ""
}

func (x *SecurityDefinition) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *SecurityDefinition) GetPreviousClosingPrice() float64 {
	if x != nil && x.PreviousClosingPrice != nil {
		return *x.PreviousClosingPrice
	}
	return 0
}

func (x *SecurityDefinition) GetVCMFlag() string {
	if x != nil && x.VCMFlag != nil {
		return *x.VCMFlag
	}
	return ""
}

func (x *SecurityDefinition) GetShortSellFlag() IndicatesWhether {
	if x != nil && x.ShortSellFlag != nil {
		return *x.ShortSellFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetCasFlag() IndicatesWhether {
	if x != nil && x.CasFlag != nil {
		return *x.CasFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetCCASSFlag() IndicatesWhether {
	if x != nil && x.CCASSFlag != nil {
		return *x.CCASSFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetDummySecurityFlag() IndicatesWhether {
	if x != nil && x.DummySecurityFlag != nil {
		return *x.DummySecurityFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetStampDutyFlag() IndicatesWhether {
	if x != nil && x.StampDutyFlag != nil {
		return *x.StampDutyFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetListingDate() int64 {
	if x != nil && x.ListingDate != nil {
		return *x.ListingDate
	}
	return 0
}

func (x *SecurityDefinition) GetDelistingDate() int64 {
	if x != nil && x.DelistingDate != nil {
		return *x.DelistingDate
	}
	return 0
}

func (x *SecurityDefinition) GetFreeText() string {
	if x != nil && x.FreeText != nil {
		return *x.FreeText
	}
	return ""
}

func (x *SecurityDefinition) GetPosFlag() IndicatesWhether {
	if x != nil && x.PosFlag != nil {
		return *x.PosFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetPosUpperLimit() int32 {
	if x != nil && x.PosUpperLimit != nil {
		return *x.PosUpperLimit
	}
	return 0
}

func (x *SecurityDefinition) GetPosLowerLimit() int32 {
	if x != nil && x.PosLowerLimit != nil {
		return *x.PosLowerLimit
	}
	return 0
}

func (x *SecurityDefinition) GetEFNFlag() IndicatesWhether {
	if x != nil && x.EFNFlag != nil {
		return *x.EFNFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *SecurityDefinition) GetAccruedInterest() float64 {
	if x != nil && x.AccruedInterest != nil {
		return *x.AccruedInterest
	}
	return 0
}

func (x *SecurityDefinition) GetCouponRate() float64 {
	if x != nil && x.CouponRate != nil {
		return *x.CouponRate
	}
	return 0
}

func (x *SecurityDefinition) GetFaceValue() int64 {
	if x != nil && x.FaceValue != nil {
		return *x.FaceValue
	}
	return 0
}

func (x *SecurityDefinition) GetDecimalsInFaceValue() int32 {
	if x != nil && x.DecimalsInFaceValue != nil {
		return *x.DecimalsInFaceValue
	}
	return 0
}

func (x *SecurityDefinition) GetFaceValueCurrency() string {
	if x != nil && x.FaceValueCurrency != nil {
		return *x.FaceValueCurrency
	}
	return ""
}

func (x *SecurityDefinition) GetBondMaturityDate() int64 {
	if x != nil && x.BondMaturityDate != nil {
		return *x.BondMaturityDate
	}
	return 0
}

func (x *SecurityDefinition) GetInvestorType() InvestorType {
	if x != nil && x.InvestorType != nil {
		return *x.InvestorType
	}
	return InvestorType_InvestorType_Retail_Investor
}

func (x *SecurityDefinition) GetConversionRatio() float64 {
	if x != nil && x.ConversionRatio != nil {
		return *x.ConversionRatio
	}
	return 0
}

func (x *SecurityDefinition) GetStrikePrice1() float64 {
	if x != nil && x.StrikePrice1 != nil {
		return *x.StrikePrice1
	}
	return 0
}

func (x *SecurityDefinition) GetStrikePrice2() float64 {
	if x != nil && x.StrikePrice2 != nil {
		return *x.StrikePrice2
	}
	return 0
}

func (x *SecurityDefinition) GetWarrantMaturityDate() int64 {
	if x != nil && x.WarrantMaturityDate != nil {
		return *x.WarrantMaturityDate
	}
	return 0
}

func (x *SecurityDefinition) GetCallPutFlag() CallPutFlag {
	if x != nil && x.CallPutFlag != nil {
		return *x.CallPutFlag
	}
	return CallPutFlag_CallPutFlag_C
}

func (x *SecurityDefinition) GetStyle() Style {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return Style_Style_American_Style
}

func (x *SecurityDefinition) GetWarrantType() string {
	if x != nil && x.WarrantType != nil {
		return *x.WarrantType
	}
	return ""
}

func (x *SecurityDefinition) GetCallPrice() int32 {
	if x != nil && x.CallPrice != nil {
		return *x.CallPrice
	}
	return 0
}

func (x *SecurityDefinition) GetDecimalsInCallPrice() int32 {
	if x != nil && x.DecimalsInCallPrice != nil {
		return *x.DecimalsInCallPrice
	}
	return 0
}

func (x *SecurityDefinition) GetEntitlement() int32 {
	if x != nil && x.Entitlement != nil {
		return *x.Entitlement
	}
	return 0
}

func (x *SecurityDefinition) GetDecimalsInEntitlement() int32 {
	if x != nil && x.DecimalsInEntitlement != nil {
		return *x.DecimalsInEntitlement
	}
	return 0
}

func (x *SecurityDefinition) GetNoWarrantsPerEntitlement() int64 {
	if x != nil && x.NoWarrantsPerEntitlement != nil {
		return *x.NoWarrantsPerEntitlement
	}
	return 0
}

func (x *SecurityDefinition) GetNoUnderlyingSecurities() []*NoUnderlyingSecurity {
	if x != nil {
		return x.NoUnderlyingSecurities
	}
	return nil
}

type SecurityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode        *int64               `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	SuspensionIndicator *SuspensionIndicator `protobuf:"varint,2,opt,name=suspensionIndicator,proto3,enum=SuspensionIndicator,oneof" json:"suspensionIndicator,omitempty"`
}

func (x *SecurityStatus) Reset() {
	*x = SecurityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityStatus) ProtoMessage() {}

func (x *SecurityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityStatus.ProtoReflect.Descriptor instead.
func (*SecurityStatus) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{61}
}

func (x *SecurityStatus) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *SecurityStatus) GetSuspensionIndicator() SuspensionIndicator {
	if x != nil && x.SuspensionIndicator != nil {
		return *x.SuspensionIndicator
	}
	return SuspensionIndicator_SuspensionIndicator_Trading_Halt_OF_Suspend
}

type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode          *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	SharesTraded          *int64   `protobuf:"varint,2,opt,name=sharesTraded,proto3,oneof" json:"sharesTraded,omitempty"`
	VCMReferencePrice     *float64 `protobuf:"fixed64,3,opt,name=vCMReferencePrice,proto3,oneof" json:"vCMReferencePrice,omitempty"`
	HighPrice             *float64 `protobuf:"fixed64,4,opt,name=highPrice,proto3,oneof" json:"highPrice,omitempty"`
	LowPrice              *float64 `protobuf:"fixed64,5,opt,name=lowPrice,proto3,oneof" json:"lowPrice,omitempty"`
	LastPrice             *float64 `protobuf:"fixed64,6,opt,name=lastPrice,proto3,oneof" json:"lastPrice,omitempty"`
	Vwap                  *float64 `protobuf:"fixed64,7,opt,name=vwap,proto3,oneof" json:"vwap,omitempty"`
	ShortSellSharesTraded *int64   `protobuf:"varint,8,opt,name=shortSellSharesTraded,proto3,oneof" json:"shortSellSharesTraded,omitempty"`
	ShortSellTurnover     *float64 `protobuf:"fixed64,9,opt,name=shortSellTurnover,proto3,oneof" json:"shortSellTurnover,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{62}
}

func (x *Statistics) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *Statistics) GetSharesTraded() int64 {
	if x != nil && x.SharesTraded != nil {
		return *x.SharesTraded
	}
	return 0
}

func (x *Statistics) GetVCMReferencePrice() float64 {
	if x != nil && x.VCMReferencePrice != nil {
		return *x.VCMReferencePrice
	}
	return 0
}

func (x *Statistics) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *Statistics) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *Statistics) GetLastPrice() float64 {
	if x != nil && x.LastPrice != nil {
		return *x.LastPrice
	}
	return 0
}

func (x *Statistics) GetVwap() float64 {
	if x != nil && x.Vwap != nil {
		return *x.Vwap
	}
	return 0
}

func (x *Statistics) GetShortSellSharesTraded() int64 {
	if x != nil && x.ShortSellSharesTraded != nil {
		return *x.ShortSellSharesTraded
	}
	return 0
}

func (x *Statistics) GetShortSellTurnover() float64 {
	if x != nil && x.ShortSellTurnover != nil {
		return *x.ShortSellTurnover
	}
	return 0
}

type StockConnectDailyQuotaBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockConnectMarket    *string `protobuf:"bytes,1,opt,name=stockConnectMarket,proto3,oneof" json:"stockConnectMarket,omitempty"`
	TradingDirection      *string `protobuf:"bytes,2,opt,name=tradingDirection,proto3,oneof" json:"tradingDirection,omitempty"`
	DailyQuotaBalance     *int64  `protobuf:"varint,3,opt,name=dailyQuotaBalance,proto3,oneof" json:"dailyQuotaBalance,omitempty"`
	DailyQuotaBalanceTime *int64  `protobuf:"varint,4,opt,name=dailyQuotaBalanceTime,proto3,oneof" json:"dailyQuotaBalanceTime,omitempty"`
}

func (x *StockConnectDailyQuotaBalance) Reset() {
	*x = StockConnectDailyQuotaBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockConnectDailyQuotaBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockConnectDailyQuotaBalance) ProtoMessage() {}

func (x *StockConnectDailyQuotaBalance) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockConnectDailyQuotaBalance.ProtoReflect.Descriptor instead.
func (*StockConnectDailyQuotaBalance) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{63}
}

func (x *StockConnectDailyQuotaBalance) GetStockConnectMarket() string {
	if x != nil && x.StockConnectMarket != nil {
		return *x.StockConnectMarket
	}
	return ""
}

func (x *StockConnectDailyQuotaBalance) GetTradingDirection() string {
	if x != nil && x.TradingDirection != nil {
		return *x.TradingDirection
	}
	return ""
}

func (x *StockConnectDailyQuotaBalance) GetDailyQuotaBalance() int64 {
	if x != nil && x.DailyQuotaBalance != nil {
		return *x.DailyQuotaBalance
	}
	return 0
}

func (x *StockConnectDailyQuotaBalance) GetDailyQuotaBalanceTime() int64 {
	if x != nil && x.DailyQuotaBalanceTime != nil {
		return *x.DailyQuotaBalanceTime
	}
	return 0
}

type StockConnectMarketTurnover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockConnectMarket *string `protobuf:"bytes,1,opt,name=stockConnectMarket,proto3,oneof" json:"stockConnectMarket,omitempty"`
	TradingDirection   *string `protobuf:"bytes,2,opt,name=tradingDirection,proto3,oneof" json:"tradingDirection,omitempty"`
	BuyTurnover        *int64  `protobuf:"varint,3,opt,name=buyTurnover,proto3,oneof" json:"buyTurnover,omitempty"`
	SellTurnover       *int64  `protobuf:"varint,4,opt,name=sellTurnover,proto3,oneof" json:"sellTurnover,omitempty"`
	BuySellTurnover    *int64  `protobuf:"varint,5,opt,name=buySellTurnover,proto3,oneof" json:"buySellTurnover,omitempty"`
}

func (x *StockConnectMarketTurnover) Reset() {
	*x = StockConnectMarketTurnover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockConnectMarketTurnover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockConnectMarketTurnover) ProtoMessage() {}

func (x *StockConnectMarketTurnover) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockConnectMarketTurnover.ProtoReflect.Descriptor instead.
func (*StockConnectMarketTurnover) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{64}
}

func (x *StockConnectMarketTurnover) GetStockConnectMarket() string {
	if x != nil && x.StockConnectMarket != nil {
		return *x.StockConnectMarket
	}
	return ""
}

func (x *StockConnectMarketTurnover) GetTradingDirection() string {
	if x != nil && x.TradingDirection != nil {
		return *x.TradingDirection
	}
	return ""
}

func (x *StockConnectMarketTurnover) GetBuyTurnover() int64 {
	if x != nil && x.BuyTurnover != nil {
		return *x.BuyTurnover
	}
	return 0
}

func (x *StockConnectMarketTurnover) GetSellTurnover() int64 {
	if x != nil && x.SellTurnover != nil {
		return *x.SellTurnover
	}
	return 0
}

func (x *StockConnectMarketTurnover) GetBuySellTurnover() int64 {
	if x != nil && x.BuySellTurnover != nil {
		return *x.BuySellTurnover
	}
	return 0
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	TradeId      *int64   `protobuf:"varint,2,opt,name=tradeId,proto3,oneof" json:"tradeId,omitempty"`
	Price        *float64 `protobuf:"fixed64,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Quantity     *int64   `protobuf:"varint,4,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	TrdType      *TrdType `protobuf:"varint,5,opt,name=trdType,proto3,enum=TrdType,oneof" json:"trdType,omitempty"`
	TradeTime    *int64   `protobuf:"varint,6,opt,name=TradeTime,proto3,oneof" json:"TradeTime,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{65}
}

func (x *Trade) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *Trade) GetTradeId() int64 {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return 0
}

func (x *Trade) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() int64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Trade) GetTrdType() TrdType {
	if x != nil && x.TrdType != nil {
		return *x.TrdType
	}
	return TrdType_TrdType_AUTOMATCH_NORMAL
}

func (x *Trade) GetTradeTime() int64 {
	if x != nil && x.TradeTime != nil {
		return *x.TradeTime
	}
	return 0
}

type TradeCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	TradeId      *int64 `protobuf:"varint,2,opt,name=tradeId,proto3,oneof" json:"tradeId,omitempty"`
}

func (x *TradeCancel) Reset() {
	*x = TradeCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCancel) ProtoMessage() {}

func (x *TradeCancel) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCancel.ProtoReflect.Descriptor instead.
func (*TradeCancel) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{66}
}

func (x *TradeCancel) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *TradeCancel) GetTradeId() int64 {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return 0
}

type TradingSessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode            *MarketCode            `protobuf:"varint,1,opt,name=marketCode,proto3,enum=MarketCode,oneof" json:"marketCode,omitempty"`
	TradingSessionSubID   *TradingSessionSubID   `protobuf:"varint,2,opt,name=tradingSessionSubID,proto3,enum=TradingSessionSubID,oneof" json:"tradingSessionSubID,omitempty"`
	TradingSesStatus      *TradingSesStatus      `protobuf:"varint,3,opt,name=tradingSesStatus,proto3,enum=TradingSesStatus,oneof" json:"tradingSesStatus,omitempty"`
	TradingSesControlFlag *TradingSesControlType `protobuf:"varint,4,opt,name=TradingSesControlFlag,proto3,enum=TradingSesControlType,oneof" json:"TradingSesControlFlag,omitempty"`
	StartDateTime         *int64                 `protobuf:"varint,5,opt,name=startDateTime,proto3,oneof" json:"startDateTime,omitempty"`
	EndDateTime           *int64                 `protobuf:"varint,6,opt,name=endDateTime,proto3,oneof" json:"endDateTime,omitempty"`
}

func (x *TradingSessionStatus) Reset() {
	*x = TradingSessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSessionStatus) ProtoMessage() {}

func (x *TradingSessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSessionStatus.ProtoReflect.Descriptor instead.
func (*TradingSessionStatus) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{67}
}

func (x *TradingSessionStatus) GetMarketCode() MarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return MarketCode_MarketCode_MAIN
}

func (x *TradingSessionStatus) GetTradingSessionSubID() TradingSessionSubID {
	if x != nil && x.TradingSessionSubID != nil {
		return *x.TradingSessionSubID
	}
	return TradingSessionSubID_TradingSessionSubID_NOT_YET_OPEN
}

func (x *TradingSessionStatus) GetTradingSesStatus() TradingSesStatus {
	if x != nil && x.TradingSesStatus != nil {
		return *x.TradingSesStatus
	}
	return TradingSesStatus_TradingSesStatus_UNKNOWN
}

func (x *TradingSessionStatus) GetTradingSesControlFlag() TradingSesControlType {
	if x != nil && x.TradingSesControlFlag != nil {
		return *x.TradingSesControlFlag
	}
	return TradingSesControlType_TradingSesControlType_AUTOMATIC
}

func (x *TradingSessionStatus) GetStartDateTime() int64 {
	if x != nil && x.StartDateTime != nil {
		return *x.StartDateTime
	}
	return 0
}

func (x *TradingSessionStatus) GetEndDateTime() int64 {
	if x != nil && x.EndDateTime != nil {
		return *x.EndDateTime
	}
	return 0
}

type VCMTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode        *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	CoolingOffStartTime *int64   `protobuf:"varint,2,opt,name=coolingOffStartTime,proto3,oneof" json:"coolingOffStartTime,omitempty"`
	CoolingOffEndTime   *int64   `protobuf:"varint,3,opt,name=coolingOffEndTime,proto3,oneof" json:"coolingOffEndTime,omitempty"`
	VCMReferencePrice   *float64 `protobuf:"fixed64,4,opt,name=vCMReferencePrice,proto3,oneof" json:"vCMReferencePrice,omitempty"`
	VCMLowerPrice       *float64 `protobuf:"fixed64,5,opt,name=vCMLowerPrice,proto3,oneof" json:"vCMLowerPrice,omitempty"`
	VCMUpperPrice       *float64 `protobuf:"fixed64,6,opt,name=vCMUpperPrice,proto3,oneof" json:"vCMUpperPrice,omitempty"`
}

func (x *VCMTrigger) Reset() {
	*x = VCMTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCMTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCMTrigger) ProtoMessage() {}

func (x *VCMTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCMTrigger.ProtoReflect.Descriptor instead.
func (*VCMTrigger) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{68}
}

func (x *VCMTrigger) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *VCMTrigger) GetCoolingOffStartTime() int64 {
	if x != nil && x.CoolingOffStartTime != nil {
		return *x.CoolingOffStartTime
	}
	return 0
}

func (x *VCMTrigger) GetCoolingOffEndTime() int64 {
	if x != nil && x.CoolingOffEndTime != nil {
		return *x.CoolingOffEndTime
	}
	return 0
}

func (x *VCMTrigger) GetVCMReferencePrice() float64 {
	if x != nil && x.VCMReferencePrice != nil {
		return *x.VCMReferencePrice
	}
	return 0
}

func (x *VCMTrigger) GetVCMLowerPrice() float64 {
	if x != nil && x.VCMLowerPrice != nil {
		return *x.VCMLowerPrice
	}
	return 0
}

func (x *VCMTrigger) GetVCMUpperPrice() float64 {
	if x != nil && x.VCMUpperPrice != nil {
		return *x.VCMUpperPrice
	}
	return 0
}

type Yield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	Yield        *int32 `protobuf:"varint,2,opt,name=yield,proto3,oneof" json:"yield,omitempty"`
}

func (x *Yield) Reset() {
	*x = Yield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Yield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yield) ProtoMessage() {}

func (x *Yield) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Yield.ProtoReflect.Descriptor instead.
func (*Yield) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{69}
}

func (x *Yield) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *Yield) GetYield() int32 {
	if x != nil && x.Yield != nil {
		return *x.Yield
	}
	return 0
}

type CNMarketDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCode         *CnMarketCode `protobuf:"varint,1,opt,name=marketCode,proto3,enum=CnMarketCode,oneof" json:"marketCode,omitempty"`
	MarketName         *string       `protobuf:"bytes,2,opt,name=marketName,proto3,oneof" json:"marketName,omitempty"`
	CurrencyCode       *CurrencyType `protobuf:"varint,3,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	NumberOfSecurities *int64        `protobuf:"varint,4,opt,name=numberOfSecurities,proto3,oneof" json:"numberOfSecurities,omitempty"`
}

func (x *CNMarketDefinition) Reset() {
	*x = CNMarketDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNMarketDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNMarketDefinition) ProtoMessage() {}

func (x *CNMarketDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNMarketDefinition.ProtoReflect.Descriptor instead.
func (*CNMarketDefinition) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{70}
}

func (x *CNMarketDefinition) GetMarketCode() CnMarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return CnMarketCode_SSE
}

func (x *CNMarketDefinition) GetMarketName() string {
	if x != nil && x.MarketName != nil {
		return *x.MarketName
	}
	return ""
}

func (x *CNMarketDefinition) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *CNMarketDefinition) GetNumberOfSecurities() int64 {
	if x != nil && x.NumberOfSecurities != nil {
		return *x.NumberOfSecurities
	}
	return 0
}

type CNSecurityDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode         *int64            `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	MarketCode           *CnMarketCode     `protobuf:"varint,2,opt,name=marketCode,proto3,enum=CnMarketCode,oneof" json:"marketCode,omitempty"`
	IsinCode             *string           `protobuf:"bytes,3,opt,name=isinCode,proto3,oneof" json:"isinCode,omitempty"`
	InstrumentType       *InstrumentType   `protobuf:"varint,4,opt,name=instrumentType,proto3,enum=InstrumentType,oneof" json:"instrumentType,omitempty"`
	SecurityShortName    *string           `protobuf:"bytes,5,opt,name=securityShortName,proto3,oneof" json:"securityShortName,omitempty"`
	CurrencyCode         *CurrencyType     `protobuf:"varint,6,opt,name=currencyCode,proto3,enum=CurrencyType,oneof" json:"currencyCode,omitempty"`
	SecurityNameGB       *string           `protobuf:"bytes,7,opt,name=securityNameGB,proto3,oneof" json:"securityNameGB,omitempty"`
	LotSize              *int64            `protobuf:"varint,8,opt,name=lotSize,proto3,oneof" json:"lotSize,omitempty"`
	PreviousClosingPrice *float64          `protobuf:"fixed64,9,opt,name=previousClosingPrice,proto3,oneof" json:"previousClosingPrice,omitempty"`
	ShortSellFlag        *IndicatesWhether `protobuf:"varint,10,opt,name=shortSellFlag,proto3,enum=IndicatesWhether,oneof" json:"shortSellFlag,omitempty"`
	ListingDate          *int64            `protobuf:"varint,11,opt,name=listingDate,proto3,oneof" json:"listingDate,omitempty"`
}

func (x *CNSecurityDefinition) Reset() {
	*x = CNSecurityDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNSecurityDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNSecurityDefinition) ProtoMessage() {}

func (x *CNSecurityDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNSecurityDefinition.ProtoReflect.Descriptor instead.
func (*CNSecurityDefinition) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{71}
}

func (x *CNSecurityDefinition) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *CNSecurityDefinition) GetMarketCode() CnMarketCode {
	if x != nil && x.MarketCode != nil {
		return *x.MarketCode
	}
	return CnMarketCode_SSE
}

func (x *CNSecurityDefinition) GetIsinCode() string {
	if x != nil && x.IsinCode != nil {
		return *x.IsinCode
	}
	return ""
}

func (x *CNSecurityDefinition) GetInstrumentType() InstrumentType {
	if x != nil && x.InstrumentType != nil {
		return *x.InstrumentType
	}
	return InstrumentType_InstrumentType_BOND
}

func (x *CNSecurityDefinition) GetSecurityShortName() string {
	if x != nil && x.SecurityShortName != nil {
		return *x.SecurityShortName
	}
	return ""
}

func (x *CNSecurityDefinition) GetCurrencyCode() CurrencyType {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return CurrencyType_CurrencyType_BLANK
}

func (x *CNSecurityDefinition) GetSecurityNameGB() string {
	if x != nil && x.SecurityNameGB != nil {
		return *x.SecurityNameGB
	}
	return ""
}

func (x *CNSecurityDefinition) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *CNSecurityDefinition) GetPreviousClosingPrice() float64 {
	if x != nil && x.PreviousClosingPrice != nil {
		return *x.PreviousClosingPrice
	}
	return 0
}

func (x *CNSecurityDefinition) GetShortSellFlag() IndicatesWhether {
	if x != nil && x.ShortSellFlag != nil {
		return *x.ShortSellFlag
	}
	return IndicatesWhether_IndicatesWhether_Y
}

func (x *CNSecurityDefinition) GetListingDate() int64 {
	if x != nil && x.ListingDate != nil {
		return *x.ListingDate
	}
	return 0
}

type CNSecurityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode          *int64                 `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	SecurityTradingStatus *SecurityTradingStatus `protobuf:"varint,2,opt,name=securityTradingStatus,proto3,enum=SecurityTradingStatus,oneof" json:"securityTradingStatus,omitempty"`
	TradingPhaseCode      *string                `protobuf:"bytes,3,opt,name=tradingPhaseCode,proto3,oneof" json:"tradingPhaseCode,omitempty"`
}

func (x *CNSecurityStatus) Reset() {
	*x = CNSecurityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNSecurityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNSecurityStatus) ProtoMessage() {}

func (x *CNSecurityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNSecurityStatus.ProtoReflect.Descriptor instead.
func (*CNSecurityStatus) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{72}
}

func (x *CNSecurityStatus) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *CNSecurityStatus) GetSecurityTradingStatus() SecurityTradingStatus {
	if x != nil && x.SecurityTradingStatus != nil {
		return *x.SecurityTradingStatus
	}
	return SecurityTradingStatus_SecurityTradingStatus_Trading_Halt
}

func (x *CNSecurityStatus) GetTradingPhaseCode() string {
	if x != nil && x.TradingPhaseCode != nil {
		return *x.TradingPhaseCode
	}
	return ""
}

type CNStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	SharesTraded *int64   `protobuf:"varint,2,opt,name=sharesTraded,proto3,oneof" json:"sharesTraded,omitempty"`
	Turnover     *float64 `protobuf:"fixed64,3,opt,name=turnover,proto3,oneof" json:"turnover,omitempty"`
	HighPrice    *float64 `protobuf:"fixed64,4,opt,name=highPrice,proto3,oneof" json:"highPrice,omitempty"`
	LowPrice     *float64 `protobuf:"fixed64,5,opt,name=lowPrice,proto3,oneof" json:"lowPrice,omitempty"`
	LastPrice    *float64 `protobuf:"fixed64,6,opt,name=lastPrice,proto3,oneof" json:"lastPrice,omitempty"`
	OpeningPrice *float64 `protobuf:"fixed64,7,opt,name=openingPrice,proto3,oneof" json:"openingPrice,omitempty"`
}

func (x *CNStatistics) Reset() {
	*x = CNStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNStatistics) ProtoMessage() {}

func (x *CNStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNStatistics.ProtoReflect.Descriptor instead.
func (*CNStatistics) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{73}
}

func (x *CNStatistics) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *CNStatistics) GetSharesTraded() int64 {
	if x != nil && x.SharesTraded != nil {
		return *x.SharesTraded
	}
	return 0
}

func (x *CNStatistics) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *CNStatistics) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *CNStatistics) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *CNStatistics) GetLastPrice() float64 {
	if x != nil && x.LastPrice != nil {
		return *x.LastPrice
	}
	return 0
}

func (x *CNStatistics) GetOpeningPrice() float64 {
	if x != nil && x.OpeningPrice != nil {
		return *x.OpeningPrice
	}
	return 0
}

type CNTopBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityCode         *int64   `protobuf:"varint,1,opt,name=securityCode,proto3,oneof" json:"securityCode,omitempty"`
	AggregateBidQuantity *int64   `protobuf:"varint,2,opt,name=aggregateBidQuantity,proto3,oneof" json:"aggregateBidQuantity,omitempty"`
	AggregateAskQuantity *int64   `protobuf:"varint,3,opt,name=aggregateAskQuantity,proto3,oneof" json:"aggregateAskQuantity,omitempty"`
	BidPrice             *float64 `protobuf:"fixed64,4,opt,name=bidPrice,proto3,oneof" json:"bidPrice,omitempty"`
	AskPrice             *float64 `protobuf:"fixed64,5,opt,name=askPrice,proto3,oneof" json:"askPrice,omitempty"`
}

func (x *CNTopBook) Reset() {
	*x = CNTopBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNTopBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNTopBook) ProtoMessage() {}

func (x *CNTopBook) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNTopBook.ProtoReflect.Descriptor instead.
func (*CNTopBook) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{74}
}

func (x *CNTopBook) GetSecurityCode() int64 {
	if x != nil && x.SecurityCode != nil {
		return *x.SecurityCode
	}
	return 0
}

func (x *CNTopBook) GetAggregateBidQuantity() int64 {
	if x != nil && x.AggregateBidQuantity != nil {
		return *x.AggregateBidQuantity
	}
	return 0
}

func (x *CNTopBook) GetAggregateAskQuantity() int64 {
	if x != nil && x.AggregateAskQuantity != nil {
		return *x.AggregateAskQuantity
	}
	return 0
}

func (x *CNTopBook) GetBidPrice() float64 {
	if x != nil && x.BidPrice != nil {
		return *x.BidPrice
	}
	return 0
}

func (x *CNTopBook) GetAskPrice() float64 {
	if x != nil && x.AskPrice != nil {
		return *x.AskPrice
	}
	return 0
}

type CertificationMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType *ActionType `protobuf:"varint,1,opt,name=actionType,proto3,enum=ActionType,oneof" json:"actionType,omitempty"` // 事件类型
	Auth       *string     `protobuf:"bytes,2,opt,name=auth,proto3,oneof" json:"auth,omitempty"`                              // 授权
	Response   *Resp       `protobuf:"bytes,3,opt,name=response,proto3,oneof" json:"response,omitempty"`                      // 响应
}

func (x *CertificationMsg) Reset() {
	*x = CertificationMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificationMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificationMsg) ProtoMessage() {}

func (x *CertificationMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificationMsg.ProtoReflect.Descriptor instead.
func (*CertificationMsg) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{75}
}

func (x *CertificationMsg) GetActionType() ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ActionType_Login
}

func (x *CertificationMsg) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

func (x *CertificationMsg) GetResponse() *Resp {
	if x != nil {
		return x.Response
	}
	return nil
}

type Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ResponseType `protobuf:"varint,1,opt,name=type,proto3,enum=ResponseType,oneof" json:"type,omitempty"`
	ErrorMsg *string       `protobuf:"bytes,2,opt,name=errorMsg,proto3,oneof" json:"errorMsg,omitempty"`
}

func (x *Resp) Reset() {
	*x = Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resp) ProtoMessage() {}

func (x *Resp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resp.ProtoReflect.Descriptor instead.
func (*Resp) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{76}
}

func (x *Resp) GetType() ResponseType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResponseType_Success
}

func (x *Resp) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType *Message_DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=Message_DataType,oneof" json:"data_type,omitempty"`
	// Types that are assignable to DataBody:
	//
	//	*Message_AddOddLotOrder
	//	*Message_AggregateOrderBookUpdate
	//	*Message_BrokerQueue
	//	*Message_ClosingPrice
	//	*Message_CurrencyRate
	//	*Message_DeleteOddLotOrder
	//	*Message_IndexData
	//	*Message_IndexDefinition
	//	*Message_IndicativeEquilibriumPrice
	//	*Message_LiquidityProvider
	//	*Message_MarketDefinition
	//	*Message_MarketTurnover
	//	*Message_News
	//	*Message_NominalPrice
	//	*Message_OrderImbalance
	//	*Message_ReferencePrice
	//	*Message_SecurityDefinition
	//	*Message_SecurityStatus
	//	*Message_Statistics
	//	*Message_StockConnectDailyQuotaBalance
	//	*Message_StockConnectMarketTurnover
	//	*Message_Trade
	//	*Message_TradeCancel
	//	*Message_TradingSessionStatus
	//	*Message_VCMTrigger
	//	*Message_Yield
	//	*Message_AdjustedClosingPrice
	//	*Message_DayTradeSummary
	//	*Message_DayTradeSummaryNextShares
	//	*Message_IPOInformation
	//	*Message_IPOQuotingPeriodUpdate
	//	*Message_LongAdjustedClosingPrice
	//	*Message_LongDayTradeSummary
	//	*Message_LongTradeCancelForNonNextSharesTrades
	//	*Message_LongTradeCorrectionForNonNextsharesTrades
	//	*Message_LongTradeReportForNonNextshares
	//	*Message_MWCBStatusMessage
	//	*Message_MarketWideCircuitBreaker
	//	*Message_OperationalHalt
	//	*Message_SaleConditionModifier
	//	*Message_ShortSaleRestrictionIndicatorMessage
	//	*Message_StockDirectory
	//	*Message_StockTradingAction
	//	*Message_SystemEventMessage
	//	*Message_TradeCancelForNextsharesTrades
	//	*Message_TradeCancelForNonNextSharesTrades
	//	*Message_TradeCorrectionForNextsharesTrades
	//	*Message_TradeCorrectionForNonNextsharesTrades
	//	*Message_TradeReportForNextshares
	//	*Message_TradeReportForNonNextshares
	//	*Message_QBBOMWCBBreachMessage
	//	*Message_QBBOMWCBDeclineLevelMessage
	//	*Message_QBBONextSharesQuotationMessage
	//	*Message_QBBOOperationalHalt
	//	*Message_QBBOQuotationMessage
	//	*Message_QBBORegShoRestriction
	//	*Message_QBBOStockDirectory
	//	*Message_QBBOStockTradingAction
	//	*Message_QBBOSystemEventMessage
	//	*Message_QBBOIPOQuotingPeriodUpdate
	//	*Message_CertificationMsg
	//	*Message_CNMarketDefinition
	//	*Message_CNSecurityDefinition
	//	*Message_CNSecurityStatus
	//	*Message_CNStatistics
	//	*Message_CNTopBook
	DataBody  isMessage_DataBody `protobuf_oneof:"dataBody"`
	Timestamp *int64             `protobuf:"varint,68,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pb_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pb_data_proto_rawDescGZIP(), []int{77}
}

func (x *Message) GetDataType() Message_DataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return Message_AddOddLotOrderType
}

func (m *Message) GetDataBody() isMessage_DataBody {
	if m != nil {
		return m.DataBody
	}
	return nil
}

func (x *Message) GetAddOddLotOrder() *AddOddLotOrder {
	if x, ok := x.GetDataBody().(*Message_AddOddLotOrder); ok {
		return x.AddOddLotOrder
	}
	return nil
}

func (x *Message) GetAggregateOrderBookUpdate() *AggregateOrderBookUpdate {
	if x, ok := x.GetDataBody().(*Message_AggregateOrderBookUpdate); ok {
		return x.AggregateOrderBookUpdate
	}
	return nil
}

func (x *Message) GetBrokerQueue() *BrokerQueue {
	if x, ok := x.GetDataBody().(*Message_BrokerQueue); ok {
		return x.BrokerQueue
	}
	return nil
}

func (x *Message) GetClosingPrice() *ClosingPrice {
	if x, ok := x.GetDataBody().(*Message_ClosingPrice); ok {
		return x.ClosingPrice
	}
	return nil
}

func (x *Message) GetCurrencyRate() *CurrencyRate {
	if x, ok := x.GetDataBody().(*Message_CurrencyRate); ok {
		return x.CurrencyRate
	}
	return nil
}

func (x *Message) GetDeleteOddLotOrder() *DeleteOddLotOrder {
	if x, ok := x.GetDataBody().(*Message_DeleteOddLotOrder); ok {
		return x.DeleteOddLotOrder
	}
	return nil
}

func (x *Message) GetIndexData() *IndexData {
	if x, ok := x.GetDataBody().(*Message_IndexData); ok {
		return x.IndexData
	}
	return nil
}

func (x *Message) GetIndexDefinition() *IndexDefinition {
	if x, ok := x.GetDataBody().(*Message_IndexDefinition); ok {
		return x.IndexDefinition
	}
	return nil
}

func (x *Message) GetIndicativeEquilibriumPrice() *IndicativeEquilibriumPrice {
	if x, ok := x.GetDataBody().(*Message_IndicativeEquilibriumPrice); ok {
		return x.IndicativeEquilibriumPrice
	}
	return nil
}

func (x *Message) GetLiquidityProvider() *LiquidityProvider {
	if x, ok := x.GetDataBody().(*Message_LiquidityProvider); ok {
		return x.LiquidityProvider
	}
	return nil
}

func (x *Message) GetMarketDefinition() *MarketDefinition {
	if x, ok := x.GetDataBody().(*Message_MarketDefinition); ok {
		return x.MarketDefinition
	}
	return nil
}

func (x *Message) GetMarketTurnover() *MarketTurnover {
	if x, ok := x.GetDataBody().(*Message_MarketTurnover); ok {
		return x.MarketTurnover
	}
	return nil
}

func (x *Message) GetNews() *News {
	if x, ok := x.GetDataBody().(*Message_News); ok {
		return x.News
	}
	return nil
}

func (x *Message) GetNominalPrice() *NominalPrice {
	if x, ok := x.GetDataBody().(*Message_NominalPrice); ok {
		return x.NominalPrice
	}
	return nil
}

func (x *Message) GetOrderImbalance() *OrderImbalance {
	if x, ok := x.GetDataBody().(*Message_OrderImbalance); ok {
		return x.OrderImbalance
	}
	return nil
}

func (x *Message) GetReferencePrice() *ReferencePrice {
	if x, ok := x.GetDataBody().(*Message_ReferencePrice); ok {
		return x.ReferencePrice
	}
	return nil
}

func (x *Message) GetSecurityDefinition() *SecurityDefinition {
	if x, ok := x.GetDataBody().(*Message_SecurityDefinition); ok {
		return x.SecurityDefinition
	}
	return nil
}

func (x *Message) GetSecurityStatus() *SecurityStatus {
	if x, ok := x.GetDataBody().(*Message_SecurityStatus); ok {
		return x.SecurityStatus
	}
	return nil
}

func (x *Message) GetStatistics() *Statistics {
	if x, ok := x.GetDataBody().(*Message_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *Message) GetStockConnectDailyQuotaBalance() *StockConnectDailyQuotaBalance {
	if x, ok := x.GetDataBody().(*Message_StockConnectDailyQuotaBalance); ok {
		return x.StockConnectDailyQuotaBalance
	}
	return nil
}

func (x *Message) GetStockConnectMarketTurnover() *StockConnectMarketTurnover {
	if x, ok := x.GetDataBody().(*Message_StockConnectMarketTurnover); ok {
		return x.StockConnectMarketTurnover
	}
	return nil
}

func (x *Message) GetTrade() *Trade {
	if x, ok := x.GetDataBody().(*Message_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *Message) GetTradeCancel() *TradeCancel {
	if x, ok := x.GetDataBody().(*Message_TradeCancel); ok {
		return x.TradeCancel
	}
	return nil
}

func (x *Message) GetTradingSessionStatus() *TradingSessionStatus {
	if x, ok := x.GetDataBody().(*Message_TradingSessionStatus); ok {
		return x.TradingSessionStatus
	}
	return nil
}

func (x *Message) GetVCMTrigger() *VCMTrigger {
	if x, ok := x.GetDataBody().(*Message_VCMTrigger); ok {
		return x.VCMTrigger
	}
	return nil
}

func (x *Message) GetYield() *Yield {
	if x, ok := x.GetDataBody().(*Message_Yield); ok {
		return x.Yield
	}
	return nil
}

func (x *Message) GetAdjustedClosingPrice() *AdjustedClosingPrice {
	if x, ok := x.GetDataBody().(*Message_AdjustedClosingPrice); ok {
		return x.AdjustedClosingPrice
	}
	return nil
}

func (x *Message) GetDayTradeSummary() *DayTradeSummary {
	if x, ok := x.GetDataBody().(*Message_DayTradeSummary); ok {
		return x.DayTradeSummary
	}
	return nil
}

func (x *Message) GetDayTradeSummaryNextShares() *DayTradeSummaryNextShares {
	if x, ok := x.GetDataBody().(*Message_DayTradeSummaryNextShares); ok {
		return x.DayTradeSummaryNextShares
	}
	return nil
}

func (x *Message) GetIPOInformation() *IPOInformation {
	if x, ok := x.GetDataBody().(*Message_IPOInformation); ok {
		return x.IPOInformation
	}
	return nil
}

func (x *Message) GetIPOQuotingPeriodUpdate() *IPOQuotingPeriodUpdate {
	if x, ok := x.GetDataBody().(*Message_IPOQuotingPeriodUpdate); ok {
		return x.IPOQuotingPeriodUpdate
	}
	return nil
}

func (x *Message) GetLongAdjustedClosingPrice() *LongAdjustedClosingPrice {
	if x, ok := x.GetDataBody().(*Message_LongAdjustedClosingPrice); ok {
		return x.LongAdjustedClosingPrice
	}
	return nil
}

func (x *Message) GetLongDayTradeSummary() *LongDayTradeSummary {
	if x, ok := x.GetDataBody().(*Message_LongDayTradeSummary); ok {
		return x.LongDayTradeSummary
	}
	return nil
}

func (x *Message) GetLongTradeCancelForNonNextSharesTrades() *LongTradeCancelForNonNextSharesTrades {
	if x, ok := x.GetDataBody().(*Message_LongTradeCancelForNonNextSharesTrades); ok {
		return x.LongTradeCancelForNonNextSharesTrades
	}
	return nil
}

func (x *Message) GetLongTradeCorrectionForNonNextsharesTrades() *LongTradeCorrectionForNonNextsharesTrades {
	if x, ok := x.GetDataBody().(*Message_LongTradeCorrectionForNonNextsharesTrades); ok {
		return x.LongTradeCorrectionForNonNextsharesTrades
	}
	return nil
}

func (x *Message) GetLongTradeReportForNonNextshares() *LongTradeReportForNonNextshares {
	if x, ok := x.GetDataBody().(*Message_LongTradeReportForNonNextshares); ok {
		return x.LongTradeReportForNonNextshares
	}
	return nil
}

func (x *Message) GetMWCBStatusMessage() *MWCBStatusMessage {
	if x, ok := x.GetDataBody().(*Message_MWCBStatusMessage); ok {
		return x.MWCBStatusMessage
	}
	return nil
}

func (x *Message) GetMarketWideCircuitBreaker() *MarketWideCircuitBreaker {
	if x, ok := x.GetDataBody().(*Message_MarketWideCircuitBreaker); ok {
		return x.MarketWideCircuitBreaker
	}
	return nil
}

func (x *Message) GetOperationalHalt() *OperationalHalt {
	if x, ok := x.GetDataBody().(*Message_OperationalHalt); ok {
		return x.OperationalHalt
	}
	return nil
}

func (x *Message) GetSaleConditionModifier() *SaleConditionModifier {
	if x, ok := x.GetDataBody().(*Message_SaleConditionModifier); ok {
		return x.SaleConditionModifier
	}
	return nil
}

func (x *Message) GetShortSaleRestrictionIndicatorMessage() *ShortSaleRestrictionIndicatorMessage {
	if x, ok := x.GetDataBody().(*Message_ShortSaleRestrictionIndicatorMessage); ok {
		return x.ShortSaleRestrictionIndicatorMessage
	}
	return nil
}

func (x *Message) GetStockDirectory() *StockDirectory {
	if x, ok := x.GetDataBody().(*Message_StockDirectory); ok {
		return x.StockDirectory
	}
	return nil
}

func (x *Message) GetStockTradingAction() *StockTradingAction {
	if x, ok := x.GetDataBody().(*Message_StockTradingAction); ok {
		return x.StockTradingAction
	}
	return nil
}

func (x *Message) GetSystemEventMessage() *SystemEventMessage {
	if x, ok := x.GetDataBody().(*Message_SystemEventMessage); ok {
		return x.SystemEventMessage
	}
	return nil
}

func (x *Message) GetTradeCancelForNextsharesTrades() *TradeCancelForNextsharesTrades {
	if x, ok := x.GetDataBody().(*Message_TradeCancelForNextsharesTrades); ok {
		return x.TradeCancelForNextsharesTrades
	}
	return nil
}

func (x *Message) GetTradeCancelForNonNextSharesTrades() *TradeCancelForNonNextSharesTrades {
	if x, ok := x.GetDataBody().(*Message_TradeCancelForNonNextSharesTrades); ok {
		return x.TradeCancelForNonNextSharesTrades
	}
	return nil
}

func (x *Message) GetTradeCorrectionForNextsharesTrades() *TradeCorrectionForNextsharesTrades {
	if x, ok := x.GetDataBody().(*Message_TradeCorrectionForNextsharesTrades); ok {
		return x.TradeCorrectionForNextsharesTrades
	}
	return nil
}

func (x *Message) GetTradeCorrectionForNonNextsharesTrades() *TradeCorrectionForNonNextsharesTrades {
	if x, ok := x.GetDataBody().(*Message_TradeCorrectionForNonNextsharesTrades); ok {
		return x.TradeCorrectionForNonNextsharesTrades
	}
	return nil
}

func (x *Message) GetTradeReportForNextshares() *TradeReportForNextshares {
	if x, ok := x.GetDataBody().(*Message_TradeReportForNextshares); ok {
		return x.TradeReportForNextshares
	}
	return nil
}

func (x *Message) GetTradeReportForNonNextshares() *TradeReportForNonNextshares {
	if x, ok := x.GetDataBody().(*Message_TradeReportForNonNextshares); ok {
		return x.TradeReportForNonNextshares
	}
	return nil
}

func (x *Message) GetQBBOMWCBBreachMessage() *QBBOMWCBBreachMessage {
	if x, ok := x.GetDataBody().(*Message_QBBOMWCBBreachMessage); ok {
		return x.QBBOMWCBBreachMessage
	}
	return nil
}

func (x *Message) GetQBBOMWCBDeclineLevelMessage() *QBBOMWCBDeclineLevelMessage {
	if x, ok := x.GetDataBody().(*Message_QBBOMWCBDeclineLevelMessage); ok {
		return x.QBBOMWCBDeclineLevelMessage
	}
	return nil
}

func (x *Message) GetQBBONextSharesQuotationMessage() *QBBONextSharesQuotationMessage {
	if x, ok := x.GetDataBody().(*Message_QBBONextSharesQuotationMessage); ok {
		return x.QBBONextSharesQuotationMessage
	}
	return nil
}

func (x *Message) GetQBBOOperationalHalt() *QBBOOperationalHalt {
	if x, ok := x.GetDataBody().(*Message_QBBOOperationalHalt); ok {
		return x.QBBOOperationalHalt
	}
	return nil
}

func (x *Message) GetQBBOQuotationMessage() *QBBOQuotationMessage {
	if x, ok := x.GetDataBody().(*Message_QBBOQuotationMessage); ok {
		return x.QBBOQuotationMessage
	}
	return nil
}

func (x *Message) GetQBBORegShoRestriction() *QBBORegShoRestriction {
	if x, ok := x.GetDataBody().(*Message_QBBORegShoRestriction); ok {
		return x.QBBORegShoRestriction
	}
	return nil
}

func (x *Message) GetQBBOStockDirectory() *QBBOStockDirectory {
	if x, ok := x.GetDataBody().(*Message_QBBOStockDirectory); ok {
		return x.QBBOStockDirectory
	}
	return nil
}

func (x *Message) GetQBBOStockTradingAction() *QBBOStockTradingAction {
	if x, ok := x.GetDataBody().(*Message_QBBOStockTradingAction); ok {
		return x.QBBOStockTradingAction
	}
	return nil
}

func (x *Message) GetQBBOSystemEventMessage() *QBBOSystemEventMessage {
	if x, ok := x.GetDataBody().(*Message_QBBOSystemEventMessage); ok {
		return x.QBBOSystemEventMessage
	}
	return nil
}

func (x *Message) GetQBBOIPOQuotingPeriodUpdate() *QBBOIPOQuotingPeriodUpdate {
	if x, ok := x.GetDataBody().(*Message_QBBOIPOQuotingPeriodUpdate); ok {
		return x.QBBOIPOQuotingPeriodUpdate
	}
	return nil
}

func (x *Message) GetCertificationMsg() *CertificationMsg {
	if x, ok := x.GetDataBody().(*Message_CertificationMsg); ok {
		return x.CertificationMsg
	}
	return nil
}

func (x *Message) GetCNMarketDefinition() *CNMarketDefinition {
	if x, ok := x.GetDataBody().(*Message_CNMarketDefinition); ok {
		return x.CNMarketDefinition
	}
	return nil
}

func (x *Message) GetCNSecurityDefinition() *CNSecurityDefinition {
	if x, ok := x.GetDataBody().(*Message_CNSecurityDefinition); ok {
		return x.CNSecurityDefinition
	}
	return nil
}

func (x *Message) GetCNSecurityStatus() *CNSecurityStatus {
	if x, ok := x.GetDataBody().(*Message_CNSecurityStatus); ok {
		return x.CNSecurityStatus
	}
	return nil
}

func (x *Message) GetCNStatistics() *CNStatistics {
	if x, ok := x.GetDataBody().(*Message_CNStatistics); ok {
		return x.CNStatistics
	}
	return nil
}

func (x *Message) GetCNTopBook() *CNTopBook {
	if x, ok := x.GetDataBody().(*Message_CNTopBook); ok {
		return x.CNTopBook
	}
	return nil
}

func (x *Message) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type isMessage_DataBody interface {
	isMessage_DataBody()
}

type Message_AddOddLotOrder struct {
	AddOddLotOrder *AddOddLotOrder `protobuf:"bytes,2,opt,name=addOddLotOrder,proto3,oneof"`
}

type Message_AggregateOrderBookUpdate struct {
	AggregateOrderBookUpdate *AggregateOrderBookUpdate `protobuf:"bytes,3,opt,name=aggregateOrderBookUpdate,proto3,oneof"`
}

type Message_BrokerQueue struct {
	BrokerQueue *BrokerQueue `protobuf:"bytes,4,opt,name=brokerQueue,proto3,oneof"`
}

type Message_ClosingPrice struct {
	ClosingPrice *ClosingPrice `protobuf:"bytes,5,opt,name=closingPrice,proto3,oneof"`
}

type Message_CurrencyRate struct {
	CurrencyRate *CurrencyRate `protobuf:"bytes,6,opt,name=currencyRate,proto3,oneof"`
}

type Message_DeleteOddLotOrder struct {
	DeleteOddLotOrder *DeleteOddLotOrder `protobuf:"bytes,7,opt,name=deleteOddLotOrder,proto3,oneof"`
}

type Message_IndexData struct {
	IndexData *IndexData `protobuf:"bytes,8,opt,name=indexData,proto3,oneof"`
}

type Message_IndexDefinition struct {
	IndexDefinition *IndexDefinition `protobuf:"bytes,9,opt,name=indexDefinition,proto3,oneof"`
}

type Message_IndicativeEquilibriumPrice struct {
	IndicativeEquilibriumPrice *IndicativeEquilibriumPrice `protobuf:"bytes,10,opt,name=indicativeEquilibriumPrice,proto3,oneof"`
}

type Message_LiquidityProvider struct {
	LiquidityProvider *LiquidityProvider `protobuf:"bytes,11,opt,name=liquidityProvider,proto3,oneof"`
}

type Message_MarketDefinition struct {
	MarketDefinition *MarketDefinition `protobuf:"bytes,12,opt,name=marketDefinition,proto3,oneof"`
}

type Message_MarketTurnover struct {
	MarketTurnover *MarketTurnover `protobuf:"bytes,13,opt,name=marketTurnover,proto3,oneof"`
}

type Message_News struct {
	News *News `protobuf:"bytes,14,opt,name=news,proto3,oneof"`
}

type Message_NominalPrice struct {
	NominalPrice *NominalPrice `protobuf:"bytes,15,opt,name=nominalPrice,proto3,oneof"`
}

type Message_OrderImbalance struct {
	OrderImbalance *OrderImbalance `protobuf:"bytes,16,opt,name=orderImbalance,proto3,oneof"`
}

type Message_ReferencePrice struct {
	ReferencePrice *ReferencePrice `protobuf:"bytes,17,opt,name=referencePrice,proto3,oneof"`
}

type Message_SecurityDefinition struct {
	SecurityDefinition *SecurityDefinition `protobuf:"bytes,18,opt,name=securityDefinition,proto3,oneof"`
}

type Message_SecurityStatus struct {
	SecurityStatus *SecurityStatus `protobuf:"bytes,19,opt,name=securityStatus,proto3,oneof"`
}

type Message_Statistics struct {
	Statistics *Statistics `protobuf:"bytes,20,opt,name=statistics,proto3,oneof"`
}

type Message_StockConnectDailyQuotaBalance struct {
	StockConnectDailyQuotaBalance *StockConnectDailyQuotaBalance `protobuf:"bytes,21,opt,name=stockConnectDailyQuotaBalance,proto3,oneof"`
}

type Message_StockConnectMarketTurnover struct {
	StockConnectMarketTurnover *StockConnectMarketTurnover `protobuf:"bytes,22,opt,name=stockConnectMarketTurnover,proto3,oneof"`
}

type Message_Trade struct {
	Trade *Trade `protobuf:"bytes,23,opt,name=trade,proto3,oneof"`
}

type Message_TradeCancel struct {
	TradeCancel *TradeCancel `protobuf:"bytes,24,opt,name=tradeCancel,proto3,oneof"`
}

type Message_TradingSessionStatus struct {
	TradingSessionStatus *TradingSessionStatus `protobuf:"bytes,25,opt,name=tradingSessionStatus,proto3,oneof"`
}

type Message_VCMTrigger struct {
	VCMTrigger *VCMTrigger `protobuf:"bytes,26,opt,name=vCMTrigger,proto3,oneof"`
}

type Message_Yield struct {
	Yield *Yield `protobuf:"bytes,27,opt,name=yield,proto3,oneof"`
}

type Message_AdjustedClosingPrice struct {
	AdjustedClosingPrice *AdjustedClosingPrice `protobuf:"bytes,28,opt,name=adjustedClosingPrice,proto3,oneof"`
}

type Message_DayTradeSummary struct {
	DayTradeSummary *DayTradeSummary `protobuf:"bytes,29,opt,name=dayTradeSummary,proto3,oneof"`
}

type Message_DayTradeSummaryNextShares struct {
	DayTradeSummaryNextShares *DayTradeSummaryNextShares `protobuf:"bytes,30,opt,name=dayTradeSummaryNextShares,proto3,oneof"`
}

type Message_IPOInformation struct {
	IPOInformation *IPOInformation `protobuf:"bytes,31,opt,name=iPOInformation,proto3,oneof"`
}

type Message_IPOQuotingPeriodUpdate struct {
	IPOQuotingPeriodUpdate *IPOQuotingPeriodUpdate `protobuf:"bytes,32,opt,name=iPOQuotingPeriodUpdate,proto3,oneof"`
}

type Message_LongAdjustedClosingPrice struct {
	LongAdjustedClosingPrice *LongAdjustedClosingPrice `protobuf:"bytes,33,opt,name=longAdjustedClosingPrice,proto3,oneof"`
}

type Message_LongDayTradeSummary struct {
	LongDayTradeSummary *LongDayTradeSummary `protobuf:"bytes,34,opt,name=longDayTradeSummary,proto3,oneof"`
}

type Message_LongTradeCancelForNonNextSharesTrades struct {
	LongTradeCancelForNonNextSharesTrades *LongTradeCancelForNonNextSharesTrades `protobuf:"bytes,35,opt,name=longTradeCancelForNonNextSharesTrades,proto3,oneof"`
}

type Message_LongTradeCorrectionForNonNextsharesTrades struct {
	LongTradeCorrectionForNonNextsharesTrades *LongTradeCorrectionForNonNextsharesTrades `protobuf:"bytes,36,opt,name=longTradeCorrectionForNonNextsharesTrades,proto3,oneof"`
}

type Message_LongTradeReportForNonNextshares struct {
	LongTradeReportForNonNextshares *LongTradeReportForNonNextshares `protobuf:"bytes,37,opt,name=longTradeReportForNonNextshares,proto3,oneof"`
}

type Message_MWCBStatusMessage struct {
	MWCBStatusMessage *MWCBStatusMessage `protobuf:"bytes,38,opt,name=mWCBStatusMessage,proto3,oneof"`
}

type Message_MarketWideCircuitBreaker struct {
	MarketWideCircuitBreaker *MarketWideCircuitBreaker `protobuf:"bytes,39,opt,name=marketWideCircuitBreaker,proto3,oneof"`
}

type Message_OperationalHalt struct {
	OperationalHalt *OperationalHalt `protobuf:"bytes,40,opt,name=operationalHalt,proto3,oneof"`
}

type Message_SaleConditionModifier struct {
	SaleConditionModifier *SaleConditionModifier `protobuf:"bytes,41,opt,name=saleConditionModifier,proto3,oneof"`
}

type Message_ShortSaleRestrictionIndicatorMessage struct {
	ShortSaleRestrictionIndicatorMessage *ShortSaleRestrictionIndicatorMessage `protobuf:"bytes,42,opt,name=shortSaleRestrictionIndicatorMessage,proto3,oneof"`
}

type Message_StockDirectory struct {
	StockDirectory *StockDirectory `protobuf:"bytes,43,opt,name=stockDirectory,proto3,oneof"`
}

type Message_StockTradingAction struct {
	StockTradingAction *StockTradingAction `protobuf:"bytes,44,opt,name=stockTradingAction,proto3,oneof"`
}

type Message_SystemEventMessage struct {
	SystemEventMessage *SystemEventMessage `protobuf:"bytes,45,opt,name=systemEventMessage,proto3,oneof"`
}

type Message_TradeCancelForNextsharesTrades struct {
	TradeCancelForNextsharesTrades *TradeCancelForNextsharesTrades `protobuf:"bytes,46,opt,name=tradeCancelForNextsharesTrades,proto3,oneof"`
}

type Message_TradeCancelForNonNextSharesTrades struct {
	TradeCancelForNonNextSharesTrades *TradeCancelForNonNextSharesTrades `protobuf:"bytes,47,opt,name=tradeCancelForNonNextSharesTrades,proto3,oneof"`
}

type Message_TradeCorrectionForNextsharesTrades struct {
	TradeCorrectionForNextsharesTrades *TradeCorrectionForNextsharesTrades `protobuf:"bytes,48,opt,name=tradeCorrectionForNextsharesTrades,proto3,oneof"`
}

type Message_TradeCorrectionForNonNextsharesTrades struct {
	TradeCorrectionForNonNextsharesTrades *TradeCorrectionForNonNextsharesTrades `protobuf:"bytes,49,opt,name=tradeCorrectionForNonNextsharesTrades,proto3,oneof"`
}

type Message_TradeReportForNextshares struct {
	TradeReportForNextshares *TradeReportForNextshares `protobuf:"bytes,50,opt,name=tradeReportForNextshares,proto3,oneof"`
}

type Message_TradeReportForNonNextshares struct {
	TradeReportForNonNextshares *TradeReportForNonNextshares `protobuf:"bytes,51,opt,name=tradeReportForNonNextshares,proto3,oneof"`
}

type Message_QBBOMWCBBreachMessage struct {
	QBBOMWCBBreachMessage *QBBOMWCBBreachMessage `protobuf:"bytes,52,opt,name=qBBOMWCBBreachMessage,proto3,oneof"`
}

type Message_QBBOMWCBDeclineLevelMessage struct {
	QBBOMWCBDeclineLevelMessage *QBBOMWCBDeclineLevelMessage `protobuf:"bytes,53,opt,name=qBBOMWCBDeclineLevelMessage,proto3,oneof"`
}

type Message_QBBONextSharesQuotationMessage struct {
	QBBONextSharesQuotationMessage *QBBONextSharesQuotationMessage `protobuf:"bytes,54,opt,name=qBBONextSharesQuotationMessage,proto3,oneof"`
}

type Message_QBBOOperationalHalt struct {
	QBBOOperationalHalt *QBBOOperationalHalt `protobuf:"bytes,55,opt,name=qBBOOperationalHalt,proto3,oneof"`
}

type Message_QBBOQuotationMessage struct {
	QBBOQuotationMessage *QBBOQuotationMessage `protobuf:"bytes,56,opt,name=qBBOQuotationMessage,proto3,oneof"`
}

type Message_QBBORegShoRestriction struct {
	QBBORegShoRestriction *QBBORegShoRestriction `protobuf:"bytes,57,opt,name=qBBORegShoRestriction,proto3,oneof"`
}

type Message_QBBOStockDirectory struct {
	QBBOStockDirectory *QBBOStockDirectory `protobuf:"bytes,58,opt,name=qBBOStockDirectory,proto3,oneof"`
}

type Message_QBBOStockTradingAction struct {
	QBBOStockTradingAction *QBBOStockTradingAction `protobuf:"bytes,59,opt,name=qBBOStockTradingAction,proto3,oneof"`
}

type Message_QBBOSystemEventMessage struct {
	QBBOSystemEventMessage *QBBOSystemEventMessage `protobuf:"bytes,60,opt,name=qBBOSystemEventMessage,proto3,oneof"`
}

type Message_QBBOIPOQuotingPeriodUpdate struct {
	QBBOIPOQuotingPeriodUpdate *QBBOIPOQuotingPeriodUpdate `protobuf:"bytes,61,opt,name=qBBOIPOQuotingPeriodUpdate,proto3,oneof"`
}

type Message_CertificationMsg struct {
	CertificationMsg *CertificationMsg `protobuf:"bytes,62,opt,name=certificationMsg,proto3,oneof"`
}

type Message_CNMarketDefinition struct {
	CNMarketDefinition *CNMarketDefinition `protobuf:"bytes,63,opt,name=cNMarketDefinition,proto3,oneof"`
}

type Message_CNSecurityDefinition struct {
	CNSecurityDefinition *CNSecurityDefinition `protobuf:"bytes,64,opt,name=cNSecurityDefinition,proto3,oneof"`
}

type Message_CNSecurityStatus struct {
	CNSecurityStatus *CNSecurityStatus `protobuf:"bytes,65,opt,name=cNSecurityStatus,proto3,oneof"`
}

type Message_CNStatistics struct {
	CNStatistics *CNStatistics `protobuf:"bytes,66,opt,name=cNStatistics,proto3,oneof"`
}

type Message_CNTopBook struct {
	CNTopBook *CNTopBook `protobuf:"bytes,67,opt,name=cNTopBook,proto3,oneof"`
}

func (*Message_AddOddLotOrder) isMessage_DataBody() {}

func (*Message_AggregateOrderBookUpdate) isMessage_DataBody() {}

func (*Message_BrokerQueue) isMessage_DataBody() {}

func (*Message_ClosingPrice) isMessage_DataBody() {}

func (*Message_CurrencyRate) isMessage_DataBody() {}

func (*Message_DeleteOddLotOrder) isMessage_DataBody() {}

func (*Message_IndexData) isMessage_DataBody() {}

func (*Message_IndexDefinition) isMessage_DataBody() {}

func (*Message_IndicativeEquilibriumPrice) isMessage_DataBody() {}

func (*Message_LiquidityProvider) isMessage_DataBody() {}

func (*Message_MarketDefinition) isMessage_DataBody() {}

func (*Message_MarketTurnover) isMessage_DataBody() {}

func (*Message_News) isMessage_DataBody() {}

func (*Message_NominalPrice) isMessage_DataBody() {}

func (*Message_OrderImbalance) isMessage_DataBody() {}

func (*Message_ReferencePrice) isMessage_DataBody() {}

func (*Message_SecurityDefinition) isMessage_DataBody() {}

func (*Message_SecurityStatus) isMessage_DataBody() {}

func (*Message_Statistics) isMessage_DataBody() {}

func (*Message_StockConnectDailyQuotaBalance) isMessage_DataBody() {}

func (*Message_StockConnectMarketTurnover) isMessage_DataBody() {}

func (*Message_Trade) isMessage_DataBody() {}

func (*Message_TradeCancel) isMessage_DataBody() {}

func (*Message_TradingSessionStatus) isMessage_DataBody() {}

func (*Message_VCMTrigger) isMessage_DataBody() {}

func (*Message_Yield) isMessage_DataBody() {}

func (*Message_AdjustedClosingPrice) isMessage_DataBody() {}

func (*Message_DayTradeSummary) isMessage_DataBody() {}

func (*Message_DayTradeSummaryNextShares) isMessage_DataBody() {}

func (*Message_IPOInformation) isMessage_DataBody() {}

func (*Message_IPOQuotingPeriodUpdate) isMessage_DataBody() {}

func (*Message_LongAdjustedClosingPrice) isMessage_DataBody() {}

func (*Message_LongDayTradeSummary) isMessage_DataBody() {}

func (*Message_LongTradeCancelForNonNextSharesTrades) isMessage_DataBody() {}

func (*Message_LongTradeCorrectionForNonNextsharesTrades) isMessage_DataBody() {}

func (*Message_LongTradeReportForNonNextshares) isMessage_DataBody() {}

func (*Message_MWCBStatusMessage) isMessage_DataBody() {}

func (*Message_MarketWideCircuitBreaker) isMessage_DataBody() {}

func (*Message_OperationalHalt) isMessage_DataBody() {}

func (*Message_SaleConditionModifier) isMessage_DataBody() {}

func (*Message_ShortSaleRestrictionIndicatorMessage) isMessage_DataBody() {}

func (*Message_StockDirectory) isMessage_DataBody() {}

func (*Message_StockTradingAction) isMessage_DataBody() {}

func (*Message_SystemEventMessage) isMessage_DataBody() {}

func (*Message_TradeCancelForNextsharesTrades) isMessage_DataBody() {}

func (*Message_TradeCancelForNonNextSharesTrades) isMessage_DataBody() {}

func (*Message_TradeCorrectionForNextsharesTrades) isMessage_DataBody() {}

func (*Message_TradeCorrectionForNonNextsharesTrades) isMessage_DataBody() {}

func (*Message_TradeReportForNextshares) isMessage_DataBody() {}

func (*Message_TradeReportForNonNextshares) isMessage_DataBody() {}

func (*Message_QBBOMWCBBreachMessage) isMessage_DataBody() {}

func (*Message_QBBOMWCBDeclineLevelMessage) isMessage_DataBody() {}

func (*Message_QBBONextSharesQuotationMessage) isMessage_DataBody() {}

func (*Message_QBBOOperationalHalt) isMessage_DataBody() {}

func (*Message_QBBOQuotationMessage) isMessage_DataBody() {}

func (*Message_QBBORegShoRestriction) isMessage_DataBody() {}

func (*Message_QBBOStockDirectory) isMessage_DataBody() {}

func (*Message_QBBOStockTradingAction) isMessage_DataBody() {}

func (*Message_QBBOSystemEventMessage) isMessage_DataBody() {}

func (*Message_QBBOIPOQuotingPeriodUpdate) isMessage_DataBody() {}

func (*Message_CertificationMsg) isMessage_DataBody() {}

func (*Message_CNMarketDefinition) isMessage_DataBody() {}

func (*Message_CNSecurityDefinition) isMessage_DataBody() {}

func (*Message_CNSecurityStatus) isMessage_DataBody() {}

func (*Message_CNStatistics) isMessage_DataBody() {}

func (*Message_CNTopBook) isMessage_DataBody() {}

var File_pb_data_proto protoreflect.FileDescriptor

var file_pb_data_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xec, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x14, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb4,
	0x03, 0x0a, 0x0f, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x02, 0x52, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x48, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x61, 0x73, 0x64,
	0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x19, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6e, 0x61, 0x73, 0x64,
	0x61, 0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x48, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x4e, 0x41, 0x56, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x13, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x4e,
	0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x12, 0x4e, 0x41, 0x56, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x12,
	0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x14, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4e,
	0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0e, 0x49, 0x50, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x02, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x16,
	0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x17, 0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x17, 0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x60, 0x0a, 0x19, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x02, 0x52, 0x19, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x50, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x69, 0x50, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x50, 0x4f, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x4d, 0x57, 0x43, 0x42, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x62, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x57, 0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52,
	0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x22, 0xc5, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x53,
	0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x48, 0x02, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x48, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x34, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x34, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x67, 0x53,
	0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x53,
	0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x08, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49,
	0x66, 0x48, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x1b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48,
	0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x50, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66,
	0x48, 0x09, 0x52, 0x07, 0x49, 0x50, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x16, 0x6c, 0x55, 0x4c, 0x44, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x4c, 0x55, 0x4c, 0x44, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x0a, 0x52, 0x16, 0x6c, 0x55, 0x4c,
	0x44, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x45, 0x54, 0x50, 0x6c, 0x61, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x49, 0x66, 0x48, 0x0b, 0x52, 0x06, 0x45, 0x54, 0x50, 0x6c, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x54, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x11,
	0x45, 0x54, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48, 0x0d, 0x52, 0x10,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x62, 0x65, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f,
	0x6d, 0x62, 0x65, 0x72, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f,
	0x74, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c,
	0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x50, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6c, 0x55, 0x4c, 0x44, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x54, 0x50, 0x6c,
	0x61, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x54, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x49, 0x44, 0x22, 0xd3, 0x02,
	0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x06, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52,
	0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x61, 0x0a, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x06, 0x52, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x07, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x20,
	0x0a, 0x1e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xe6, 0x09, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x65,
	0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x41, 0x56,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x05, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x41,
	0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x1b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x13, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x18, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0b, 0x52, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x1e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0xb0, 0x08, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x15,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x1b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52,
	0x12, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x1e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0b, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0xf7, 0x05, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x12, 0x75, 0x0a, 0x21, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x21, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x4e, 0x41, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0f, 0x4e, 0x41, 0x56,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x07, 0x52, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4e, 0x41, 0x56,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xa8, 0x05,
	0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x75, 0x0a,
	0x21, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x21,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x06, 0x52, 0x15, 0x73, 0x61,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x07, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x24, 0x0a, 0x22, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x51, 0x42, 0x42, 0x4f,
	0x4d, 0x57, 0x43, 0x42, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x95,
	0x01, 0x0a, 0x1b, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x06, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x06, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x33, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x51, 0x42, 0x42, 0x4f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xbd, 0x05, 0x0a, 0x1e, 0x51, 0x42, 0x42, 0x4f, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x6e, 0x65, 0x78,
	0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0d,
	0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x11, 0x6e,
	0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73,
	0x74, 0x42, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x1b, 0x6e, 0x61, 0x73, 0x64,
	0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52,
	0x19, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x13, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65,
	0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x1d, 0x6e,
	0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x61, 0x73,
	0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42,
	0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x51, 0x42, 0x42, 0x4f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x48, 0x61, 0x6c,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x03, 0x0a, 0x14, 0x51, 0x42, 0x42, 0x4f, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x11, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x14, 0x6e,
	0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71,
	0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x13, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x51, 0x42, 0x42, 0x4f,
	0x52, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbb, 0x08, 0x0a, 0x12, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x18,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x73, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x48, 0x07, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48, 0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x50, 0x4f, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48, 0x09, 0x52, 0x07, 0x49, 0x50, 0x4f, 0x46, 0x6c,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x16, 0x6c, 0x55, 0x4c, 0x44, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x55, 0x4c, 0x44, 0x52, 0x75, 0x6c, 0x65,
	0x48, 0x0a, 0x52, 0x16, 0x6c, 0x55, 0x4c, 0x44, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x06, 0x45, 0x54, 0x50, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x48, 0x0b, 0x52, 0x06, 0x45,
	0x54, 0x50, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x54, 0x50, 0x4c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x11, 0x45, 0x54, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x49, 0x66, 0x48, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f,
	0x74, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c,
	0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x50, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6c, 0x55, 0x4c, 0x44, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x54, 0x50, 0x6c,
	0x61, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x54, 0x50, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x97, 0x02,
	0x0a, 0x16, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x02, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x16, 0x51, 0x42, 0x42, 0x4f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9f,
	0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x48, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x22, 0x7c, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60,
	0x0a, 0x0a, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x48, 0x03, 0x52, 0x0a, 0x62, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xc2,
	0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x48, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x22, 0xd5, 0x06, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x43, 0x68,
	0x67, 0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x67, 0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x41, 0x53, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x65, 0x41, 0x53, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0a, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x53, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x0b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x43, 0x68, 0x67, 0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x50, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x67,
	0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6e, 0x65, 0x74, 0x43, 0x68, 0x67, 0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x41, 0x53,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x67, 0x50, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79,
	0x50, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x14, 0x6e, 0x6f,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x14,
	0x6e, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xf5, 0x03, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4e, 0x65, 0x77,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0d, 0x6e, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x6f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x6e, 0x6f, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x6e, 0x6f, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x6f, 0x4e, 0x65, 0x77,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x07, 0x4e, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x48, 0x03, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x13, 0x4e, 0x6f, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x0e, 0x6c, 0x50, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x50, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x50, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4f,
	0x0a, 0x0c, 0x4e, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x0a, 0x0a, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x4e,
	0x6f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x4e, 0x6f, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x97, 0x02, 0x0a,
	0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6b, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6b, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6b, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x14, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x8d, 0x04, 0x0a, 0x13, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71,
	0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x48, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x61, 0x73, 0x64, 0x61,
	0x71, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x61,
	0x73, 0x64, 0x61, 0x71, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xe2, 0x05, 0x0a, 0x25, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x61, 0x0a, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x06, 0x52, 0x1d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x07, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xb4, 0x08, 0x0a, 0x29, 0x4c, 0x6f, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04,
	0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x1e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x1e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x6d, 0x0a,
	0x1f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xf2, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xca, 0x02, 0x0a, 0x1a, 0x51, 0x42, 0x42, 0x4f, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x69,
	0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x17,
	0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x19, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x02, 0x52, 0x19,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x50, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x08, 0x69, 0x50, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x50, 0x4f, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x50, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb5,
	0x17, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x05, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x47, 0x43, 0x43, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x43, 0x43, 0x53, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x47, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x42, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0a, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x43, 0x4d, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x56, 0x43, 0x4d, 0x46, 0x6c,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48,
	0x0d, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x61, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x43, 0x41, 0x53, 0x53, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x0f, 0x52, 0x09, 0x43,
	0x43, 0x41, 0x53, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x11, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x10, 0x52, 0x11, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x11, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x15, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x45, 0x46,
	0x4e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x18,
	0x52, 0x07, 0x45, 0x46, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x1a, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x1b, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49,
	0x6e, 0x46, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1c, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x46, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x66, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x11, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x62, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x1f, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x20, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x21, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x22, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x77, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x74, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x23, 0x52, 0x13, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x48, 0x24, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x48, 0x25, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x27, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x48, 0x28, 0x52,
	0x13, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x29, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52,
	0x15, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x6e, 0x6f, 0x57,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x2b, 0x52, 0x18, 0x6e,
	0x6f, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x16, 0x6e, 0x6f,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x16, 0x6e, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x43, 0x43, 0x53, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x42, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x43, 0x4d, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x43, 0x43, 0x41, 0x53, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x74, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x6f, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x6f, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x46, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x46, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6e, 0x6f,
	0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x13, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x99, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x76, 0x43, 0x4d,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x11, 0x76, 0x43, 0x4d, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x06, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x15, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x76, 0x43, 0x4d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x77, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03,
	0x52, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62,
	0x75, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c,
	0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x62,
	0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x05,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x54, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x07, 0x74, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xf6, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x48, 0x01, 0x52, 0x13, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x15, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa1, 0x03, 0x0a, 0x0a, 0x56, 0x43, 0x4d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x76, 0x43, 0x4d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52,
	0x11, 0x76, 0x43, 0x4d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x76, 0x43, 0x4d, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0d,
	0x76, 0x43, 0x4d, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x76, 0x43, 0x4d, 0x55, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0d, 0x76, 0x43, 0x4d, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x66, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76,
	0x43, 0x4d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x43, 0x4d, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x43, 0x4d, 0x55, 0x70, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x05, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xa0, 0x02, 0x0a,
	0x12, 0x43, 0x4e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xe8, 0x05, 0x0a, 0x14, 0x43, 0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69, 0x73, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x03, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47,
	0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x42, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52,
	0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x48, 0x09,
	0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x47, 0x42, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x43,
	0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x01, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x02, 0x0a,
	0x0c, 0x43, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x09, 0x43, 0x4e,
	0x54, 0x6f, 0x70, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x73, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65,
	0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xbd, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x4f, 0x64, 0x64,
	0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x41, 0x64, 0x64, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73,
	0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x1d,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x43, 0x4d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x43, 0x4d, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x43, 0x4d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x19,
	0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x64,
	0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65,
	0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x69, 0x50, 0x4f, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x49, 0x50, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x50, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x16, 0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x69, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x48, 0x0a, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4c,
	0x6f, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x7e, 0x0a, 0x25, 0x6c, 0x6f, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e,
	0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x25, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x29, 0x6c, 0x6f,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x29, 0x6c, 0x6f, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e,
	0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x1f, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x6d, 0x57, 0x43, 0x42, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x57, 0x43, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x57, 0x43, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x57, 0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57,
	0x69, 0x64, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x61, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x7b, 0x0a, 0x24, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x24, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x65,
	0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72,
	0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x72, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x21, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f,
	0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x22, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x22, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x25, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e,
	0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x25, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78,
	0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65,
	0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78,
	0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x71, 0x42, 0x42, 0x4f, 0x4d, 0x57,
	0x43, 0x42, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x71, 0x42, 0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x1b, 0x71, 0x42, 0x42, 0x4f, 0x4d, 0x57,
	0x43, 0x42, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x51, 0x42,
	0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x71, 0x42, 0x42,
	0x4f, 0x4d, 0x57, 0x43, 0x42, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x1e, 0x71, 0x42, 0x42, 0x4f,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x1e, 0x71, 0x42, 0x42, 0x4f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x71, 0x42, 0x42, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x71, 0x42, 0x42, 0x4f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x4b, 0x0a,
	0x14, 0x71, 0x42, 0x42, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x51, 0x42,
	0x42, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x71, 0x42, 0x42, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x71, 0x42,
	0x42, 0x4f, 0x52, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x51, 0x42, 0x42, 0x4f,
	0x52, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x71, 0x42, 0x42, 0x4f, 0x52, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x12, 0x71, 0x42,
	0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x71,
	0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x51, 0x0a, 0x16, 0x71, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x71, 0x42,
	0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x16, 0x71, 0x42, 0x42, 0x4f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x71, 0x42, 0x42, 0x4f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x71, 0x42, 0x42, 0x4f, 0x49,
	0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x51, 0x42,
	0x42, 0x4f, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x71, 0x42, 0x42, 0x4f,
	0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x4e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x4e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x14, 0x63, 0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63, 0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x10, 0x63,
	0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x4e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0c,
	0x63, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x4e, 0x54, 0x6f, 0x70, 0x42, 0x6f, 0x6f, 0x6b, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x4e, 0x54, 0x6f, 0x70, 0x42, 0x6f, 0x6f, 0x6b,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x4e, 0x54, 0x6f, 0x70, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x22, 0xaa, 0x0f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0b,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x10,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x43, 0x4d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x18, 0x12, 0x0d, 0x0a,
	0x09, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x61,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x1b, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x4f, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1d, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1e, 0x12, 0x20,
	0x0a, 0x1c, 0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1f,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x20, 0x12, 0x2d, 0x0a,
	0x29, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x21, 0x12, 0x31, 0x0a, 0x2d,
	0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x22, 0x12,
	0x27, 0x0a, 0x23, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x57, 0x43, 0x42,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x64,
	0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x26, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x27, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x28, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2a, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2b, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78,
	0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x2c, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2d, 0x12, 0x2a,
	0x0a, 0x26, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2e, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2f, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x30, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e,
	0x4e, 0x65, 0x78, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x31,
	0x12, 0x1d, 0x0a, 0x19, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42, 0x42, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x32, 0x12,
	0x23, 0x0a, 0x1f, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x57, 0x43, 0x42, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x33, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x42, 0x42, 0x4f, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x34, 0x12, 0x1b, 0x0a, 0x17,
	0x51, 0x42, 0x42, 0x4f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48,
	0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x35, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x42, 0x42,
	0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x42, 0x42, 0x4f, 0x52,
	0x65, 0x67, 0x53, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x38, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x39, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x42, 0x42, 0x4f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x3a, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x42, 0x42, 0x4f, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x3b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x3c,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x3d, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x3e, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x3f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x40, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4e,
	0x54, 0x6f, 0x70, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x41, 0x42, 0x0a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x32, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x01, 0x2a, 0x61, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x48, 0x61,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x13, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x48, 0x61, 0x6c,
	0x74, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x01, 0x2a, 0x47,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x0d, 0x42, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x31,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x33, 0x10, 0x02, 0x2a, 0xcf, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x2a, 0xef, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x53, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x53, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x2a, 0xa2, 0x04, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x4e, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x52, 0x55, 0x50, 0x54, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x52, 0x55, 0x50, 0x54, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x4e, 0x51, 0x55, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x4e, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x52, 0x55, 0x50, 0x54, 0x10, 0x06, 0x12, 0x3e, 0x0a, 0x3a, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x4e, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x52, 0x55, 0x50, 0x54, 0x10, 0x07, 0x12, 0x4e, 0x0a, 0x4a, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x08, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x2a,
	0x8f, 0x01, 0x0a, 0x0a, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x38, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x45,
	0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x3f,
	0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x42, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0xa4, 0x01, 0x0a, 0x1c, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x3f, 0x49, 0x50, 0x4f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x49, 0x50, 0x4f, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x49, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x50, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x5f, 0x59, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x66, 0x5f, 0x4e, 0x10, 0x01, 0x2a, 0x4c, 0x0a,
	0x08, 0x4c, 0x55, 0x4c, 0x44, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x55, 0x4c,
	0x44, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x4e, 0x4d, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x53,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x54, 0x50, 0x53,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x55, 0x4c, 0x44, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x4e,
	0x4d, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x01, 0x2a, 0xc3, 0x03, 0x0a, 0x09,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75,
	0x72, 0x5f, 0x42, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x46, 0x6f, 0x75, 0x72, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f,
	0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f,
	0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x31, 0x10, 0x09, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x43, 0x52, 0x4f, 0x53,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x6f, 0x75, 0x72, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x5f,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0c, 0x2a, 0x80, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c,
	0x41, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x2a, 0xd4, 0x01, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x55, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x53,
	0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x44, 0x0a, 0x40, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a, 0x08,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x77, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x77, 0x6f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f,
	0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f,
	0x5f, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x27, 0x0a, 0x23, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x05, 0x2a, 0xf8, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x2c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4e, 0x41,
	0x53, 0x44, 0x41, 0x51, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x53, 0x4d, 0x10, 0x00, 0x12, 0x29, 0x0a,
	0x25, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x53, 0x4d, 0x10, 0x01, 0x12, 0x46, 0x0a, 0x42, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41,
	0x51, 0x5f, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02,
	0x12, 0x36, 0x0a, 0x32, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x59, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x5f, 0x4e, 0x59,
	0x53, 0x45, 0x5f, 0x4d, 0x4b, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4e, 0x59, 0x53, 0x45, 0x5f,
	0x41, 0x4d, 0x45, 0x58, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4e, 0x59, 0x53, 0x45, 0x5f, 0x41, 0x52,
	0x43, 0x41, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x42, 0x41, 0x54, 0x53, 0x5f, 0x5a, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x4c,
	0x43, 0x10, 0x07, 0x2a, 0x81, 0x06, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x30, 0x0a,
	0x2c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x07, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10,
	0x09, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x4f, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x39,
	0x0a, 0x35, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49,
	0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0e, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x0f, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x10, 0x11, 0x2a, 0x4d, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x2a, 0xb0, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x43, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48,
	0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x5f, 0x4f,
	0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x4e, 0x0a, 0x4a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48,
	0x41, 0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x49, 0x46,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xea, 0x02, 0x0a, 0x21, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x39, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x51,
	0x0a, 0x4d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x46, 0x49, 0x4e, 0x52, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x52, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x54, 0x41, 0x52, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x50, 0x0a, 0x4c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x46, 0x49, 0x4e, 0x52, 0x41, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x43,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x46, 0x5f, 0x43, 0x48, 0x49, 0x43, 0x41, 0x47,
	0x4f, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x5f,
	0x42, 0x58, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51,
	0x5f, 0x50, 0x53, 0x58, 0x10, 0x04, 0x2a, 0xf3, 0x03, 0x0a, 0x0f, 0x51, 0x42, 0x42, 0x4f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x51, 0x42,
	0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x42, 0x42, 0x4f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x46, 0x0a, 0x42, 0x51,
	0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x41, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x3d, 0x0a, 0x39, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x03, 0x12, 0x3e, 0x0a, 0x3a, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x57, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x42, 0x42, 0x4f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x30, 0x0a, 0x2c, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x27, 0x0a, 0x23, 0x51, 0x42, 0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x42,
	0x42, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x2a, 0x96, 0x01, 0x0a,
	0x19, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x37, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x49, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x4f,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x89, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x53, 0x48, 0x4f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x65, 0x67, 0x53, 0x48, 0x4f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x65, 0x67, 0x53, 0x48, 0x4f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0xbc, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4e, 0x61, 0x73, 0x64, 0x61, 0x71, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4e,
	0x59, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4e, 0x59, 0x53, 0x45, 0x5f, 0x4d, 0x4b, 0x54, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x4e, 0x59, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x41, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x41, 0x54, 0x53, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4c, 0x4c, 0x43, 0x10, 0x05,
	0x2a, 0x61, 0x0a, 0x0a, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x35,
	0x0a, 0x31, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4d, 0x4f, 0x52,
	0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x51, 0x4d, 0x6f, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x0b, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x50, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f,
	0x10, 0x02, 0x2a, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x8c, 0x0a, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x48, 0x4b, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x53,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x44, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x48, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x45, 0x43, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4e, 0x44, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x55, 0x4b, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4b, 0x52,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x4e, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x59, 0x50, 0x10, 0x0d, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4b, 0x4b, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x4d, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4c, 0x47, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4a, 0x44, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x4d, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x52, 0x46,
	0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x4e, 0x52, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x44, 0x52, 0x10, 0x15, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x54, 0x4c, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x57, 0x44, 0x10, 0x18,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4b, 0x45, 0x53, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x42, 0x50, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x55, 0x52,
	0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x59, 0x52, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x5a, 0x44, 0x10, 0x1d, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x47, 0x4e, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4b, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x4d, 0x52, 0x10, 0x20,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x4b, 0x52, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x48, 0x50, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x54, 0x45,
	0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x51, 0x41, 0x52, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x41, 0x52, 0x10, 0x25, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x43, 0x52, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x47, 0x44, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4c, 0x4c, 0x10, 0x28,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x5a, 0x41, 0x52, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x52, 0x57, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x53, 0x50,
	0x10, 0x2b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x42, 0x50, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x4b, 0x10, 0x2d, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x48, 0x46, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x48, 0x42, 0x10, 0x2f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x45, 0x44, 0x10, 0x30,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x53, 0x44, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x45, 0x50, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x44, 0x52,
	0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x4f, 0x50, 0x10, 0x34, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x43, 0x10, 0x35, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x43, 0x55, 0x10, 0x36, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x55, 0x52, 0x10, 0x37, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x58, 0x4e, 0x10, 0x38,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x4e, 0x48, 0x10, 0x39, 0x2a, 0x68, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x43, 0x53, 0x49, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x45, 0x53,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x48, 0x53, 0x49, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x53, 0x5f, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x54, 0x52, 0x10, 0x03,
	0x2a, 0xfb, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x26, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x52, 0x45,
	0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x06, 0x2a, 0x53,
	0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x59, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x4e, 0x10, 0x01, 0x2a, 0x74, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4f, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x54, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x52, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x58, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0x47, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01,
	0x2a, 0x21, 0x0a, 0x0c, 0x43, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x5a, 0x53,
	0x45, 0x10, 0x01, 0x2a, 0x9c, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x45,
	0x54, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x58, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x53, 0x58,
	0x10, 0x06, 0x2a, 0xb4, 0x08, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x10, 0x0a, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x10, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x4f, 0x64,
	0x64, 0x4c, 0x6f, 0x74, 0x4f, 0x64, 0x65, 0x72, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x64, 0x64, 0x4c,
	0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x13, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x17,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x1a, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x1c, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x43, 0x4d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x10,
	0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x1f, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x20,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x65, 0x77, 0x73,
	0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x22, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x24, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x25, 0x2a, 0x4a, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e,
	0x45, 0x57, 0x53, 0x10, 0x01, 0x2a, 0xb0, 0x01, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x75, 0x79,
	0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x55,
	0x59, 0x5f, 0x53, 0x55, 0x52, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x52, 0x50,
	0x4c, 0x55, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x2a, 0x99, 0x07, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x50, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x10,
	0x04, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x2a, 0x0a,
	0x26, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41, 0x52,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x5f, 0x42,
	0x45, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x07, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41,
	0x52, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x52, 0x41, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x0a,
	0x12, 0x2a, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x5f, 0x57, 0x41, 0x52,
	0x52, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4f, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x42, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x52, 0x55, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54,
	0x53, 0x10, 0x0e, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x54, 0x46, 0x10, 0x10, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x54,
	0x46, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49,
	0x54, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x54, 0x46, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x41, 0x42, 0x4f,
	0x56, 0x45, 0x10, 0x13, 0x2a, 0x24, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x69, 0x64, 0x65, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x69,
	0x64, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x0f, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x5f, 0x41, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x5f, 0x42, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x41, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x61, 0x6e, 0x5f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x5f,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x01, 0x2a, 0x5e, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0xe5, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48,
	0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a,
	0x9f, 0x05, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x59, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x49, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x2a,
	0x0a, 0x26, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x5f, 0x43, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x27,
	0x0a, 0x23, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x2a,
	0x0a, 0x26, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x0f, 0x2a, 0x88, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x53, 0x45, 0x41, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x07, 0x2a, 0x78, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x45, 0x57,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x10, 0x02, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_data_proto_rawDescOnce sync.Once
	file_pb_data_proto_rawDescData = file_pb_data_proto_rawDesc
)

func file_pb_data_proto_rawDescGZIP() []byte {
	file_pb_data_proto_rawDescOnce.Do(func() {
		file_pb_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_data_proto_rawDescData)
	})
	return file_pb_data_proto_rawDescData
}

var file_pb_data_proto_enumTypes = make([]protoimpl.EnumInfo, 54)
var file_pb_data_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_pb_data_proto_goTypes = []interface{}{
	(ActionType)(0),                                   // 0: ActionType
	(ResponseType)(0),                                 // 1: ResponseType
	(SecurityTradingStatus)(0),                        // 2: SecurityTradingStatus
	(SuspensionIndicator)(0),                          // 3: SuspensionIndicator
	(Authenticity)(0),                                 // 4: Authenticity
	(BreachedLevel)(0),                                // 5: BreachedLevel
	(CurrentTradingState)(0),                          // 6: CurrentTradingState
	(EventCode)(0),                                    // 7: EventCode
	(FinancialStatusIndicator)(0),                     // 8: FinancialStatusIndicator
	(HaltAction)(0),                                   // 9: HaltAction
	(IPOQuotationReleaseQualifier)(0),                 // 10: IPOQuotationReleaseQualifier
	(IndicatesIf)(0),                                  // 11: IndicatesIf
	(LULDRule)(0),                                     // 12: LULDRule
	(LevelFour)(0),                                    // 13: LevelFour
	(LevelOne)(0),                                     // 14: LevelOne
	(LevelThree)(0),                                   // 15: LevelThree
	(LevelTwo)(0),                                     // 16: LevelTwo
	(MarketCategory)(0),                               // 17: MarketCategory
	(MessageType)(0),                                  // 18: MessageType
	(NetChange)(0),                                    // 19: NetChange
	(OperationalHaltAction)(0),                        // 20: OperationalHaltAction
	(OriginatingMarketCenterIdentifier)(0),            // 21: OriginatingMarketCenterIdentifier
	(QBBOMessageType)(0),                              // 22: QBBOMessageType
	(QuotationReleaseQualifier)(0),                    // 23: QuotationReleaseQualifier
	(RegSHOAction)(0),                                 // 24: RegSHOAction
	(SecurityClass)(0),                                // 25: SecurityClass
	(BQMoreFlag)(0),                                   // 26: BQMoreFlag
	(BrokerSide)(0),                                   // 27: BrokerSide
	(CallPutFlag)(0),                                  // 28: CallPutFlag
	(CancelFlag)(0),                                   // 29: CancelFlag
	(CurrencyType)(0),                                 // 30: CurrencyType
	(IndexSource)(0),                                  // 31: IndexSource
	(IndexStatus)(0),                                  // 32: IndexStatus
	(IndicatesType)(0),                                // 33: IndicatesType
	(IndicatesWhether)(0),                             // 34: IndicatesWhether
	(InstrumentType)(0),                               // 35: InstrumentType
	(InvestorType)(0),                                 // 36: InvestorType
	(LastFragment)(0),                                 // 37: LastFragment
	(CnMarketCode)(0),                                 // 38: CnMarketCode
	(MarketCode)(0),                                   // 39: MarketCode
	(MsgType)(0),                                      // 40: MsgType
	(NewsType)(0),                                     // 41: NewsType
	(OrderImbalanceDirection)(0),                      // 42: OrderImbalanceDirection
	(ProductType)(0),                                  // 43: ProductType
	(Side)(0),                                         // 44: Side
	(SpreadTableCode)(0),                              // 45: SpreadTableCode
	(Style)(0),                                        // 46: Style
	(TradingSesControlType)(0),                        // 47: TradingSesControlType
	(TradingSesStatus)(0),                             // 48: TradingSesStatus
	(TradingSessionSubID)(0),                          // 49: TradingSessionSubID
	(TrdType)(0),                                      // 50: TrdType
	(UpdateAction)(0),                                 // 51: UpdateAction
	(WarrantType)(0),                                  // 52: WarrantType
	(Message_DataType)(0),                             // 53: Message.DataType
	(*AdjustedClosingPrice)(nil),                      // 54: AdjustedClosingPrice
	(*DayTradeSummary)(nil),                           // 55: DayTradeSummary
	(*DayTradeSummaryNextShares)(nil),                 // 56: DayTradeSummaryNextShares
	(*IPOInformation)(nil),                            // 57: IPOInformation
	(*IPOQuotingPeriodUpdate)(nil),                    // 58: IPOQuotingPeriodUpdate
	(*MWCBStatusMessage)(nil),                         // 59: MWCBStatusMessage
	(*MarketWideCircuitBreaker)(nil),                  // 60: MarketWideCircuitBreaker
	(*MessageHeader)(nil),                             // 61: MessageHeader
	(*OperationalHalt)(nil),                           // 62: OperationalHalt
	(*SaleConditionModifier)(nil),                     // 63: SaleConditionModifier
	(*ShortSaleRestrictionIndicatorMessage)(nil),      // 64: ShortSaleRestrictionIndicatorMessage
	(*StockDirectory)(nil),                            // 65: StockDirectory
	(*StockTradingAction)(nil),                        // 66: StockTradingAction
	(*SystemEventMessage)(nil),                        // 67: SystemEventMessage
	(*TradeCancelForNextsharesTrades)(nil),            // 68: TradeCancelForNextsharesTrades
	(*TradeCancelForNonNextSharesTrades)(nil),         // 69: TradeCancelForNonNextSharesTrades
	(*TradeCorrectionForNextsharesTrades)(nil),        // 70: TradeCorrectionForNextsharesTrades
	(*TradeCorrectionForNonNextsharesTrades)(nil),     // 71: TradeCorrectionForNonNextsharesTrades
	(*TradeReportForNextshares)(nil),                  // 72: TradeReportForNextshares
	(*TradeReportForNonNextshares)(nil),               // 73: TradeReportForNonNextshares
	(*QBBOMWCBBreachMessage)(nil),                     // 74: QBBOMWCBBreachMessage
	(*QBBOMWCBDeclineLevelMessage)(nil),               // 75: QBBOMWCBDeclineLevelMessage
	(*QBBOMessageHeader)(nil),                         // 76: QBBOMessageHeader
	(*QBBONextSharesQuotationMessage)(nil),            // 77: QBBONextSharesQuotationMessage
	(*QBBOOperationalHalt)(nil),                       // 78: QBBOOperationalHalt
	(*QBBOQuotationMessage)(nil),                      // 79: QBBOQuotationMessage
	(*QBBORegShoRestriction)(nil),                     // 80: QBBORegShoRestriction
	(*QBBOStockDirectory)(nil),                        // 81: QBBOStockDirectory
	(*QBBOStockTradingAction)(nil),                    // 82: QBBOStockTradingAction
	(*QBBOSystemEventMessage)(nil),                    // 83: QBBOSystemEventMessage
	(*AddOddLotOrder)(nil),                            // 84: AddOddLotOrder
	(*AggregateOrderBookUpdate)(nil),                  // 85: AggregateOrderBookUpdate
	(*BQMoreItem)(nil),                                // 86: BQMoreItem
	(*BrokerQueue)(nil),                               // 87: BrokerQueue
	(*ClosingPrice)(nil),                              // 88: ClosingPrice
	(*CurrencyRate)(nil),                              // 89: CurrencyRate
	(*DeleteOddLotOrder)(nil),                         // 90: DeleteOddLotOrder
	(*IndexData)(nil),                                 // 91: IndexData
	(*IndexDefinition)(nil),                           // 92: IndexDefinition
	(*IndicativeEquilibriumPrice)(nil),                // 93: IndicativeEquilibriumPrice
	(*LiquidityProvider)(nil),                         // 94: LiquidityProvider
	(*MarketDefinition)(nil),                          // 95: MarketDefinition
	(*MarketTurnover)(nil),                            // 96: MarketTurnover
	(*News)(nil),                                      // 97: News
	(*NoEntry)(nil),                                   // 98: NoEntry
	(*NoLiquidityProvider)(nil),                       // 99: NoLiquidityProvider
	(*NoMarketCode)(nil),                              // 100: NoMarketCode
	(*NoNewsLine)(nil),                                // 101: NoNewsLine
	(*NoSecurityCode)(nil),                            // 102: NoSecurityCode
	(*NoUnderlyingSecurity)(nil),                      // 103: NoUnderlyingSecurity
	(*NominalPrice)(nil),                              // 104: NominalPrice
	(*OrderImbalance)(nil),                            // 105: OrderImbalance
	(*PacketHeader)(nil),                              // 106: PacketHeader
	(*LongAdjustedClosingPrice)(nil),                  // 107: LongAdjustedClosingPrice
	(*LongDayTradeSummary)(nil),                       // 108: LongDayTradeSummary
	(*LongTradeCancelForNonNextSharesTrades)(nil),     // 109: LongTradeCancelForNonNextSharesTrades
	(*LongTradeCorrectionForNonNextsharesTrades)(nil), // 110: LongTradeCorrectionForNonNextsharesTrades
	(*LongTradeReportForNonNextshares)(nil),           // 111: LongTradeReportForNonNextshares
	(*ReferencePrice)(nil),                            // 112: ReferencePrice
	(*QBBOIPOQuotingPeriodUpdate)(nil),                // 113: QBBOIPOQuotingPeriodUpdate
	(*SecurityDefinition)(nil),                        // 114: SecurityDefinition
	(*SecurityStatus)(nil),                            // 115: SecurityStatus
	(*Statistics)(nil),                                // 116: Statistics
	(*StockConnectDailyQuotaBalance)(nil),             // 117: StockConnectDailyQuotaBalance
	(*StockConnectMarketTurnover)(nil),                // 118: StockConnectMarketTurnover
	(*Trade)(nil),                                     // 119: Trade
	(*TradeCancel)(nil),                               // 120: TradeCancel
	(*TradingSessionStatus)(nil),                      // 121: TradingSessionStatus
	(*VCMTrigger)(nil),                                // 122: VCMTrigger
	(*Yield)(nil),                                     // 123: Yield
	(*CNMarketDefinition)(nil),                        // 124: CNMarketDefinition
	(*CNSecurityDefinition)(nil),                      // 125: CNSecurityDefinition
	(*CNSecurityStatus)(nil),                          // 126: CNSecurityStatus
	(*CNStatistics)(nil),                              // 127: CNStatistics
	(*CNTopBook)(nil),                                 // 128: CNTopBook
	(*CertificationMsg)(nil),                          // 129: CertificationMsg
	(*Resp)(nil),                                      // 130: Resp
	(*Message)(nil),                                   // 131: Message
}
var file_pb_data_proto_depIdxs = []int32{
	25,  // 0: AdjustedClosingPrice.securityClass:type_name -> SecurityClass
	17,  // 1: DayTradeSummary.marketCategory:type_name -> MarketCategory
	17,  // 2: DayTradeSummaryNextShares.marketCategory:type_name -> MarketCategory
	25,  // 3: IPOInformation.securityClass:type_name -> SecurityClass
	19,  // 4: IPOInformation.referenceForNetChange:type_name -> NetChange
	10,  // 5: IPOQuotingPeriodUpdate.quotationReleaseQualifier:type_name -> IPOQuotationReleaseQualifier
	5,   // 6: MWCBStatusMessage.breachedLevel:type_name -> BreachedLevel
	18,  // 7: MessageHeader.messageType:type_name -> MessageType
	39,  // 8: OperationalHalt.marketCode:type_name -> MarketCode
	20,  // 9: OperationalHalt.operationalHaltAction:type_name -> OperationalHaltAction
	14,  // 10: SaleConditionModifier.level1:type_name -> LevelOne
	16,  // 11: SaleConditionModifier.level2:type_name -> LevelTwo
	15,  // 12: SaleConditionModifier.level3:type_name -> LevelThree
	13,  // 13: SaleConditionModifier.level4:type_name -> LevelFour
	24,  // 14: ShortSaleRestrictionIndicatorMessage.regSHOAction:type_name -> RegSHOAction
	17,  // 15: StockDirectory.marketCategory:type_name -> MarketCategory
	8,   // 16: StockDirectory.financialStatusIndicator:type_name -> FinancialStatusIndicator
	11,  // 17: StockDirectory.roundLotOnly:type_name -> IndicatesIf
	4,   // 18: StockDirectory.authenticity:type_name -> Authenticity
	11,  // 19: StockDirectory.shortSaleThresholdIndicator:type_name -> IndicatesIf
	11,  // 20: StockDirectory.IPOFlag:type_name -> IndicatesIf
	12,  // 21: StockDirectory.lULDReferencePriceTier:type_name -> LULDRule
	11,  // 22: StockDirectory.ETPlag:type_name -> IndicatesIf
	11,  // 23: StockDirectory.inverseIndicator:type_name -> IndicatesIf
	25,  // 24: StockTradingAction.securityClass:type_name -> SecurityClass
	6,   // 25: StockTradingAction.currentTradingState:type_name -> CurrentTradingState
	7,   // 26: SystemEventMessage.eventCode:type_name -> EventCode
	21,  // 27: TradeCancelForNextsharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 28: TradeCancelForNextsharesTrades.securityClass:type_name -> SecurityClass
	21,  // 29: TradeCancelForNonNextSharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 30: TradeCancelForNonNextSharesTrades.securityClass:type_name -> SecurityClass
	63,  // 31: TradeCancelForNonNextSharesTrades.originalSaleConditionModifier:type_name -> SaleConditionModifier
	21,  // 32: TradeCorrectionForNextsharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 33: TradeCorrectionForNextsharesTrades.securityClass:type_name -> SecurityClass
	21,  // 34: TradeCorrectionForNonNextsharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 35: TradeCorrectionForNonNextsharesTrades.securityClass:type_name -> SecurityClass
	21,  // 36: TradeReportForNextshares.originatingMarketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 37: TradeReportForNextshares.securityClass:type_name -> SecurityClass
	63,  // 38: TradeReportForNextshares.saleConditionModifier:type_name -> SaleConditionModifier
	21,  // 39: TradeReportForNonNextshares.originatingMarketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 40: TradeReportForNonNextshares.securityClass:type_name -> SecurityClass
	63,  // 41: TradeReportForNonNextshares.saleConditionModifier:type_name -> SaleConditionModifier
	22,  // 42: QBBOMessageHeader.messageType:type_name -> QBBOMessageType
	25,  // 43: QBBONextSharesQuotationMessage.securityClass:type_name -> SecurityClass
	39,  // 44: QBBOOperationalHalt.marketCode:type_name -> MarketCode
	9,   // 45: QBBOOperationalHalt.operationalHaltAction:type_name -> HaltAction
	25,  // 46: QBBOQuotationMessage.securityClass:type_name -> SecurityClass
	24,  // 47: QBBORegShoRestriction.regSHOAction:type_name -> RegSHOAction
	17,  // 48: QBBOStockDirectory.marketCategory:type_name -> MarketCategory
	8,   // 49: QBBOStockDirectory.financialStatusIndicator:type_name -> FinancialStatusIndicator
	11,  // 50: QBBOStockDirectory.roundLotOnly:type_name -> IndicatesIf
	4,   // 51: QBBOStockDirectory.authenticity:type_name -> Authenticity
	11,  // 52: QBBOStockDirectory.shortSaleThresholdIndicator:type_name -> IndicatesIf
	11,  // 53: QBBOStockDirectory.IPOFlag:type_name -> IndicatesIf
	12,  // 54: QBBOStockDirectory.lULDReferencePriceTier:type_name -> LULDRule
	11,  // 55: QBBOStockDirectory.ETPlag:type_name -> IndicatesIf
	11,  // 56: QBBOStockDirectory.inverseIndicator:type_name -> IndicatesIf
	25,  // 57: QBBOStockTradingAction.securityClass:type_name -> SecurityClass
	6,   // 58: QBBOStockTradingAction.currentTradingState:type_name -> CurrentTradingState
	7,   // 59: QBBOSystemEventMessage.eventCode:type_name -> EventCode
	44,  // 60: AddOddLotOrder.side:type_name -> Side
	98,  // 61: AggregateOrderBookUpdate.noEntries:type_name -> NoEntry
	33,  // 62: BQMoreItem.type:type_name -> IndicatesType
	27,  // 63: BrokerQueue.side:type_name -> BrokerSide
	26,  // 64: BrokerQueue.bQMoreFlag:type_name -> BQMoreFlag
	86,  // 65: BrokerQueue.items:type_name -> BQMoreItem
	30,  // 66: CurrencyRate.currencyCode:type_name -> CurrencyType
	44,  // 67: DeleteOddLotOrder.side:type_name -> Side
	32,  // 68: IndexData.indexStatus:type_name -> IndexStatus
	31,  // 69: IndexDefinition.indexSource:type_name -> IndexSource
	30,  // 70: IndexDefinition.currencyCode:type_name -> CurrencyType
	99,  // 71: LiquidityProvider.noLiquidityProviders:type_name -> NoLiquidityProvider
	39,  // 72: MarketDefinition.marketCode:type_name -> MarketCode
	30,  // 73: MarketDefinition.currencyCode:type_name -> CurrencyType
	39,  // 74: MarketTurnover.marketCode:type_name -> MarketCode
	30,  // 75: MarketTurnover.currencyCode:type_name -> CurrencyType
	41,  // 76: News.newsType:type_name -> NewsType
	29,  // 77: News.cancelFlag:type_name -> CancelFlag
	37,  // 78: News.lastFragment:type_name -> LastFragment
	100, // 79: News.noMarketCodes:type_name -> NoMarketCode
	102, // 80: News.noSecurityCodes:type_name -> NoSecurityCode
	101, // 81: News.noNewsLines:type_name -> NoNewsLine
	44,  // 82: NoEntry.side:type_name -> Side
	51,  // 83: NoEntry.updateAction:type_name -> UpdateAction
	39,  // 84: NoMarketCode.marketCode:type_name -> MarketCode
	42,  // 85: OrderImbalance.orderImbalanceDirection:type_name -> OrderImbalanceDirection
	25,  // 86: LongAdjustedClosingPrice.securityClass:type_name -> SecurityClass
	17,  // 87: LongDayTradeSummary.marketCategory:type_name -> MarketCategory
	21,  // 88: LongTradeCancelForNonNextSharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 89: LongTradeCancelForNonNextSharesTrades.securityClass:type_name -> SecurityClass
	63,  // 90: LongTradeCancelForNonNextSharesTrades.originalSaleConditionModifier:type_name -> SaleConditionModifier
	21,  // 91: LongTradeCorrectionForNonNextsharesTrades.marketCenterIdentifier:type_name -> OriginatingMarketCenterIdentifier
	25,  // 92: LongTradeCorrectionForNonNextsharesTrades.securityClass:type_name -> SecurityClass
	10,  // 93: QBBOIPOQuotingPeriodUpdate.quotationReleaseQualifier:type_name -> IPOQuotationReleaseQualifier
	39,  // 94: SecurityDefinition.marketCode:type_name -> MarketCode
	35,  // 95: SecurityDefinition.instrumentType:type_name -> InstrumentType
	43,  // 96: SecurityDefinition.productType:type_name -> ProductType
	45,  // 97: SecurityDefinition.spreadTableCode:type_name -> SpreadTableCode
	30,  // 98: SecurityDefinition.currencyCode:type_name -> CurrencyType
	34,  // 99: SecurityDefinition.shortSellFlag:type_name -> IndicatesWhether
	34,  // 100: SecurityDefinition.casFlag:type_name -> IndicatesWhether
	34,  // 101: SecurityDefinition.CCASSFlag:type_name -> IndicatesWhether
	34,  // 102: SecurityDefinition.dummySecurityFlag:type_name -> IndicatesWhether
	34,  // 103: SecurityDefinition.stampDutyFlag:type_name -> IndicatesWhether
	34,  // 104: SecurityDefinition.posFlag:type_name -> IndicatesWhether
	34,  // 105: SecurityDefinition.EFNFlag:type_name -> IndicatesWhether
	36,  // 106: SecurityDefinition.investorType:type_name -> InvestorType
	28,  // 107: SecurityDefinition.callPutFlag:type_name -> CallPutFlag
	46,  // 108: SecurityDefinition.style:type_name -> Style
	103, // 109: SecurityDefinition.noUnderlyingSecurities:type_name -> NoUnderlyingSecurity
	3,   // 110: SecurityStatus.suspensionIndicator:type_name -> SuspensionIndicator
	50,  // 111: Trade.trdType:type_name -> TrdType
	39,  // 112: TradingSessionStatus.marketCode:type_name -> MarketCode
	49,  // 113: TradingSessionStatus.tradingSessionSubID:type_name -> TradingSessionSubID
	48,  // 114: TradingSessionStatus.tradingSesStatus:type_name -> TradingSesStatus
	47,  // 115: TradingSessionStatus.TradingSesControlFlag:type_name -> TradingSesControlType
	38,  // 116: CNMarketDefinition.marketCode:type_name -> CnMarketCode
	30,  // 117: CNMarketDefinition.currencyCode:type_name -> CurrencyType
	38,  // 118: CNSecurityDefinition.marketCode:type_name -> CnMarketCode
	35,  // 119: CNSecurityDefinition.instrumentType:type_name -> InstrumentType
	30,  // 120: CNSecurityDefinition.currencyCode:type_name -> CurrencyType
	34,  // 121: CNSecurityDefinition.shortSellFlag:type_name -> IndicatesWhether
	2,   // 122: CNSecurityStatus.securityTradingStatus:type_name -> SecurityTradingStatus
	0,   // 123: CertificationMsg.actionType:type_name -> ActionType
	130, // 124: CertificationMsg.response:type_name -> Resp
	1,   // 125: Resp.type:type_name -> ResponseType
	53,  // 126: Message.data_type:type_name -> Message.DataType
	84,  // 127: Message.addOddLotOrder:type_name -> AddOddLotOrder
	85,  // 128: Message.aggregateOrderBookUpdate:type_name -> AggregateOrderBookUpdate
	87,  // 129: Message.brokerQueue:type_name -> BrokerQueue
	88,  // 130: Message.closingPrice:type_name -> ClosingPrice
	89,  // 131: Message.currencyRate:type_name -> CurrencyRate
	90,  // 132: Message.deleteOddLotOrder:type_name -> DeleteOddLotOrder
	91,  // 133: Message.indexData:type_name -> IndexData
	92,  // 134: Message.indexDefinition:type_name -> IndexDefinition
	93,  // 135: Message.indicativeEquilibriumPrice:type_name -> IndicativeEquilibriumPrice
	94,  // 136: Message.liquidityProvider:type_name -> LiquidityProvider
	95,  // 137: Message.marketDefinition:type_name -> MarketDefinition
	96,  // 138: Message.marketTurnover:type_name -> MarketTurnover
	97,  // 139: Message.news:type_name -> News
	104, // 140: Message.nominalPrice:type_name -> NominalPrice
	105, // 141: Message.orderImbalance:type_name -> OrderImbalance
	112, // 142: Message.referencePrice:type_name -> ReferencePrice
	114, // 143: Message.securityDefinition:type_name -> SecurityDefinition
	115, // 144: Message.securityStatus:type_name -> SecurityStatus
	116, // 145: Message.statistics:type_name -> Statistics
	117, // 146: Message.stockConnectDailyQuotaBalance:type_name -> StockConnectDailyQuotaBalance
	118, // 147: Message.stockConnectMarketTurnover:type_name -> StockConnectMarketTurnover
	119, // 148: Message.trade:type_name -> Trade
	120, // 149: Message.tradeCancel:type_name -> TradeCancel
	121, // 150: Message.tradingSessionStatus:type_name -> TradingSessionStatus
	122, // 151: Message.vCMTrigger:type_name -> VCMTrigger
	123, // 152: Message.yield:type_name -> Yield
	54,  // 153: Message.adjustedClosingPrice:type_name -> AdjustedClosingPrice
	55,  // 154: Message.dayTradeSummary:type_name -> DayTradeSummary
	56,  // 155: Message.dayTradeSummaryNextShares:type_name -> DayTradeSummaryNextShares
	57,  // 156: Message.iPOInformation:type_name -> IPOInformation
	58,  // 157: Message.iPOQuotingPeriodUpdate:type_name -> IPOQuotingPeriodUpdate
	107, // 158: Message.longAdjustedClosingPrice:type_name -> LongAdjustedClosingPrice
	108, // 159: Message.longDayTradeSummary:type_name -> LongDayTradeSummary
	109, // 160: Message.longTradeCancelForNonNextSharesTrades:type_name -> LongTradeCancelForNonNextSharesTrades
	110, // 161: Message.longTradeCorrectionForNonNextsharesTrades:type_name -> LongTradeCorrectionForNonNextsharesTrades
	111, // 162: Message.longTradeReportForNonNextshares:type_name -> LongTradeReportForNonNextshares
	59,  // 163: Message.mWCBStatusMessage:type_name -> MWCBStatusMessage
	60,  // 164: Message.marketWideCircuitBreaker:type_name -> MarketWideCircuitBreaker
	62,  // 165: Message.operationalHalt:type_name -> OperationalHalt
	63,  // 166: Message.saleConditionModifier:type_name -> SaleConditionModifier
	64,  // 167: Message.shortSaleRestrictionIndicatorMessage:type_name -> ShortSaleRestrictionIndicatorMessage
	65,  // 168: Message.stockDirectory:type_name -> StockDirectory
	66,  // 169: Message.stockTradingAction:type_name -> StockTradingAction
	67,  // 170: Message.systemEventMessage:type_name -> SystemEventMessage
	68,  // 171: Message.tradeCancelForNextsharesTrades:type_name -> TradeCancelForNextsharesTrades
	69,  // 172: Message.tradeCancelForNonNextSharesTrades:type_name -> TradeCancelForNonNextSharesTrades
	70,  // 173: Message.tradeCorrectionForNextsharesTrades:type_name -> TradeCorrectionForNextsharesTrades
	71,  // 174: Message.tradeCorrectionForNonNextsharesTrades:type_name -> TradeCorrectionForNonNextsharesTrades
	72,  // 175: Message.tradeReportForNextshares:type_name -> TradeReportForNextshares
	73,  // 176: Message.tradeReportForNonNextshares:type_name -> TradeReportForNonNextshares
	74,  // 177: Message.qBBOMWCBBreachMessage:type_name -> QBBOMWCBBreachMessage
	75,  // 178: Message.qBBOMWCBDeclineLevelMessage:type_name -> QBBOMWCBDeclineLevelMessage
	77,  // 179: Message.qBBONextSharesQuotationMessage:type_name -> QBBONextSharesQuotationMessage
	78,  // 180: Message.qBBOOperationalHalt:type_name -> QBBOOperationalHalt
	79,  // 181: Message.qBBOQuotationMessage:type_name -> QBBOQuotationMessage
	80,  // 182: Message.qBBORegShoRestriction:type_name -> QBBORegShoRestriction
	81,  // 183: Message.qBBOStockDirectory:type_name -> QBBOStockDirectory
	82,  // 184: Message.qBBOStockTradingAction:type_name -> QBBOStockTradingAction
	83,  // 185: Message.qBBOSystemEventMessage:type_name -> QBBOSystemEventMessage
	113, // 186: Message.qBBOIPOQuotingPeriodUpdate:type_name -> QBBOIPOQuotingPeriodUpdate
	129, // 187: Message.certificationMsg:type_name -> CertificationMsg
	124, // 188: Message.cNMarketDefinition:type_name -> CNMarketDefinition
	125, // 189: Message.cNSecurityDefinition:type_name -> CNSecurityDefinition
	126, // 190: Message.cNSecurityStatus:type_name -> CNSecurityStatus
	127, // 191: Message.cNStatistics:type_name -> CNStatistics
	128, // 192: Message.cNTopBook:type_name -> CNTopBook
	193, // [193:193] is the sub-list for method output_type
	193, // [193:193] is the sub-list for method input_type
	193, // [193:193] is the sub-list for extension type_name
	193, // [193:193] is the sub-list for extension extendee
	0,   // [0:193] is the sub-list for field type_name
}

func init() { file_pb_data_proto_init() }
func file_pb_data_proto_init() {
	if File_pb_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustedClosingPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayTradeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayTradeSummaryNextShares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOQuotingPeriodUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MWCBStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketWideCircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleConditionModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortSaleRestrictionIndicatorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTradingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCancelForNextsharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCancelForNonNextSharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCorrectionForNextsharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCorrectionForNonNextsharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeReportForNextshares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeReportForNonNextshares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOMWCBBreachMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOMWCBDeclineLevelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOMessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBONextSharesQuotationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOOperationalHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOQuotationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBORegShoRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOStockDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOStockTradingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOSystemEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOddLotOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateOrderBookUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BQMoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosingPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOddLotOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicativeEquilibriumPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTurnover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoLiquidityProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoMarketCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoNewsLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoSecurityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoUnderlyingSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominalPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderImbalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongAdjustedClosingPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongDayTradeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongTradeCancelForNonNextSharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongTradeCorrectionForNonNextsharesTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongTradeReportForNonNextshares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QBBOIPOQuotingPeriodUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockConnectDailyQuotaBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockConnectMarketTurnover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCMTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Yield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNMarketDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNSecurityDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNSecurityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNTopBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificationMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_data_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_pb_data_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*Message_AddOddLotOrder)(nil),
		(*Message_AggregateOrderBookUpdate)(nil),
		(*Message_BrokerQueue)(nil),
		(*Message_ClosingPrice)(nil),
		(*Message_CurrencyRate)(nil),
		(*Message_DeleteOddLotOrder)(nil),
		(*Message_IndexData)(nil),
		(*Message_IndexDefinition)(nil),
		(*Message_IndicativeEquilibriumPrice)(nil),
		(*Message_LiquidityProvider)(nil),
		(*Message_MarketDefinition)(nil),
		(*Message_MarketTurnover)(nil),
		(*Message_News)(nil),
		(*Message_NominalPrice)(nil),
		(*Message_OrderImbalance)(nil),
		(*Message_ReferencePrice)(nil),
		(*Message_SecurityDefinition)(nil),
		(*Message_SecurityStatus)(nil),
		(*Message_Statistics)(nil),
		(*Message_StockConnectDailyQuotaBalance)(nil),
		(*Message_StockConnectMarketTurnover)(nil),
		(*Message_Trade)(nil),
		(*Message_TradeCancel)(nil),
		(*Message_TradingSessionStatus)(nil),
		(*Message_VCMTrigger)(nil),
		(*Message_Yield)(nil),
		(*Message_AdjustedClosingPrice)(nil),
		(*Message_DayTradeSummary)(nil),
		(*Message_DayTradeSummaryNextShares)(nil),
		(*Message_IPOInformation)(nil),
		(*Message_IPOQuotingPeriodUpdate)(nil),
		(*Message_LongAdjustedClosingPrice)(nil),
		(*Message_LongDayTradeSummary)(nil),
		(*Message_LongTradeCancelForNonNextSharesTrades)(nil),
		(*Message_LongTradeCorrectionForNonNextsharesTrades)(nil),
		(*Message_LongTradeReportForNonNextshares)(nil),
		(*Message_MWCBStatusMessage)(nil),
		(*Message_MarketWideCircuitBreaker)(nil),
		(*Message_OperationalHalt)(nil),
		(*Message_SaleConditionModifier)(nil),
		(*Message_ShortSaleRestrictionIndicatorMessage)(nil),
		(*Message_StockDirectory)(nil),
		(*Message_StockTradingAction)(nil),
		(*Message_SystemEventMessage)(nil),
		(*Message_TradeCancelForNextsharesTrades)(nil),
		(*Message_TradeCancelForNonNextSharesTrades)(nil),
		(*Message_TradeCorrectionForNextsharesTrades)(nil),
		(*Message_TradeCorrectionForNonNextsharesTrades)(nil),
		(*Message_TradeReportForNextshares)(nil),
		(*Message_TradeReportForNonNextshares)(nil),
		(*Message_QBBOMWCBBreachMessage)(nil),
		(*Message_QBBOMWCBDeclineLevelMessage)(nil),
		(*Message_QBBONextSharesQuotationMessage)(nil),
		(*Message_QBBOOperationalHalt)(nil),
		(*Message_QBBOQuotationMessage)(nil),
		(*Message_QBBORegShoRestriction)(nil),
		(*Message_QBBOStockDirectory)(nil),
		(*Message_QBBOStockTradingAction)(nil),
		(*Message_QBBOSystemEventMessage)(nil),
		(*Message_QBBOIPOQuotingPeriodUpdate)(nil),
		(*Message_CertificationMsg)(nil),
		(*Message_CNMarketDefinition)(nil),
		(*Message_CNSecurityDefinition)(nil),
		(*Message_CNSecurityStatus)(nil),
		(*Message_CNStatistics)(nil),
		(*Message_CNTopBook)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_data_proto_rawDesc,
			NumEnums:      54,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_data_proto_goTypes,
		DependencyIndexes: file_pb_data_proto_depIdxs,
		EnumInfos:         file_pb_data_proto_enumTypes,
		MessageInfos:      file_pb_data_proto_msgTypes,
	}.Build()
	File_pb_data_proto = out.File
	file_pb_data_proto_rawDesc = nil
	file_pb_data_proto_goTypes = nil
	file_pb_data_proto_depIdxs = nil
}
